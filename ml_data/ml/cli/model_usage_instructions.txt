
        Model Usage Instructions
        =======================

        This directory contains trained models and all necessary information for making new predictions.
        Here's how to use the saved models:

        1. Load the model package:
        ```python
        import pickle
        with open('model_package.pkl', 'rb') as f:
            model_package = pickle.load(f)
        ```

        2. Extract components:
        ```python
        models = model_package['models']
        scaler = model_package['scaler']
        scaler_feature_names = model_package['scaler_feature_names']
        selected_features = model_package['selected_features']
        preprocessing_info = model_package['preprocessing_info']
        ```

        3. Preprocess new data:
        - Ensure your data includes all features used during training
        - Apply the same preprocessing (scaling) using the safe_transform function:
        ```python
        def safe_transform(scaler, data, scaler_feature_names):
            '''
            Apply scaling only to columns that were present during fit
            
            Args:
                scaler: Trained scaler object
                data: DataFrame to transform
                scaler_feature_names: Feature names used during scaler fit
            '''
            # Get common columns between data and scaler features
            common_cols = [col for col in scaler_feature_names if col in data.columns]
            
            # Get missing columns
            missing_cols = [col for col in scaler_feature_names if col not in data.columns]
            if missing_cols:
                print(f"Warning: Missing columns in new data: {missing_cols}")
            
            # Transform only the columns that were present during fit
            if common_cols:
                data_to_transform = data[common_cols].copy()
                data_transformed = scaler.transform(data_to_transform)
                result = data.copy()
                result[common_cols] = data_transformed
                return result
            else:
                print("No common columns found for transformation")
                return data

        # Transform the new data safely
        X_new_scaled = safe_transform(scaler, your_data, scaler_feature_names)

        # Filter to only include selected features for prediction
        X_new_selected = X_new_scaled[selected_features]
        ```

        4. Make predictions with one or more models:
        ```python
        # Choose a model (e.g., LogisticRegression)
        model = models['LogisticRegression']

        # Make predictions
        predictions = model.predict(X_new_selected)
        probabilities = model.predict_proba(X_new_selected)[:, 1]  # Probability of positive class
        ```

        5. Available models:
        - LogisticRegression
- SVM
- XGBoost

        6. Command-line prediction:
        You can also use the command-line interface for predictions:
        ```
        python day_10_whole_code.py --mode predict --model ./ml_data/ml/cli\model_package.pkl --data your_data.csv
        ```
        