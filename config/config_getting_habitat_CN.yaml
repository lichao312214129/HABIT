# ═══════════════════════════════════════════════════════════════════════════
# Habitat分析配置文件 - 详细中文注释版
# Configuration for Habitat Analysis - Detailed Chinese Comments
# ═══════════════════════════════════════════════════════════════════════════
#
# 📖 使用说明:
#   - 本文件使用YAML格式，请注意以下格式要求：
#     ✓ 使用2个空格缩进（不要使用Tab键）
#     ✓ 冒号后必须有空格
#     ✓ 列表项使用 "- " 开头（注意空格）
#     ✓ 注释使用 "#" 开头
#
# 🚀 快速开始:
#   habit habitat --config config/config_getting_habitat.yaml
#
# 📚 详细文档: doc/app_habitat_analysis.md
#
# ═══════════════════════════════════════════════════════════════════════════

# ─────────────────────────────────────────────────────────────────────────
# 📂 数据路径配置 / Data Path Configuration
# ─────────────────────────────────────────────────────────────────────────

# 原始数据目录 - 包含所有患者的影像数据
# 格式要求: 绝对路径或相对路径
# 示例: H:\Registration_ICC_structured 或 ./data/raw_images
data_dir: H:\Registration_ICC_structured

# 输出结果目录 - 所有分析结果将保存在此
# 自动创建子目录用于不同类型的输出
# 示例: H:\results_icc_testing 或 ./results/habitat_analysis
out_dir: H:\results_icc_testing


# ─────────────────────────────────────────────────────────────────────────
# 🔬 特征构建配置 / Feature Construction Configuration  
# ─────────────────────────────────────────────────────────────────────────

FeatureConstruction:
  
  # ───────────────────────────────────────────────────────────────────────
  # 体素级特征提取 / Voxel-Level Feature Extraction
  # ───────────────────────────────────────────────────────────────────────
  voxel_level:
    # 特征提取方法
    # 格式: method_name(image1, image2, ..., param1, param2, ...)
    # 
    # 可用方法:
    #   - kinetic(): 动力学特征（从多期相影像）
    #   - raw(): 原始信号强度
    #   - radiomics(): PyRadiomics特征
    #
    # 示例 1: 动力学特征
    #   kinetic(raw(pre_contrast), raw(LAP), raw(PVP), raw(delay_3min), timestamps)
    #
    # 示例 2: 多序列原始特征
    #   raw(T1), raw(T2), raw(ADC)
    #
    # 示例 3: 影像组学特征
    #   radiomics(T1, mask, params_file)
    #
    method: kinetic(raw(pre_contrast), raw(LAP), raw(PVP), raw(delay_3min), timestamps)
    
    params:
      # 时间戳文件 - 记录各期相的扫描时间
      # Excel文件格式: 第一列为患者ID,其他列为各期相时间
      # 必需项（如果使用kinetic方法）
      timestamps: F:\work\research\radiomics_TLSs\data\scan_time_of_phases.xlsx
  
  # ───────────────────────────────────────────────────────────────────────
  # Supervoxel级特征提取 / Supervoxel-Level Feature Extraction
  # ───────────────────────────────────────────────────────────────────────
  supervoxel_level:
    # Supervoxel文件匹配模式
    # 使用通配符 "*" 匹配任意字符
    # 示例: '*_supervoxel.nrrd' 匹配所有以 _supervoxel.nrrd 结尾的文件
    supervoxel_file_keyword: '*_supervoxel.nrrd'
    
    # 特征聚合方法
    # 可选方法:
    #   - mean_voxel_features(): 计算supervoxel内体素特征的均值
    #   - median_voxel_features(): 计算supervoxel内体素特征的中位数
    #   - std_voxel_features(): 计算supervoxel内体素特征的标准差
    method: mean_voxel_features()
    
    params:
      # PyRadiomics参数文件路径（如果使用radiomics特征）
      # 定义图像预处理和特征计算的参数
      params_file: ./config/params_supervoxel_radiomics.yaml
  
  # ───────────────────────────────────────────────────────────────────────
  # 个体水平特征预处理（可选）/ Individual-Level Preprocessing (Optional)
  # ───────────────────────────────────────────────────────────────────────
  # preprocessing_for_subject_level: 
  #   methods:
  #     # Winsorize标准化 - 处理极端值
  #     - method: winsorize
  #       winsor_limits: [0.05, 0.05]  # 裁剪上下5%的极端值
  #       global_normalize: true        # 是否全局标准化
  #
  #     # Min-Max标准化 - 缩放到[0,1]
  #     - method: minmax
  #       global_normalize: true
  #
  #     # 对数转换 - 处理偏态分布
  #     - method: log
  #       global_normalize: true

  # ───────────────────────────────────────────────────────────────────────
  # 群体水平特征预处理 / Population-Level Preprocessing
  # ───────────────────────────────────────────────────────────────────────
  preprocessing_for_group_level:
    methods:
      # 分箱处理 - 离散化连续特征
      - method: binning
        n_bins: 10              # 分箱数量
        bin_strategy: uniform   # 分箱策略: uniform(均匀), quantile(分位数), kmeans(K-means)
        global_normalize: false # 是否全局标准化


# ─────────────────────────────────────────────────────────────────────────
# 🧬 Habitat分割配置 / Habitat Segmentation Configuration
# ─────────────────────────────────────────────────────────────────────────

HabitatsSegmention:
  
  # ═══════════════════════════════════════════════════════════════════════
  # 聚类策略选择 / Clustering Strategy Selection
  # ═══════════════════════════════════════════════════════════════════════
  #
  # 📌 clustering_mode: 选择聚类策略
  #
  #   🔹 one_step (一步法):
  #     - 直接从体素聚类到生境
  #     - 每个肿瘤自动确定最优聚类数
  #     - 生境标签独立（患者间不统一）
  #     - 计算复杂度低
  #     - 适用场景: 个体异质性分析、小样本研究
  #
  #   🔹 two_step (二步法):
  #     - 先个体聚类(体素→supervoxels)
  #     - 再群体聚类(supervoxels→habitats)
  #     - 所有患者共享统一的生境标签体系
  #     - 计算复杂度高
  #     - 适用场景: 队列研究、跨患者生境模式识别
  #
  # ─────────────────────────────────────────────────────────────────────
  clustering_mode: two_step  # 选项: one_step 或 two_step
  
  # ═══════════════════════════════════════════════════════════════════════
  # Supervoxel聚类设置 (第一步: 个体水平聚类)
  # Supervoxel Clustering Settings (Step 1: Individual-level)
  # ═══════════════════════════════════════════════════════════════════════
  supervoxel:
    # 聚类算法
    # 选项:
    #   - kmeans: K-means聚类（快速，适合大数据）
    #   - gmm: 高斯混合模型（考虑不确定性）
    #   - hierarchical: 层次聚类（保留聚类树结构）
    algorithm: kmeans
    
    # 聚类数目
    # - two_step模式: 固定使用此数目
    # - one_step模式: 作为max_clusters的默认值
    n_clusters: 50
    
    # 随机种子 - 确保结果可重复
    random_state: 42
    
    # 最大迭代次数
    max_iter: 300
    
    # 初始化次数 - kmeans算法会运行n_init次,选择最好的结果
    n_init: 10
    
    # ───────────────────────────────────────────────────────────────────────
    # One-Step模式专用设置 / One-Step Mode Specific Settings
    # ───────────────────────────────────────────────────────────────────────
    # 
    # ⚠️ 注意: 以下设置仅在 clustering_mode: one_step 时生效
    #
    one_step_settings:
      # 最小聚类数 - 测试的起始聚类数
      # 建议: >= 2
      min_clusters: 2
      
      # 最大聚类数 - 测试的最大聚类数
      # 建议: 根据数据复杂度设置,通常5-15
      max_clusters: 10
      
      # 最优聚类数选择方法
      # 选项:
      #   - silhouette: 轮廓系数(值越大越好,范围-1到1)
      #   - calinski_harabasz: Calinski-Harabasz指数(值越大越好)
      #   - davies_bouldin: Davies-Bouldin指数(值越小越好)
      #   - inertia: 簇内平方和(值越小越好,但需要考虑肘部法则)
      selection_method: silhouette
      
      # 是否绘制验证曲线
      # true: 为每个肿瘤生成聚类验证曲线图
      # false: 不生成图表（节省时间）
      plot_validation_curves: true
  
  # ═══════════════════════════════════════════════════════════════════════
  # Habitat聚类设置 (第二步: 群体水平聚类)
  # Habitat Clustering Settings (Step 2: Population-level)
  # ═══════════════════════════════════════════════════════════════════════
  #
  # ⚠️ 注意: 以下设置仅在 clustering_mode: two_step 时生效
  #
  habitat:
    # 运行模式
    # 选项:
    #   - training: 训练新模型
    #     * 使用当前数据训练聚类模型
    #     * 保存模型和预处理参数
    #     * 生成聚类验证曲线
    #
    #   - testing: 使用已训练模型
    #     * 加载之前训练的聚类模型
    #     * 使用保存的预处理参数
    #     * 适用于新数据的一致性分析
    #
    # 📁 默认模型路径:
    #   - 预处理参数: {out_dir}/mean_values_of_all_supervoxels_features.csv
    #   - 聚类模型: {out_dir}/supervoxel2habitat_clustering_model.pkl
    mode: testing  # 选项: training 或 testing
    
    # 聚类算法
    # 选项:
    #   - kmeans: K-means聚类
    #   - gmm: 高斯混合模型
    algorithm: kmeans
    
    # 最大聚类数 - 用于自动选择最优聚类数时的上限
    max_clusters: 10
    
    # 聚类数选择方法
    # 对于kmeans:
    #   - inertia: 簇内平方和（常用）
    #   - silhouette: 轮廓系数
    #   - calinski_harabasz: Calinski-Harabasz指数
    # 对于gmm:
    #   - aic: 赤池信息准则
    #   - bic: 贝叶斯信息准则
    habitat_cluster_selection_method: inertia
    
    # 最优聚类数
    # - 设置为具体数字: 强制使用该聚类数
    # - 设置为 null: 自动选择最优聚类数
    # 示例: best_n_clusters: 4  或  best_n_clusters: null
    best_n_clusters: 4
    
    # 随机种子
    random_state: 42
    
    # 最大迭代次数
    max_iter: 300
    
    # 初始化次数
    n_init: 10


# ─────────────────────────────────────────────────────────────────────────
# ⚙️  通用设置 / General Settings
# ─────────────────────────────────────────────────────────────────────────

# 并行进程数
# - 设置为CPU核心数可以加快处理速度
# - 设置为1则串行处理（便于调试）
# - 建议: 设置为CPU核心数的一半
processes: 2

# 是否生成图表
# true: 生成聚类验证曲线、分布图等
# false: 不生成图表（节省时间和磁盘空间）
plot_curves: true

# 随机种子 - 全局设置
# 用于确保结果的可重复性
random_state: 42

# 调试模式
# true: 输出详细的日志信息
# false: 仅输出关键信息
debug: false


# ═══════════════════════════════════════════════════════════════════════════
# 💡 使用示例 / Usage Examples
# ═══════════════════════════════════════════════════════════════════════════
#
# 示例 1: 使用二步法进行训练
#   clustering_mode: two_step
#   habitat:
#     mode: training
#     best_n_clusters: null  # 自动选择
#
# 示例 2: 使用二步法进行测试
#   clustering_mode: two_step
#   habitat:
#     mode: testing
#     best_n_clusters: 4  # 使用之前确定的聚类数
#
# 示例 3: 使用一步法
#   clustering_mode: one_step
#   supervoxel:
#     one_step_settings:
#       min_clusters: 3
#       max_clusters: 8
#       selection_method: silhouette
#
# ═══════════════════════════════════════════════════════════════════════════

# ═══════════════════════════════════════════════════════════════════════════
# 📞 获取帮助 / Get Help
# ═══════════════════════════════════════════════════════════════════════════
#
# 命令行帮助:
#   habit habitat --help
#
# 详细文档:
#   - 中文: doc/app_habitat_analysis.md
#   - English: doc_en/app_habitat_analysis.md
#
# GitHub Issues:
#   https://github.com/your-repo/habit_project/issues
#
# ═══════════════════════════════════════════════════════════════════════════

