# ═══════════════════════════════════════════════════════════════════════════
# Habitat Analysis Configuration - Detailed Annotations
# ═══════════════════════════════════════════════════════════════════════════
#
# 📖 Instructions:
#   - YAML format requirements:
#     ✓ Use 2 spaces for indentation (DO NOT use Tab)
#     ✓ Space required after colon
#     ✓ List items start with "- " (note the space)
#     ✓ Comments start with "#"
#
# 🚀 Quick Start:
#   CLI:    habit habitat --config config/config_getting_habitat.yaml
#   Script: python scripts/app_getting_habitat_map.py --config config/config_getting_habitat.yaml
#
# 📚 Documentation:
#   - Chinese: doc/app_habitat_analysis.md
#   - English: doc_en/app_habitat_analysis.md
#
# ═══════════════════════════════════════════════════════════════════════════

# ─────────────────────────────────────────────────────────────────────────
# 📂 Data Paths
# ─────────────────────────────────────────────────────────────────────────

# Raw data directory
# - Contains imaging data for all patients
# - Format: Absolute or relative path
# - Example: H:\Registration_ICC_structured or ./data/raw_images
data_dir: H:\Registration_ICC_structured

# Output directory
# - All analysis results will be saved here
# - Subdirectories will be auto-created
# - Example: H:\results_icc_testing or ./results/habitat_analysis
out_dir: H:\results_icc_testing


# ─────────────────────────────────────────────────────────────────────────
# 🔬 Feature Construction
# ─────────────────────────────────────────────────────────────────────────

FeatureConstruction:
  
  # ───────────────────────────────────────────────────────────────────────
  # Voxel-Level Features
  # ───────────────────────────────────────────────────────────────────────
  voxel_level:
    # Feature extraction method
    # Format: method_name(image1, image2, ..., params)
    # 
    # Available methods:
    #   - kinetic(): Kinetic features from multi-phase images
    #                Example: kinetic(raw(pre_contrast), raw(LAP), raw(PVP), raw(delay_3min), timestamps)
    #
    #   - raw(): Raw signal intensity
    #            Example: raw(T1), raw(T2), raw(ADC)
    #
    #   - radiomics(): PyRadiomics features
    #                  Example: radiomics(T1, mask, params_file)
    #
    method: kinetic(raw(pre_contrast), raw(LAP), raw(PVP), raw(delay_3min), timestamps)
    
    params:
      # Timestamps file
      # - Excel file recording scan time for each phase
      # - Format: First column = patient ID, other columns = phase times
      # - Required if using kinetic method
      timestamps: F:\work\research\radiomics_TLSs\data\scan_time_of_phases.xlsx
  
  # ───────────────────────────────────────────────────────────────────────
  # Supervoxel-Level Features
  # ───────────────────────────────────────────────────────────────────────
  supervoxel_level:
    # Supervoxel file matching pattern
    # - Use wildcard "*"
    # - Example: '*_supervoxel.nrrd' matches all files ending with _supervoxel.nrrd
    supervoxel_file_keyword: '*_supervoxel.nrrd'
    
    # Feature aggregation method
    # Available options:
    #   - mean_voxel_features(): Mean of voxel features within each supervoxel
    #   - median_voxel_features(): Median aggregation
    #   - std_voxel_features(): Standard deviation
    #   - radiomics(): Extract radiomics features from supervoxel regions
    method: mean_voxel_features()
    
    params:
      # PyRadiomics parameter file (only if using radiomics features)
      params_file: ./config/params_supervoxel_radiomics.yaml
  
  # ───────────────────────────────────────────────────────────────────────
  # Individual-Level Preprocessing (Optional)
  # ───────────────────────────────────────────────────────────────────────
  # Applied to features from individual subjects before clustering
  # Useful for one-step mode or first stage of two-step mode
  #
  # preprocessing_for_subject_level: 
  #   methods:
  #     # Winsorize normalization - handle extreme values
  #     - method: winsorize
  #       winsor_limits: [0.05, 0.05]  # Trim top and bottom 5%
  #       global_normalize: true        # Apply global normalization
  #
  #     # Min-Max normalization - scale to [0,1]
  #     - method: minmax
  #       global_normalize: true
  #
  #     # Log transformation - handle skewed distributions
  #     - method: log
  #       global_normalize: true

  # ───────────────────────────────────────────────────────────────────────
  # Population-Level Preprocessing
  # ───────────────────────────────────────────────────────────────────────
  # Applied to aggregated features from all subjects
  # Used in second stage of two-step mode (habitat clustering)
  #
  preprocessing_for_group_level:
    methods:
      # Binning - discretize continuous features
      - method: binning
        n_bins: 10              # Number of bins
        bin_strategy: uniform   # Strategy: uniform, quantile, kmeans
        global_normalize: false # Apply global normalization


# ─────────────────────────────────────────────────────────────────────────
# 🧬 Habitat Segmentation
# ─────────────────────────────────────────────────────────────────────────

HabitatsSegmention:
  
  # ═══════════════════════════════════════════════════════════════════════
  # Clustering Strategy
  # ═══════════════════════════════════════════════════════════════════════
  #
  # clustering_mode: Choose clustering strategy
  #
  #   🔹 one_step:
  #     - Direct voxel-to-habitat clustering
  #     - Optimal cluster count auto-determined per tumor
  #     - Independent habitat labels (not unified across patients)
  #     - Lower computational cost
  #     - Best for: Individual heterogeneity analysis, small studies
  #
  #   🔹 two_step:
  #     - Two-stage process:
  #       1) Individual clustering: voxels → supervoxels
  #       2) Population clustering: supervoxels → habitats
  #     - Unified habitat labels across all patients
  #     - Higher computational cost
  #     - Best for: Cohort studies, cross-patient pattern recognition
  #
  # ─────────────────────────────────────────────────────────────────────
  clustering_mode: two_step  # Options: one_step or two_step
  
  # ═══════════════════════════════════════════════════════════════════════
  # Supervoxel Clustering (Step 1: Individual-level)
  # ═══════════════════════════════════════════════════════════════════════
  supervoxel:
    # Clustering algorithm
    # Options:
    #   - kmeans: K-means (fast, suitable for large datasets)
    #   - gmm: Gaussian Mixture Model (probabilistic, considers uncertainty)
    #   - hierarchical: Hierarchical clustering (preserves tree structure)
    algorithm: kmeans
    
    # Number of clusters
    # - two_step mode: Fixed count for all subjects
    # - one_step mode: Used as default max_clusters if not specified
    n_clusters: 50
    
    # Random seed
    # - Ensures reproducibility of results
    random_state: 42
    
    # Maximum iterations
    # - Maximum number of iterations for convergence
    max_iter: 300
    
    # Number of initializations
    # - Algorithm runs n_init times with different seeds, picks best result
    # - Higher values improve robustness but increase computation time
    n_init: 10
    
    # ───────────────────────────────────────────────────────────────────────
    # One-Step Mode Settings
    # ───────────────────────────────────────────────────────────────────────
    # 
    # ⚠️ Note: Only effective when clustering_mode: one_step
    #
    one_step_settings:
      # Minimum clusters
      # - Starting point for optimal cluster selection
      # - Recommendation: >= 2
      min_clusters: 2
      
      # Maximum clusters
      # - Upper limit for optimal cluster selection
      # - Recommendation: 5-15 based on data complexity
      # - Higher values increase computation time
      max_clusters: 10
      
      # Optimal cluster selection method
      # Options:
      #   - silhouette: Silhouette coefficient (higher is better, range -1 to 1)
      #   - calinski_harabasz: Calinski-Harabasz index (higher is better)
      #   - davies_bouldin: Davies-Bouldin index (lower is better)
      #   - inertia: Within-cluster sum of squares (lower is better, use elbow method)
      selection_method: silhouette
      
      # Plot validation curves
      # - true: Generate plots showing metrics vs. cluster count for each tumor
      # - false: No plots (saves time and disk space)
      plot_validation_curves: true
  
  # ═══════════════════════════════════════════════════════════════════════
  # Habitat Clustering (Step 2: Population-level)
  # ═══════════════════════════════════════════════════════════════════════
  #
  # ⚠️ Note: Only effective when clustering_mode: two_step
  #
  habitat:
    # Operation mode
    # Options:
    #   - training:
    #     * Train clustering model on current data
    #     * Save model and preprocessing parameters
    #     * Generate validation curves for cluster selection
    #
    #   - testing:
    #     * Load pre-trained model
    #     * Use saved preprocessing parameters
    #     * Ensures consistent habitat labels on new data
    #
    # 📁 Default paths:
    #   - Preprocessing params: {out_dir}/mean_values_of_all_supervoxels_features.csv
    #   - Model: {out_dir}/supervoxel2habitat_clustering_model.pkl
    mode: testing  # Options: training or testing
    
    # Clustering algorithm
    # Options: kmeans, gmm
    algorithm: kmeans
    
    # Maximum clusters
    # - Upper limit for automatic cluster selection
    # - Only used when best_n_clusters is null
    max_clusters: 10
    
    # Cluster selection method
    # For kmeans:
    #   - inertia: Within-cluster sum of squares (common choice)
    #   - silhouette: Silhouette coefficient
    #   - calinski_harabasz: Calinski-Harabasz index
    #   - davies_bouldin: Davies-Bouldin index
    # For gmm:
    #   - aic: Akaike Information Criterion
    #   - bic: Bayesian Information Criterion (recommended for GMM)
    habitat_cluster_selection_method: inertia
    
    # Optimal number of clusters
    # - Set a number: Force use this specific count
    # - Set null: Automatically select optimal count
    # Example: best_n_clusters: 4  or  best_n_clusters: null
    best_n_clusters: 4
    
    # Random seed
    random_state: 42
    
    # Maximum iterations
    max_iter: 300
    
    # Number of initializations
    n_init: 10


# ─────────────────────────────────────────────────────────────────────────
# ⚙️  General Settings
# ─────────────────────────────────────────────────────────────────────────

# Number of parallel processes
# - Set to CPU core count for maximum speed
# - Set to 1 for serial processing (easier debugging)
# - Recommendation: Half of available CPU cores
processes: 2

# Generate plots
# - true: Generate validation curves, distribution plots, etc.
# - false: No plots (saves time and disk space)
plot_curves: true

# Global random seed
# - Ensures reproducibility across all random operations
random_state: 42

# Debug mode
# - true: Output detailed logging information
# - false: Output only key information
debug: false


# ═══════════════════════════════════════════════════════════════════════════
# 💡 Usage Examples
# ═══════════════════════════════════════════════════════════════════════════
#
# Example 1: Train with two-step clustering
#   clustering_mode: two_step
#   habitat:
#     mode: training
#     best_n_clusters: null  # Auto-select optimal count
#
# Example 2: Test with two-step clustering
#   clustering_mode: two_step
#   habitat:
#     mode: testing
#     best_n_clusters: 4  # Use pre-determined count
#
# Example 3: Use one-step clustering
#   clustering_mode: one_step
#   supervoxel:
#     one_step_settings:
#       min_clusters: 3
#       max_clusters: 8
#       selection_method: silhouette
#       plot_validation_curves: true
#
# ═══════════════════════════════════════════════════════════════════════════

# ═══════════════════════════════════════════════════════════════════════════
# 📞 Get Help
# ═══════════════════════════════════════════════════════════════════════════
#
# Command-line help:
#   habit habitat --help
#
# Documentation:
#   - Chinese: doc/app_habitat_analysis.md
#   - English: doc_en/app_habitat_analysis.md
#
# Configuration index:
#   config/README_CONFIG.md
#
# GitHub Issues:
#   https://github.com/your-repo/habit_project/issues
#
# ═══════════════════════════════════════════════════════════════════════════
