
import base64
exec(base64.b64decode(b'IiIiDQpJbXBsZW1lbnRhdGlvbiBvZiBBZmZpbml0eSBQcm9wYWdhdGlvbiBDbHVzdGVyaW5nIGFsZ29yaXRobQ0KIiIiDQoNCmltcG9ydCBudW1weSBhcyBucA0KZnJvbSBza2xlYXJuLmNsdXN0ZXIgaW1wb3J0IEFmZmluaXR5UHJvcGFnYXRpb24NCmZyb20gdHlwaW5nIGltcG9ydCBUdXBsZSwgRGljdCwgQW55LCBPcHRpb25hbA0KDQpmcm9tIC5iYXNlX2NsdXN0ZXJpbmcgaW1wb3J0IEJhc2VDbHVzdGVyaW5nDQoNCmNsYXNzIEFmZmluaXR5UHJvcGFnYXRpb25DbHVzdGVyaW5nKEJhc2VDbHVzdGVyaW5nKToNCiAgICAiIiINCiAgICBBZmZpbml0eSBQcm9wYWdhdGlvbiBDbHVzdGVyaW5nIGltcGxlbWVudGF0aW9uDQogICAgDQogICAgUGFyYW1ldGVyczoNCiAgICAtLS0tLS0tLS0tLQ0KICAgIGRhbXBpbmcgOiBmbG9hdCwgb3B0aW9uYWwgKGRlZmF1bHQ9MC41KQ0KICAgICAgICBEYW1waW5nIGZhY3RvciBiZXR3ZWVuIDAuNSBhbmQgMQ0KICAgICAgICANCiAgICBtYXhfaXRlciA6IGludCwgb3B0aW9uYWwgKGRlZmF1bHQ9MjAwKQ0KICAgICAgICBNYXhpbXVtIG51bWJlciBvZiBpdGVyYXRpb25zDQogICAgICAgIA0KICAgIGNvbnZlcmdlbmNlX2l0ZXIgOiBpbnQsIG9wdGlvbmFsIChkZWZhdWx0PTE1KQ0KICAgICAgICBOdW1iZXIgb2YgaXRlcmF0aW9ucyB3aXRoIG5vIGNoYW5nZSBpbiB0aGUgbnVtYmVyIG9mIGVzdGltYXRlZCBjbHVzdGVycw0KICAgICAgICB0aGF0IHN0b3BzIHRoZSBjb252ZXJnZW5jZQ0KICAgICAgICANCiAgICBwcmVmZXJlbmNlIDogYXJyYXktbGlrZSwgc2hhcGUgKG5fc2FtcGxlcywpIG9yIGZsb2F0LCBvcHRpb25hbCAoZGVmYXVsdD1Ob25lKQ0KICAgICAgICBQcmVmZXJlbmNlcyBmb3IgZWFjaCBwb2ludCAtIHBvaW50cyB3aXRoIGxhcmdlciB2YWx1ZXMgb2YgcHJlZmVyZW5jZXMgYXJlDQogICAgICAgIG1vcmUgbGlrZWx5IHRvIGJlIGNob3NlbiBhcyBleGVtcGxhcnMuIFRoZSBudW1iZXIgb2YgZXhlbXBsYXJzLCBpLmUuIG9mDQogICAgICAgIGNsdXN0ZXJzLCBpcyBpbmZsdWVuY2VkIGJ5IHRoZSBpbnB1dCBwcmVmZXJlbmNlcyB2YWx1ZS4gSWYgdGhlIHByZWZlcmVuY2VzDQogICAgICAgIGFyZSBub3QgcGFzc2VkIGFzIGFyZ3VtZW50cywgdGhleSB3aWxsIGJlIHNldCB0byB0aGUgbWVkaWFuIG9mIHRoZSBpbnB1dA0KICAgICAgICBzaW1pbGFyaXRpZXMNCiAgICAgICAgDQogICAgYWZmaW5pdHkgOiBzdHIsIG9wdGlvbmFsIChkZWZhdWx0PSdldWNsaWRlYW4nKQ0KICAgICAgICBXaGljaCBhZmZpbml0eSB0byB1c2UuIEF0IHRoZSBtb21lbnQgJ3ByZWNvbXB1dGVkJyBhbmQgJ2V1Y2xpZGVhbicgYXJlDQogICAgICAgIHN1cHBvcnRlZC4gJ2V1Y2xpZGVhbicgdXNlcyB0aGUgbmVnYXRpdmUgc3F1YXJlZCBldWNsaWRlYW4gZGlzdGFuY2UgYmV0d2Vlbg0KICAgICAgICBwb2ludHMNCiAgICAiIiINCiAgICANCiAgICBkZWYgX19pbml0X18oc2VsZiwgZGFtcGluZzogZmxvYXQgPSAwLjUsIG1heF9pdGVyOiBpbnQgPSAyMDAsDQogICAgICAgICAgICAgICAgIGNvbnZlcmdlbmNlX2l0ZXI6IGludCA9IDE1LCBwcmVmZXJlbmNlOiBPcHRpb25hbFtmbG9hdF0gPSBOb25lLA0KICAgICAgICAgICAgICAgICBhZmZpbml0eTogc3RyID0gJ2V1Y2xpZGVhbicsICoqa3dhcmdzKToNCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhuX2NsdXN0ZXJzPU5vbmUsICoqa3dhcmdzKSAgIyBBZmZpbml0eVByb3BhZ2F0aW9uIGRvZXNuJ3QgcmVxdWlyZSBuX2NsdXN0ZXJzDQogICAgICAgIHNlbGYuZGFtcGluZyA9IGRhbXBpbmcNCiAgICAgICAgc2VsZi5tYXhfaXRlciA9IG1heF9pdGVyDQogICAgICAgIHNlbGYuY29udmVyZ2VuY2VfaXRlciA9IGNvbnZlcmdlbmNlX2l0ZXINCiAgICAgICAgc2VsZi5wcmVmZXJlbmNlID0gcHJlZmVyZW5jZQ0KICAgICAgICBzZWxmLmFmZmluaXR5ID0gYWZmaW5pdHkNCiAgICAgICAgc2VsZi5tb2RlbCA9IEFmZmluaXR5UHJvcGFnYXRpb24oDQogICAgICAgICAgICBkYW1waW5nPWRhbXBpbmcsDQogICAgICAgICAgICBtYXhfaXRlcj1tYXhfaXRlciwNCiAgICAgICAgICAgIGNvbnZlcmdlbmNlX2l0ZXI9Y29udmVyZ2VuY2VfaXRlciwNCiAgICAgICAgICAgIHByZWZlcmVuY2U9cHJlZmVyZW5jZSwNCiAgICAgICAgICAgIGFmZmluaXR5PWFmZmluaXR5DQogICAgICAgICkNCiAgICANCiAgICBkZWYgZml0KHNlbGYsIFg6IG5wLm5kYXJyYXkpIC0+ICdBZmZpbml0eVByb3BhZ2F0aW9uQ2x1c3RlcmluZyc6DQogICAgICAgICIiIg0KICAgICAgICBGaXQgdGhlIGFmZmluaXR5IHByb3BhZ2F0aW9uIGNsdXN0ZXJpbmcgbW9kZWwNCiAgICAgICAgDQogICAgICAgIEFyZ3M6DQogICAgICAgICAgICBYIDogbnAubmRhcnJheQ0KICAgICAgICAgICAgICAgIFRyYWluaW5nIGRhdGEgb2Ygc2hhcGUgKG5fc2FtcGxlcywgbl9mZWF0dXJlcykNCiAgICAgICAgICAgICAgICANCiAgICAgICAgUmV0dXJuczoNCiAgICAgICAgICAgIHNlbGYgOiBBZmZpbml0eVByb3BhZ2F0aW9uQ2x1c3RlcmluZw0KICAgICAgICAgICAgICAgIFJldHVybnMgdGhlIGluc3RhbmNlIGl0c2VsZg0KICAgICAgICAiIiINCiAgICAgICAgc2VsZi5tb2RlbC5maXQoWCkNCiAgICAgICAgcmV0dXJuIHNlbGYNCiAgICANCiAgICBkZWYgcHJlZGljdChzZWxmLCBYOiBucC5uZGFycmF5KSAtPiBucC5uZGFycmF5Og0KICAgICAgICAiIiINCiAgICAgICAgUHJlZGljdCB0aGUgY2xvc2VzdCBjbHVzdGVyIGVhY2ggc2FtcGxlIGluIFggYmVsb25ncyB0bw0KICAgICAgICANCiAgICAgICAgQXJnczoNCiAgICAgICAgICAgIFggOiBucC5uZGFycmF5DQogICAgICAgICAgICAgICAgTmV3IGRhdGEgdG8gcHJlZGljdCBvZiBzaGFwZSAobl9zYW1wbGVzLCBuX2ZlYXR1cmVzKQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICBSZXR1cm5zOg0KICAgICAgICAgICAgbGFiZWxzIDogbnAubmRhcnJheQ0KICAgICAgICAgICAgICAgIENsdXN0ZXIgbGFiZWxzIGZvciBlYWNoIHNhbXBsZQ0KICAgICAgICAiIiINCiAgICAgICAgcmV0dXJuIHNlbGYubW9kZWwuZml0X3ByZWRpY3QoWCkNCiAgICANCiAgICBkZWYgZ2V0X3BhcmFtcyhzZWxmKSAtPiBEaWN0W3N0ciwgQW55XToNCiAgICAgICAgIiIiDQogICAgICAgIEdldCBwYXJhbWV0ZXJzIGZvciB0aGlzIGVzdGltYXRvcg0KICAgICAgICANCiAgICAgICAgUmV0dXJuczoNCiAgICAgICAgICAgIHBhcmFtcyA6IGRpY3QNCiAgICAgICAgICAgICAgICBQYXJhbWV0ZXIgbmFtZXMgbWFwcGVkIHRvIHRoZWlyIHZhbHVlcw0KICAgICAgICAiIiINCiAgICAgICAgcGFyYW1zID0gc3VwZXIoKS5nZXRfcGFyYW1zKCkNCiAgICAgICAgcGFyYW1zLnVwZGF0ZSh7DQogICAgICAgICAgICAnZGFtcGluZyc6IHNlbGYuZGFtcGluZywNCiAgICAgICAgICAgICdtYXhfaXRlcic6IHNlbGYubWF4X2l0ZXIsDQogICAgICAgICAgICAnY29udmVyZ2VuY2VfaXRlcic6IHNlbGYuY29udmVyZ2VuY2VfaXRlciwNCiAgICAgICAgICAgICdwcmVmZXJlbmNlJzogc2VsZi5wcmVmZXJlbmNlLA0KICAgICAgICAgICAgJ2FmZmluaXR5Jzogc2VsZi5hZmZpbml0eQ0KICAgICAgICB9KQ0KICAgICAgICByZXR1cm4gcGFyYW1zDQogICAgDQogICAgZGVmIHNldF9wYXJhbXMoc2VsZiwgKipwYXJhbXMpIC0+ICdBZmZpbml0eVByb3BhZ2F0aW9uQ2x1c3RlcmluZyc6DQogICAgICAgICIiIg0KICAgICAgICBTZXQgdGhlIHBhcmFtZXRlcnMgb2YgdGhpcyBlc3RpbWF0b3INCiAgICAgICAgDQogICAgICAgIEFyZ3M6DQogICAgICAgICAgICAqKnBhcmFtcyA6IGRpY3QNCiAgICAgICAgICAgICAgICBFc3RpbWF0b3IgcGFyYW1ldGVycw0KICAgICAgICAgICAgDQogICAgICAgIFJldHVybnM6DQogICAgICAgICAgICBzZWxmIDogQWZmaW5pdHlQcm9wYWdhdGlvbkNsdXN0ZXJpbmcNCiAgICAgICAgICAgICAgICBSZXR1cm5zIHRoZSBpbnN0YW5jZSBpdHNlbGYNCiAgICAgICAgIiIiDQogICAgICAgIHN1cGVyKCkuc2V0X3BhcmFtcygqKnBhcmFtcykNCiAgICAgICAgaWYgJ2RhbXBpbmcnIGluIHBhcmFtczoNCiAgICAgICAgICAgIHNlbGYuZGFtcGluZyA9IHBhcmFtc1snZGFtcGluZyddDQogICAgICAgIGlmICdtYXhfaXRlcicgaW4gcGFyYW1zOg0KICAgICAgICAgICAgc2VsZi5tYXhfaXRlciA9IHBhcmFtc1snbWF4X2l0ZXInXQ0KICAgICAgICBpZiAnY29udmVyZ2VuY2VfaXRlcicgaW4gcGFyYW1zOg0KICAgICAgICAgICAgc2VsZi5jb252ZXJnZW5jZV9pdGVyID0gcGFyYW1zWydjb252ZXJnZW5jZV9pdGVyJ10NCiAgICAgICAgaWYgJ3ByZWZlcmVuY2UnIGluIHBhcmFtczoNCiAgICAgICAgICAgIHNlbGYucHJlZmVyZW5jZSA9IHBhcmFtc1sncHJlZmVyZW5jZSddDQogICAgICAgIGlmICdhZmZpbml0eScgaW4gcGFyYW1zOg0KICAgICAgICAgICAgc2VsZi5hZmZpbml0eSA9IHBhcmFtc1snYWZmaW5pdHknXQ0KICAgICAgICAgICAgDQogICAgICAgIHNlbGYubW9kZWwgPSBBZmZpbml0eVByb3BhZ2F0aW9uKA0KICAgICAgICAgICAgZGFtcGluZz1zZWxmLmRhbXBpbmcsDQogICAgICAgICAgICBtYXhfaXRlcj1zZWxmLm1heF9pdGVyLA0KICAgICAgICAgICAgY29udmVyZ2VuY2VfaXRlcj1zZWxmLmNvbnZlcmdlbmNlX2l0ZXIsDQogICAgICAgICAgICBwcmVmZXJlbmNlPXNlbGYucHJlZmVyZW5jZSwNCiAgICAgICAgICAgIGFmZmluaXR5PXNlbGYuYWZmaW5pdHkNCiAgICAgICAgKQ0KICAgICAgICByZXR1cm4gc2VsZiA=').decode())
