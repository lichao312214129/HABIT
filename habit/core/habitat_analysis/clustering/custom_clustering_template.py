
import base64
exec(base64.b64decode(b'IiIiDQpDdXN0b20gQ2x1c3RlcmluZyBBbGdvcml0aG0gVGVtcGxhdGUNCg0KVXNhZ2UgSW5zdHJ1Y3Rpb25zOg0KMS4gQ29weSB0aGlzIGZpbGUgYW5kIHJlbmFtZSBpdCB0byB5b3VyX2FsZ29yaXRobV9jbHVzdGVyaW5nLnB5DQoyLiBDaGFuZ2UgdGhlIGNsYXNzIG5hbWUgQ3VzdG9tQ2x1c3RlcmluZ1RlbXBsYXRlIHRvIHlvdXIgYWxnb3JpdGhtIG5hbWUsIGUuZy4sIFlvdXJBbGdvcml0aG1DbHVzdGVyaW5nDQozLiBNb2RpZnkgdGhlIHJlZ2lzdGVyX2NsdXN0ZXJpbmcgZGVjb3JhdG9yIG5hbWUgdG8geW91ciBhbGdvcml0aG0ncyBzaG9ydCBuYW1lLCBlLmcuLCAneW91cl9hbGdvcml0aG0nDQo0LiBJbXBsZW1lbnQgYWxsIG5lY2Vzc2FyeSBtZXRob2RzOiBmaXQsIHByZWRpY3QsIGZpbmRfb3B0aW1hbF9jbHVzdGVycw0KNS4gTm8gbmVlZCB0byBtb2RpZnkgX19pbml0X18ucHksIHRoZSBzeXN0ZW0gd2lsbCBhdXRvbWF0aWNhbGx5IGRpc2NvdmVyIGFuZCByZWdpc3RlciB5b3VyIGFsZ29yaXRobQ0KIiIiDQoNCmltcG9ydCBudW1weSBhcyBucA0KZnJvbSBoYWJpdGF0X2NsdXN0ZXJpbmcuY2x1c3RlcmluZy5iYXNlX2NsdXN0ZXJpbmcgaW1wb3J0IEJhc2VDbHVzdGVyaW5nLCByZWdpc3Rlcl9jbHVzdGVyaW5nDQoNCg0KQHJlZ2lzdGVyX2NsdXN0ZXJpbmcoJ2N1c3RvbV90ZW1wbGF0ZScpICAjIFJlZ2lzdGVyIGNsdXN0ZXJpbmcgYWxnb3JpdGhtIChwbGVhc2UgY2hhbmdlIHRvIHlvdXIgYWxnb3JpdGhtIG5hbWUpDQpjbGFzcyBDdXN0b21DbHVzdGVyaW5nVGVtcGxhdGUoQmFzZUNsdXN0ZXJpbmcpOg0KICAgICIiIg0KICAgIEN1c3RvbSBDbHVzdGVyaW5nIEFsZ29yaXRobSBUZW1wbGF0ZSBDbGFzcyAtIFBsZWFzZSByZXBsYWNlIHdpdGggeW91ciBhbGdvcml0aG0gZGVzY3JpcHRpb24NCiAgICAiIiINCiAgICANCiAgICBkZWYgX19pbml0X18oc2VsZiwgbl9jbHVzdGVyczogaW50ID0gTm9uZSwgcmFuZG9tX3N0YXRlOiBpbnQgPSAwLCAqKmt3YXJncyk6DQogICAgICAgICIiIg0KICAgICAgICBJbml0aWFsaXplIGNsdXN0ZXJpbmcgYWxnb3JpdGhtDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgbl9jbHVzdGVyczogTnVtYmVyIG9mIGNsdXN0ZXJzLCBjYW4gYmUgTm9uZSwgaW5kaWNhdGluZyBpdCBuZWVkcyB0byBiZSBkZXRlcm1pbmVkIGJ5IGZpbmRfb3B0aW1hbF9jbHVzdGVycw0KICAgICAgICAgICAgcmFuZG9tX3N0YXRlOiBSYW5kb20gc2VlZCB0byBlbnN1cmUgcmVwcm9kdWNpYmxlIHJlc3VsdHMNCiAgICAgICAgICAgICoqa3dhcmdzOiBPdGhlciBwYXJhbWV0ZXJzIHRvIGJlIGhhbmRsZWQgYnkgc3ViY2xhc3Nlcw0KICAgICAgICAiIiINCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhuX2NsdXN0ZXJzLCByYW5kb21fc3RhdGUpDQogICAgICAgIHNlbGYua3dhcmdzID0ga3dhcmdzDQogICAgICAgICMgQWRkIG90aGVyIHBhcmFtZXRlcnMgeW91IG5lZWQNCiAgICANCiAgICBkZWYgZml0KHNlbGYsIFg6IG5wLm5kYXJyYXkpIC0+ICdDdXN0b21DbHVzdGVyaW5nVGVtcGxhdGUnOg0KICAgICAgICAiIiINCiAgICAgICAgVHJhaW4gdGhlIGNsdXN0ZXJpbmcgbW9kZWwNCiAgICAgICAgDQogICAgICAgIEFyZ3M6DQogICAgICAgICAgICBYOiBJbnB1dCBkYXRhIHdpdGggc2hhcGUgKG5fc2FtcGxlcywgbl9mZWF0dXJlcykNCiAgICAgICAgICAgIA0KICAgICAgICBSZXR1cm5zOg0KICAgICAgICAgICAgc2VsZjogVHJhaW5lZCBtb2RlbA0KICAgICAgICAiIiINCiAgICAgICAgaWYgc2VsZi5uX2NsdXN0ZXJzIGlzIE5vbmU6DQogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJuX2NsdXN0ZXJzIG11c3QgYmUgc3BlY2lmaWVkIG9yIGRldGVybWluZWQgYnkgZmluZF9vcHRpbWFsX2NsdXN0ZXJzIG1ldGhvZCIpDQogICAgICAgIA0KICAgICAgICAjIEltcGxlbWVudCB5b3VyIGNsdXN0ZXJpbmcgYWxnb3JpdGhtIGhlcmUNCiAgICAgICAgIyBGb3IgZXhhbXBsZToNCiAgICAgICAgIyBzZWxmLm1vZGVsID0gWW91ckFsZ29yaXRobShuX2NsdXN0ZXJzPXNlbGYubl9jbHVzdGVycywgcmFuZG9tX3N0YXRlPXNlbGYucmFuZG9tX3N0YXRlLCAqKnNlbGYua3dhcmdzKQ0KICAgICAgICAjIHNlbGYubW9kZWwuZml0KFgpDQogICAgICAgICMgc2VsZi5sYWJlbHNfID0gc2VsZi5tb2RlbC5wcmVkaWN0KFgpIG9yIHNlbGYubW9kZWwubGFiZWxzXw0KICAgICAgICANCiAgICAgICAgIyBEZW1vIHdpdGggZHVtbXkgZGF0YSAocGxlYXNlIHJlcGxhY2Ugd2l0aCBhY3R1YWwgaW1wbGVtZW50YXRpb24pDQogICAgICAgIG5wLnJhbmRvbS5zZWVkKHNlbGYucmFuZG9tX3N0YXRlKQ0KICAgICAgICBzZWxmLmxhYmVsc18gPSBucC5yYW5kb20ucmFuZGludCgwLCBzZWxmLm5fY2x1c3RlcnMsIHNpemU9WC5zaGFwZVswXSkNCiAgICAgICAgDQogICAgICAgIHJldHVybiBzZWxmDQogICAgDQogICAgZGVmIHByZWRpY3Qoc2VsZiwgWDogbnAubmRhcnJheSkgLT4gbnAubmRhcnJheToNCiAgICAgICAgIiIiDQogICAgICAgIFByZWRpY3QgY2x1c3RlciBsYWJlbHMgZm9yIGlucHV0IGRhdGENCiAgICAgICAgDQogICAgICAgIEFyZ3M6DQogICAgICAgICAgICBYOiBJbnB1dCBkYXRhIHdpdGggc2hhcGUgKG5fc2FtcGxlcywgbl9mZWF0dXJlcykNCiAgICAgICAgICAgIA0KICAgICAgICBSZXR1cm5zOg0KICAgICAgICAgICAgbGFiZWxzOiBDbHVzdGVyIGxhYmVscyB3aXRoIHNoYXBlIChuX3NhbXBsZXMsKQ0KICAgICAgICAiIiINCiAgICAgICAgaWYgbm90IGhhc2F0dHIoc2VsZiwgJ2xhYmVsc18nKToNCiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIk11c3QgY2FsbCBmaXQgbWV0aG9kIGZpcnN0IikNCiAgICAgICAgDQogICAgICAgICMgSW1wbGVtZW50IHByZWRpY3Rpb24gbG9naWMgaGVyZQ0KICAgICAgICAjIEZvciBleGFtcGxlOg0KICAgICAgICAjIHJldHVybiBzZWxmLm1vZGVsLnByZWRpY3QoWCkNCiAgICAgICAgDQogICAgICAgICMgRGVtbyB3aXRoIGR1bW15IGRhdGEgKHBsZWFzZSByZXBsYWNlIHdpdGggYWN0dWFsIGltcGxlbWVudGF0aW9uKQ0KICAgICAgICBucC5yYW5kb20uc2VlZChzZWxmLnJhbmRvbV9zdGF0ZSkNCiAgICAgICAgcmV0dXJuIG5wLnJhbmRvbS5yYW5kaW50KDAsIHNlbGYubl9jbHVzdGVycywgc2l6ZT1YLnNoYXBlWzBdKQ0KICAgIA0KICAgIGRlZiBmaW5kX29wdGltYWxfY2x1c3RlcnMoc2VsZiwgWDogbnAubmRhcnJheSwgbWluX2NsdXN0ZXJzOiBpbnQgPSAyLCBtYXhfY2x1c3RlcnM6IGludCA9IDEwLCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kczogbGlzdCA9IE5vbmUsIHNob3dfcHJvZ3Jlc3M6IGJvb2wgPSBUcnVlKSAtPiB0dXBsZToNCiAgICAgICAgIiIiDQogICAgICAgIEZpbmQgdGhlIG9wdGltYWwgbnVtYmVyIG9mIGNsdXN0ZXJzDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgWDogSW5wdXQgZGF0YSB3aXRoIHNoYXBlIChuX3NhbXBsZXMsIG5fZmVhdHVyZXMpDQogICAgICAgICAgICBtaW5fY2x1c3RlcnM6IE1pbmltdW0gbnVtYmVyIG9mIGNsdXN0ZXJzDQogICAgICAgICAgICBtYXhfY2x1c3RlcnM6IE1heGltdW0gbnVtYmVyIG9mIGNsdXN0ZXJzDQogICAgICAgICAgICBtZXRob2RzOiBMaXN0IG9mIG1ldGhvZHMgdG8gZGV0ZXJtaW5lIHRoZSBvcHRpbWFsIG51bWJlciBvZiBjbHVzdGVycywgaWYgTm9uZSwgZGVmYXVsdCBtZXRob2RzIHdpbGwgYmUgdXNlZA0KICAgICAgICAgICAgc2hvd19wcm9ncmVzczogV2hldGhlciB0byBkaXNwbGF5IHByb2dyZXNzDQogICAgICAgICAgICANCiAgICAgICAgUmV0dXJuczoNCiAgICAgICAgICAgIGJlc3Rfbl9jbHVzdGVyczogT3B0aW1hbCBudW1iZXIgb2YgY2x1c3RlcnMNCiAgICAgICAgICAgIHNjb3JlczogRGljdGlvbmFyeSBvZiBzY29yZXMgZm9yIGRpZmZlcmVudCBudW1iZXJzIG9mIGNsdXN0ZXJzDQogICAgICAgICIiIg0KICAgICAgICAjIElmIG1ldGhvZHMgaXMgTm9uZSwgdXNlIGRlZmF1bHQgbWV0aG9kcw0KICAgICAgICBpZiBtZXRob2RzIGlzIE5vbmU6DQogICAgICAgICAgICBtZXRob2RzID0gWydzaWxob3VldHRlJywgJ2NhbGluc2tpX2hhcmFiYXN6J10NCiAgICAgICAgDQogICAgICAgICMgU2F2ZSBjbHVzdGVyIHJhbmdlDQogICAgICAgIHNlbGYuY2x1c3Rlcl9yYW5nZSA9IGxpc3QocmFuZ2UobWluX2NsdXN0ZXJzLCBtYXhfY2x1c3RlcnMgKyAxKSkNCiAgICAgICAgDQogICAgICAgICMgQ2FsY3VsYXRlIGRpZmZlcmVudCBzY29yZXMNCiAgICAgICAgc2VsZi5zY29yZXMgPSB7fQ0KICAgICAgICANCiAgICAgICAgIyBDYWxjdWxhdGUgc2lsaG91ZXR0ZSBzY29yZSAoaWYgbmVlZGVkKQ0KICAgICAgICBpZiAnc2lsaG91ZXR0ZScgaW4gbWV0aG9kczoNCiAgICAgICAgICAgIGlmIHNob3dfcHJvZ3Jlc3M6DQogICAgICAgICAgICAgICAgcHJpbnQoIkNhbGN1bGF0aW5nIHNpbGhvdWV0dGUgc2NvcmVzLi4uIikNCiAgICAgICAgICAgIHNlbGYuc2NvcmVzWydzaWxob3VldHRlJ10gPSBzZWxmLmNhbGN1bGF0ZV9zaWxob3VldHRlX3Njb3JlcyhYLCBzZWxmLmNsdXN0ZXJfcmFuZ2UpDQogICAgICAgICAgICBpZiBzaG93X3Byb2dyZXNzOg0KICAgICAgICAgICAgICAgIHByaW50KCJTaWxob3VldHRlIHNjb3JlIGNhbGN1bGF0aW9uIGNvbXBsZXRlZCEiKQ0KICAgICAgICANCiAgICAgICAgIyBDYWxjdWxhdGUgQ2FsaW5za2ktSGFyYWJhc3ogaW5kZXggKGlmIG5lZWRlZCkNCiAgICAgICAgaWYgJ2NhbGluc2tpX2hhcmFiYXN6JyBpbiBtZXRob2RzOg0KICAgICAgICAgICAgaWYgc2hvd19wcm9ncmVzczoNCiAgICAgICAgICAgICAgICBwcmludCgiQ2FsY3VsYXRpbmcgQ2FsaW5za2ktSGFyYWJhc3ogaW5kZXguLi4iKQ0KICAgICAgICAgICAgc2VsZi5zY29yZXNbJ2NhbGluc2tpX2hhcmFiYXN6J10gPSBzZWxmLmNhbGN1bGF0ZV9jYWxpbnNraV9oYXJhYmFzel9zY29yZXMoWCwgc2VsZi5jbHVzdGVyX3JhbmdlKQ0KICAgICAgICAgICAgaWYgc2hvd19wcm9ncmVzczoNCiAgICAgICAgICAgICAgICBwcmludCgiQ2FsaW5za2ktSGFyYWJhc3ogaW5kZXggY2FsY3VsYXRpb24gY29tcGxldGVkISIpDQogICAgICAgIA0KICAgICAgICAjIEFkZCB5b3VyIG93biBzY29yaW5nIG1ldGhvZHMgaGVyZSAoaWYgYW55KQ0KICAgICAgICANCiAgICAgICAgIyBBdXRvbWF0aWNhbGx5IHNlbGVjdCB0aGUgYmVzdCBudW1iZXIgb2YgY2x1c3RlcnMNCiAgICAgICAgaWYgbGVuKG1ldGhvZHMpID09IDE6DQogICAgICAgICAgICBiZXN0X21ldGhvZCA9IG1ldGhvZHNbMF0NCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgICMgVXNlIGNvbWJpbmVkIG1ldGhvZA0KICAgICAgICAgICAgYmVzdF9tZXRob2QgPSAnXycuam9pbihtZXRob2RzKQ0KICAgICAgICANCiAgICAgICAgYmVzdF9uX2NsdXN0ZXJzID0gc2VsZi5hdXRvX3NlbGVjdF9iZXN0X25fY2x1c3RlcnMoc2VsZi5zY29yZXMsIGJlc3RfbWV0aG9kKQ0KICAgICAgICANCiAgICAgICAgIyBTZXQgdGhlIGJlc3QgbnVtYmVyIG9mIGNsdXN0ZXJzDQogICAgICAgIHNlbGYubl9jbHVzdGVycyA9IGJlc3Rfbl9jbHVzdGVycw0KICAgICAgICANCiAgICAgICAgaWYgc2hvd19wcm9ncmVzczoNCiAgICAgICAgICAgIHByaW50KGYiQXV0b21hdGljYWxseSBzZWxlY3RlZCBiZXN0IG51bWJlciBvZiBjbHVzdGVyczoge2Jlc3Rfbl9jbHVzdGVyc30iKQ0KICAgICAgICANCiAgICAgICAgcmV0dXJuIGJlc3Rfbl9jbHVzdGVycywgc2VsZi5zY29yZXMg').decode())
