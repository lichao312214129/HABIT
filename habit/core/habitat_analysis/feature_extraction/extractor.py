
import base64
exec(base64.b64decode(b'IyEvdXNyL2Jpbi9lbnYgcHl0aG9uDQoiIiINCkhhYml0YXQgRmVhdHVyZSBFeHRyYWN0aW9uIFRvb2wNClRoaXMgdG9vbCBwcm92aWRlcyBmdW5jdGlvbmFsaXR5IGZvciBleHRyYWN0aW5nIGZlYXR1cmVzIGZyb20gaGFiaXRhdCBtYXBzOg0KMS4gUmFkaW9taWMgZmVhdHVyZXMgb2YgcmF3IGltYWdlcyB3aXRoaW4gZGlmZmVyZW50IGhhYml0YXRzDQoyLiBSYWRpb21pYyBmZWF0dXJlcyBvZiBoYWJpdGF0cyB3aXRoaW4gdGhlIGVudGlyZSBST0kNCjMuIE51bWJlciBvZiBkaXNjb25uZWN0ZWQgcmVnaW9ucyBhbmQgdm9sdW1lIHBlcmNlbnRhZ2UgZm9yIGVhY2ggaGFiaXRhdA0KNC4gTVNJIChNdXR1YWwgU3BhdGlhbCBJbnRlZ3JpdHkpIGZlYXR1cmVzIGZyb20gaGFiaXRhdCBtYXBzDQoNClRoZSBkYXRhIHN0cnVjdHVyZSBpcyBhcyBmb2xsb3dzOg0KZGF0YXNldC8NCuKUnOKUgOKUgCBpbWFnZXMvDQrilIIgICDilJzilIDilIAgc3ViajAwMS8NCuKUgiAgIOKUgiAgIOKUnOKUgOKUgCBpbWcxDQp8ICAgfCAgIHwgICDilJzilIDilIAgaW1nLm5paS5neiAoT1IgaW1nLm5ycmQpDQrilIIgICDilIIgICDilJzilIDilIAgaW1nMg0KfCAgIHwgICB8ICAg4pSc4pSA4pSAIGltZy5uaWkuZ3ogKE9SIGltZy5ucnJkKQ0K4pSCICAg4pSc4pSA4pSAIHN1YmowMDIvDQrilIIgICDilIIgICDilJzilIDilIAgaW1nMQ0KfCAgIHwgICB8ICAg4pSc4pSA4pSAIGltZy5uaWkuZ3ogKE9SIGltZy5ucnJkKQ0K4pSCICAg4pSCICAg4pSc4pSA4pSAIGltZzINCnwgICB8ICAgfCAgIOKUnOKUgOKUgCBpbWcubmlpLmd6IChPUiBpbWcubnJyZCkNCuKUnOKUgOKUgCBtYXNrcy8NCuKUgiAgIOKUnOKUgOKUgCBzdWJqMDAxLw0K4pSCICAg4pSCICAg4pSc4pSA4pSAIGltZzENCnwgICB8ICAgfCAgIOKUnOKUgOKUgCBtYXNrLm5paS5neiAoT1IgbWFzay5ucnJkKQ0K4pSCICAg4pSCICAg4pSc4pSA4pSAIGltZzINCnwgICB8ICAgfCAgIOKUnOKUgOKUgCBtYXNrLm5paS5neiAoT1IgbWFzay5ucnJkKQ0K4pSCICAg4pSc4pSA4pSAIHN1YmowMDIvDQrilIIgICDilIIgICDilJzilIDilIAgaW1nMQ0KfCAgIHwgICB8ICAg4pSc4pSA4pSAIG1hc2submlpLmd6IChPUiBtYXNrLm5ycmQpDQrilIIgICDilIIgICDilJzilIDilIAgaW1nMg0KfCAgIHwgICB8ICAg4pSc4pSA4pSAIG1hc2submlpLmd6IChPUiBtYXNrLm5ycmQpDQoNCmhhYml0YXRzX21hcC8NCuKUnOKUgOKUgHN1YmowMDFfaGFiaXRhdHMubnJyZA0K4pSc4pSA4pSAc3ViajAwMl9oYWJpdGF0cy5ucnJkDQoiIiINCg0KaW1wb3J0IHRpbWUNCmltcG9ydCB0cmltZXNoDQppbXBvcnQgc2NpcHkNCmltcG9ydCBsb2dnaW5nDQppbXBvcnQgbnVtcHkgYXMgbnANCmltcG9ydCBvcw0KZnJvbSBwYXRobGliIGltcG9ydCBQYXRoDQppbXBvcnQgU2ltcGxlSVRLIGFzIHNpdGsNCmZyb20gcmFkaW9taWNzIGltcG9ydCBmZWF0dXJlZXh0cmFjdG9yDQppbXBvcnQgd2FybmluZ3MNCmltcG9ydCBtdWx0aXByb2Nlc3NpbmcNCmZyb20gZnVuY3Rvb2xzIGltcG9ydCBwYXJ0aWFsDQppbXBvcnQgYXJncGFyc2UNCmltcG9ydCBzeXMNCmltcG9ydCBwYW5kYXMgYXMgcGQNCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBPcHRpb25hbCwgVW5pb24NCg0KZnJvbSBoYWJpdC51dGlscy5pb191dGlscyBpbXBvcnQgZ2V0X2ltYWdlX2FuZF9tYXNrX3BhdGhzDQpmcm9tIGhhYml0LnV0aWxzLnByb2dyZXNzX3V0aWxzIGltcG9ydCBDdXN0b21UcWRtDQoNCiMg56aB55So6K2m5ZGKDQp3YXJuaW5ncy5maWx0ZXJ3YXJuaW5ncygnaWdub3JlJykNCg0KY2xhc3MgSGFiaXRhdEZlYXR1cmVFeHRyYWN0b3I6DQogICAgIiIiSGFiaXRhdCBGZWF0dXJlIEV4dHJhY3Rpb24gQ2xhc3MNCiAgICANCiAgICBUaGlzIGNsYXNzIHByb3ZpZGVzIGZ1bmN0aW9uYWxpdHkgZm9yIGV4dHJhY3RpbmcgdmFyaW91cyBmZWF0dXJlcyBmcm9tIGhhYml0YXQgbWFwczoNCiAgICAxLiBSYWRpb21pYyBmZWF0dXJlcyBvZiByYXcgaW1hZ2VzIHdpdGhpbiBkaWZmZXJlbnQgaGFiaXRhdHMNCiAgICAyLiBSYWRpb21pYyBmZWF0dXJlcyBvZiBoYWJpdGF0cyB3aXRoaW4gdGhlIGVudGlyZSBST0kNCiAgICAzLiBOdW1iZXIgb2YgZGlzY29ubmVjdGVkIHJlZ2lvbnMgYW5kIHZvbHVtZSBwZXJjZW50YWdlIGZvciBlYWNoIGhhYml0YXQNCiAgICA0LiBNU0kgKE11dHVhbCBTcGF0aWFsIEludGVncml0eSkgZmVhdHVyZXMgZnJvbSBoYWJpdGF0IG1hcHMNCiAgICAiIiINCiAgICANCiAgICBkZWYgX19pbml0X18oc2VsZiwgDQogICAgICAgICAgICAgICAgcGFyYW1zX2ZpbGVfb2Zfbm9uX2hhYml0YXQ9Tm9uZSwNCiAgICAgICAgICAgICAgICBwYXJhbXNfZmlsZV9vZl9oYWJpdGF0PU5vbmUsDQogICAgICAgICAgICAgICAgcmF3X2ltZ19mb2xkZXI9Tm9uZSwgDQogICAgICAgICAgICAgICAgaGFiaXRhdHNfbWFwX2ZvbGRlcj1Ob25lLCANCiAgICAgICAgICAgICAgICBvdXRfZGlyPU5vbmUsDQogICAgICAgICAgICAgICAgbl9wcm9jZXNzZXM9Tm9uZSwNCiAgICAgICAgICAgICAgICBoYWJpdGF0X3BhdHRlcm49Tm9uZSwNCiAgICAgICAgICAgICAgICB2b3hlbF9jdXRvZmY9MTApOg0KICAgICAgICAiIiINCiAgICAgICAgSW5pdGlhbGl6ZSB0aGUgaGFiaXRhdCBmZWF0dXJlIGV4dHJhY3Rvcg0KICAgICAgICANCiAgICAgICAgQXJnczoNCiAgICAgICAgICAgIHBhcmFtc19maWxlX29mX25vbl9oYWJpdGF0OiBQYXJhbWV0ZXIgZmlsZSBmb3IgZXh0cmFjdGluZyByYWRpb21pYyBmZWF0dXJlcyBmcm9tIHJhdyBpbWFnZXMNCiAgICAgICAgICAgIHBhcmFtc19maWxlX29mX2hhYml0YXQ6IFBhcmFtZXRlciBmaWxlIGZvciBleHRyYWN0aW5nIHJhZGlvbWljIGZlYXR1cmVzIGZyb20gaGFiaXRhdCBpbWFnZXMNCiAgICAgICAgICAgIHJhd19pbWdfZm9sZGVyOiBSb290IGRpcmVjdG9yeSBvZiByYXcgaW1hZ2VzDQogICAgICAgICAgICBoYWJpdGF0c19tYXBfZm9sZGVyOiBSb290IGRpcmVjdG9yeSBvZiBoYWJpdGF0IG1hcHMNCiAgICAgICAgICAgIG91dF9kaXI6IE91dHB1dCBkaXJlY3RvcnkNCiAgICAgICAgICAgIG5fcHJvY2Vzc2VzOiBOdW1iZXIgb2YgcHJvY2Vzc2VzIHRvIHVzZQ0KICAgICAgICAgICAgaGFiaXRhdF9wYXR0ZXJuOiBQYXR0ZXJuIGZvciBtYXRjaGluZyBoYWJpdGF0IGZpbGVzDQogICAgICAgICAgICB2b3hlbF9jdXRvZmY6IFZveGVsIHRocmVzaG9sZCBmb3IgZmlsdGVyaW5nIHNtYWxsIHJlZ2lvbnMgaW4gTVNJIGZlYXR1cmUgY2FsY3VsYXRpb24NCiAgICAgICAgIiIiDQogICAgICAgICMgRmVhdHVyZSBleHRyYWN0aW9uIHJlbGF0ZWQgcGFyYW1ldGVycw0KICAgICAgICBzZWxmLnBhcmFtc19maWxlX29mX25vbl9oYWJpdGF0ID0gcGFyYW1zX2ZpbGVfb2Zfbm9uX2hhYml0YXQNCiAgICAgICAgc2VsZi5wYXJhbXNfZmlsZV9vZl9oYWJpdGF0ID0gcGFyYW1zX2ZpbGVfb2ZfaGFiaXRhdA0KICAgICAgICBzZWxmLnJhd19pbWdfZm9sZGVyID0gcmF3X2ltZ19mb2xkZXINCiAgICAgICAgc2VsZi5oYWJpdGF0c19tYXBfZm9sZGVyID0gaGFiaXRhdHNfbWFwX2ZvbGRlcg0KICAgICAgICBzZWxmLm91dF9kaXIgPSBvdXRfZGlyDQogICAgICAgIHNlbGYuX2hhYml0YXRfcGF0dGVybiA9IGhhYml0YXRfcGF0dGVybg0KICAgICAgICBzZWxmLm5faGFiaXRhdHMgPSBOb25lICAjIEluaXRpYWxpemUgYXMgTm9uZSwgd2lsbCBiZSByZWFkIGZyb20gZmlsZSBsYXRlcg0KICAgICAgICBzZWxmLnZveGVsX2N1dG9mZiA9IHZveGVsX2N1dG9mZg0KICAgICAgICANCiAgICAgICAgIyBQcm9jZXNzIG51bWJlciBzZXR0aW5ncw0KICAgICAgICBpZiBuX3Byb2Nlc3NlcyBpcyBOb25lOg0KICAgICAgICAgICAgc2VsZi5uX3Byb2Nlc3NlcyA9IG1heCgxLCBtdWx0aXByb2Nlc3NpbmcuY3B1X2NvdW50KCkgLy8gMikNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHNlbGYubl9wcm9jZXNzZXMgPSBtaW4obl9wcm9jZXNzZXMsIG11bHRpcHJvY2Vzc2luZy5jcHVfY291bnQoKS0yKQ0KDQogICAgICAgICMgU2V0dXAgbG9nZ2luZw0KICAgICAgICBzZWxmLl9zZXR1cF9sb2dnaW5nKCkNCiAgICAgICAgDQogICAgICAgICMgU2F2ZSBzZXR0aW5ncw0KICAgICAgICBzZWxmLnNhdmVfZXZlcnlfbl9maWxlcyA9IDUNCg0KICAgIGRlZiBfc2V0dXBfbG9nZ2luZyhzZWxmKToNCiAgICAgICAgIiIiQ29uZmlndXJlIGxvZ2dpbmcgc2V0dGluZ3MiIiINCiAgICAgICAgIyBHZXQgdGltZXN0YW1wDQogICAgICAgIGRhdGEgPSB0aW1lLnRpbWUoKQ0KICAgICAgICB0aW1lQXJyYXkgPSB0aW1lLmxvY2FsdGltZShkYXRhKQ0KICAgICAgICB0aW1lc3RyID0gdGltZS5zdHJmdGltZSgnJVlfJW1fJWQgJUhfJU1fJVMnLCB0aW1lQXJyYXkpDQogICAgICAgIA0KICAgICAgICAjIENyZWF0ZSBvdXRwdXQgZGlyZWN0b3J5DQogICAgICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cyhzZWxmLm91dF9kaXIpOg0KICAgICAgICAgICAgb3MubWFrZWRpcnMoc2VsZi5vdXRfZGlyKQ0KICAgICAgICBsb2dfZmlsZSA9IG9zLnBhdGguam9pbihzZWxmLm91dF9kaXIsIGYnaGFiaXRhdF9hbmFseXNpc197dGltZXN0cn0ubG9nJykNCiAgICAgICAgIyBDb25maWd1cmUgbG9nZ2luZw0KICAgICAgICBsb2dnaW5nLmJhc2ljQ29uZmlnKA0KICAgICAgICAgICAgbGV2ZWw9bG9nZ2luZy5FUlJPUiwNCiAgICAgICAgICAgIGZvcm1hdD0nJShhc2N0aW1lKXMgLSAlKGxldmVsbmFtZSlzIC0gJShtZXNzYWdlKXMnLA0KICAgICAgICAgICAgaGFuZGxlcnM9Ww0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuU3RyZWFtSGFuZGxlcigpLA0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuRmlsZUhhbmRsZXIobG9nX2ZpbGUpDQogICAgICAgICAgICBdDQogICAgICAgICkNCiAgICAgICAgDQogICAgICAgIGxvZ2dpbmcuZXJyb3IoZiJMb2cgZmlsZSB3aWxsIGJlIHNhdmVkIHRvOiB7bG9nX2ZpbGV9IikNCg0KICAgIGRlZiBfZ2V0X25faGFiaXRhdHNfZnJvbV9jc3Yoc2VsZik6DQogICAgICAgICIiIlJlYWQgdGhlIG51bWJlciBvZiBoYWJpdGF0cyBmcm9tIGhhYml0YXRzLmNzdiBmaWxlIiIiDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGNzdl9wYXRoID0gb3MucGF0aC5qb2luKHNlbGYuaGFiaXRhdHNfbWFwX2ZvbGRlciwgJ2hhYml0YXRzLmNzdicpDQogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhjc3ZfcGF0aCk6DQogICAgICAgICAgICAgICAgZGYgPSBwZC5yZWFkX2Nzdihjc3ZfcGF0aCkNCiAgICAgICAgICAgICAgICBpZiAnSGFiaXRhdHMnIGluIGRmLmNvbHVtbnM6DQogICAgICAgICAgICAgICAgICAgICMgQXNzdW1lIHRoZSBIYWJpdGF0cyBjb2x1bW4gY29udGFpbnMgaGFiaXRhdCBsYWJlbHMsIHdlIGNvdW50IHRoZSBudW1iZXIgb2YgdW5pcXVlIHZhbHVlcw0KICAgICAgICAgICAgICAgICAgICB1bmlxdWVfaGFiaXRhdHMgPSBkZlsnSGFiaXRhdHMnXS5udW5pcXVlKCkNCiAgICAgICAgICAgICAgICAgICAgbG9nZ2luZy5pbmZvKGYiUmVhZCB7dW5pcXVlX2hhYml0YXRzfSBoYWJpdGF0cyBmcm9tIGhhYml0YXRzLmNzdiIpDQogICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmlxdWVfaGFiaXRhdHMNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBsb2dnaW5nLmVycm9yKCJIYWJpdGF0cyBjb2x1bW4gbm90IGZvdW5kIGluIGhhYml0YXRzLmNzdiIpDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiJoYWJpdGF0cy5jc3YgZmlsZSBub3QgZm91bmQ6IHtjc3ZfcGF0aH0iKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBsb2dnaW5nLmVycm9yKGYiRXJyb3IgcmVhZGluZyBoYWJpdGF0cy5jc3Y6IHtzdHIoZSl9IikNCiAgICAgICAgDQogICAgICAgICMgSWYgdW5hYmxlIHRvIHJlYWQsIHByb21wdCB1c2VyIGZvciBpbnB1dA0KICAgICAgICBsb2dnaW5nLndhcm5pbmcoIlVuYWJsZSB0byByZWFkIG51bWJlciBvZiBoYWJpdGF0cyBmcm9tIGhhYml0YXRzLmNzdiwgcGxlYXNlIGVudGVyIG1hbnVhbGx5IikNCiAgICAgICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICB1c2VyX2lucHV0ID0gaW5wdXQoIlBsZWFzZSBlbnRlciB0aGUgbnVtYmVyIG9mIGhhYml0YXRzIChpbnRlZ2VyKTogIikNCiAgICAgICAgICAgICAgICBuX2hhYml0YXRzID0gaW50KHVzZXJfaW5wdXQuc3RyaXAoKSkNCiAgICAgICAgICAgICAgICBpZiBuX2hhYml0YXRzID4gMDoNCiAgICAgICAgICAgICAgICAgICAgbG9nZ2luZy5pbmZvKGYiVXNlciBlbnRlcmVkIG51bWJlciBvZiBoYWJpdGF0czoge25faGFiaXRhdHN9IikNCiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5faGFiaXRhdHMNCiAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICBwcmludCgiUGxlYXNlIGVudGVyIGEgcG9zaXRpdmUgaW50ZWdlciIpDQogICAgICAgICAgICBleGNlcHQgVmFsdWVFcnJvcjoNCiAgICAgICAgICAgICAgICBwcmludCgiSW52YWxpZCBpbnB1dCwgcGxlYXNlIGVudGVyIGFuIGludGVnZXIiKQ0KDQogICAgQHN0YXRpY21ldGhvZA0KICAgIGRlZiBnZXRfbm9uX3JhZGlvbWljc19mZWF0dXJlcyhoYWJpdGF0X2ltZyk6DQogICAgICAgICIiIuiuoeeul+avj+S4qmhhYml0YXTnmoTkuI3ov57pgJrljLrln5/mlbDlj4rkvZPnp6/ljaDmr5QiIiINCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShoYWJpdGF0X2ltZywgc3RyKToNCiAgICAgICAgICAgICAgICBoYWJpdGF0X2ltZyA9IHNpdGsuUmVhZEltYWdlKGhhYml0YXRfaW1nKQ0KICAgICAgICAgICAgZWxpZiBub3QgaXNpbnN0YW5jZShoYWJpdGF0X2ltZywgc2l0ay5JbWFnZSk6DQogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiaGFiaXRhdF9pbWcgbXVzdCBiZSBhIFNpbXBsZUlUSyBpbWFnZSBvciBhIGZpbGUgcGF0aC4iKQ0KDQogICAgICAgICAgICByZXN1bHRzID0ge30NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyDorqHnrpfmlbTkuKpoYWJpdGF0IG1hcOeahOaAu+S9k+enrw0KICAgICAgICAgICAgc3RhdHNfZmlsdGVyID0gc2l0ay5TdGF0aXN0aWNzSW1hZ2VGaWx0ZXIoKQ0KICAgICAgICAgICAgc3RhdHNfZmlsdGVyLkV4ZWN1dGUoaGFiaXRhdF9pbWcgIT0gMCkNCiAgICAgICAgICAgIHRvdGFsX3ZveGVscyA9IGludChzdGF0c19maWx0ZXIuR2V0U3VtKCkpDQoNCiAgICAgICAgICAgIGxhYmVsX2ZpbHRlciA9IHNpdGsuTGFiZWxTdGF0aXN0aWNzSW1hZ2VGaWx0ZXIoKQ0KICAgICAgICAgICAgbGFiZWxfZmlsdGVyLkV4ZWN1dGUoaGFiaXRhdF9pbWcsIGhhYml0YXRfaW1nKQ0KICAgICAgICAgICAgbGFiZWxzID0gbGFiZWxfZmlsdGVyLkdldExhYmVscygpDQogICAgICAgICAgICBsYWJlbHMgPSBbaW50KGxhYmVsKSBmb3IgbGFiZWwgaW4gbGFiZWxzIGlmIGxhYmVsICE9IDBdDQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvciBsYWJlbCBpbiBsYWJlbHM6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBiaW5hcnlfaW1nID0gc2l0ay5CaW5hcnlUaHJlc2hvbGQoaGFiaXRhdF9pbWcsIGxvd2VyVGhyZXNob2xkPWxhYmVsLCB1cHBlclRocmVzaG9sZD1sYWJlbCkNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIHN0YXRzX2ZpbHRlci5FeGVjdXRlKGJpbmFyeV9pbWcpDQogICAgICAgICAgICAgICAgICAgIGhhYml0YXRfdm94ZWxzID0gaW50KHN0YXRzX2ZpbHRlci5HZXRTdW0oKSkNCiAgICAgICAgICAgICAgICAgICAgdm9sdW1lX3JhdGlvID0gaGFiaXRhdF92b3hlbHMgLyB0b3RhbF92b3hlbHMgaWYgdG90YWxfdm94ZWxzID4gMCBlbHNlIDAuMA0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgY2NfZmlsdGVyID0gc2l0ay5Db25uZWN0ZWRDb21wb25lbnRJbWFnZUZpbHRlcigpDQogICAgICAgICAgICAgICAgICAgIGNjX2ZpbHRlci5TZXRGdWxseUNvbm5lY3RlZChGYWxzZSkNCiAgICAgICAgICAgICAgICAgICAgbGFiZWxlZF9pbWcgPSBjY19maWx0ZXIuRXhlY3V0ZShiaW5hcnlfaW1nKQ0KICAgICAgICAgICAgICAgICAgICBudW1fcmVnaW9ucyA9IGNjX2ZpbHRlci5HZXRPYmplY3RDb3VudCgpDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICByZXN1bHRzW2xhYmVsXSA9IHsNCiAgICAgICAgICAgICAgICAgICAgICAgICdudW1fcmVnaW9ucyc6IG51bV9yZWdpb25zLA0KICAgICAgICAgICAgICAgICAgICAgICAgJ3ZvbHVtZV9yYXRpbyc6IHZvbHVtZV9yYXRpbw0KICAgICAgICAgICAgICAgICAgICB9DQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgICAgICBsb2dnaW5nLmVycm9yKGYi5aSE55CG55Sf5aKD5qCH562+IHtsYWJlbH0g55qE5LiN6L+e6YCa5Yy65Z+f5pWw5Y+K5L2T56ev5Y2g5q+U5pe25Ye66ZSZOiB7c3RyKGUpfSIpDQogICAgICAgICAgICAgICAgICAgIHJlc3VsdHNbbGFiZWxdID0gew0KICAgICAgICAgICAgICAgICAgICAgICAgJ251bV9yZWdpb25zJzogMCwNCiAgICAgICAgICAgICAgICAgICAgICAgICd2b2x1bWVfcmF0aW8nOiAwLjAsDQogICAgICAgICAgICAgICAgICAgICAgICAnZXJyb3InOiBzdHIoZSkNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIHJlc3VsdHNbJ251bV9oYWJpdGF0cyddID0gbGVuKGxhYmVscykNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcmV0dXJuIHJlc3VsdHMNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgbG9nZ2luZy5lcnJvcihmIuiuoeeul2hhYml0YXTnmoTkuI3ov57pgJrljLrln5/mlbDlj4rkvZPnp6/ljaDmr5Tml7blh7rplJk6IHtzdHIoZSl9IikNCiAgICAgICAgICAgIHJldHVybiB7ImVycm9yIjogc3RyKGUpLCAibnVtX2hhYml0YXRzIjogMH0NCg0KICAgIEBzdGF0aWNtZXRob2QNCiAgICBkZWYgZXh0cmFjdF90cmFuZGl0aW9uYWxfcmFkaW9taWNzKGltYWdlX3BhdGgsIGhhYml0YXRfcGF0aCwgc3ViamVjdF9pZCwgcGFyYW1zX2ZpbGUpOg0KICAgICAgICAiIiLmj5Dlj5bluLjop4Tnu4TlrabnibnlvoEiIiINCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgZXh0cmFjdG9yID0gZmVhdHVyZWV4dHJhY3Rvci5SYWRpb21pY3NGZWF0dXJlRXh0cmFjdG9yKHBhcmFtc19maWxlKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBoYWJpdGF0X2ltZyA9IHNpdGsuUmVhZEltYWdlKGhhYml0YXRfcGF0aCkNCiAgICAgICAgICAgIHJhd19pbWcgPSBzaXRrLlJlYWRJbWFnZShpbWFnZV9wYXRoKQ0KDQogICAgICAgICAgICBpZiByYXdfaW1nLkdldERpcmVjdGlvbigpICE9IGhhYml0YXRfaW1nLkdldERpcmVjdGlvbigpOg0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuaW5mbyhmInJhdyBhbmQgbWFzayBkaXJlY3Rpb24gaXMgZGlmZmVyZW50OiB7c3ViamVjdF9pZH0iKQ0KICAgICAgICAgICAgICAgIGhhYml0YXRfaW1nLlNldERpcmVjdGlvbihyYXdfaW1nLkdldERpcmVjdGlvbigpKQ0KDQogICAgICAgICAgICBpZiByYXdfaW1nLkdldE9yaWdpbigpICE9IGhhYml0YXRfaW1nLkdldE9yaWdpbigpOg0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuaW5mbyhmInJhdyBhbmQgbWFzayBvcmlnaW4gaXMgZGlmZmVyZW50OiB7c3ViamVjdF9pZH0iKQ0KICAgICAgICAgICAgICAgIGhhYml0YXRfaW1nLlNldE9yaWdpbihyYXdfaW1nLkdldE9yaWdpbigpKQ0KDQogICAgICAgICAgICBpZiByYXdfaW1nLkdldFNwYWNpbmcoKSAhPSBoYWJpdGF0X2ltZy5HZXRTcGFjaW5nKCk6DQogICAgICAgICAgICAgICAgbG9nZ2luZy5pbmZvKGYicmF3IGFuZCBtYXNrIHNwYWNpbmcgaXMgZGlmZmVyZW50OiB7c3ViamVjdF9pZH0iKQ0KICAgICAgICAgICAgICAgIGhhYml0YXRfaW1nLlNldFNwYWNpbmcocmF3X2ltZy5HZXRTcGFjaW5nKCkpDQoNCiAgICAgICAgICAgIGxhYmVsX2ZpbHRlciA9IHNpdGsuTGFiZWxTdGF0aXN0aWNzSW1hZ2VGaWx0ZXIoKQ0KICAgICAgICAgICAgbGFiZWxfZmlsdGVyLkV4ZWN1dGUoaGFiaXRhdF9pbWcsIGhhYml0YXRfaW1nKQ0KICAgICAgICAgICAgbGFiZWxzID0gbGFiZWxfZmlsdGVyLkdldExhYmVscygpDQogICAgICAgICAgICBsYWJlbHMgPSBbaW50KGxhYmVsKSBmb3IgbGFiZWwgaW4gbGFiZWxzIGlmIGxhYmVsICE9IDBdDQoNCiAgICAgICAgICAgIG1hc2sgPSBzaXRrLkJpbmFyeVRocmVzaG9sZCgNCiAgICAgICAgICAgICAgICBoYWJpdGF0X2ltZywgDQogICAgICAgICAgICAgICAgbG93ZXJUaHJlc2hvbGQ9MSwgDQogICAgICAgICAgICAgICAgdXBwZXJUaHJlc2hvbGQ9bnAubWF4KGxhYmVscykuYXN0eXBlKG5wLmRvdWJsZSksIA0KICAgICAgICAgICAgICAgIGluc2lkZVZhbHVlPTEsIA0KICAgICAgICAgICAgICAgIG91dHNpZGVWYWx1ZT0wDQogICAgICAgICAgICApDQoNCiAgICAgICAgICAgIHJldHVybiBleHRyYWN0b3IuZXhlY3V0ZSgNCiAgICAgICAgICAgICAgICBpbWFnZUZpbGVwYXRoPXJhd19pbWcsDQogICAgICAgICAgICAgICAgbWFza0ZpbGVwYXRoPW1hc2ssIA0KICAgICAgICAgICAgICAgIGxhYmVsPTENCiAgICAgICAgICAgICkNCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgbG9nZ2luZy5lcnJvcihmIuaPkOWPluW4uOinhOe7hOWtpueJueW+geaXtuWHuumUmToge3N0cihlKX0iKQ0KICAgICAgICAgICAgcmV0dXJuIHsiZXJyb3IiOiBmIueJueW+geaPkOWPlumUmeivrzoge3N0cihlKX0ifQ0KDQogICAgQHN0YXRpY21ldGhvZA0KICAgIGRlZiBleHRyYWN0X3JhZGlvbWljc19mZWF0dXJlc19mb3Jfd2hvbGVfaGFiaXRhdChoYWJpdGF0X2ltZywgcGFyYW1zX2ZpbGUpOg0KICAgICAgICAiIiLmj5Dlj5bmlbTkuKpST0nlhoXnmoRoYWJpdGF055qE57uE5a2m54m55b6BIiIiDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIGV4dHJhY3RvciA9IGZlYXR1cmVleHRyYWN0b3IuUmFkaW9taWNzRmVhdHVyZUV4dHJhY3RvcihwYXJhbXNfZmlsZSkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZShoYWJpdGF0X2ltZywgc3RyKToNCiAgICAgICAgICAgICAgICBoYWJpdGF0X2ltZyA9IHNpdGsuUmVhZEltYWdlKGhhYml0YXRfaW1nKQ0KICAgICAgICAgICAgZWxpZiBub3QgaXNpbnN0YW5jZShoYWJpdGF0X2ltZywgc2l0ay5JbWFnZSk6DQogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiaGFiaXRhdF9pbWcgbXVzdCBiZSBhIFNpbXBsZUlUSyBpbWFnZSBvciBhIGZpbGUgcGF0aC4iKQ0KDQogICAgICAgICAgICBsYWJlbF9maWx0ZXIgPSBzaXRrLkxhYmVsU3RhdGlzdGljc0ltYWdlRmlsdGVyKCkNCiAgICAgICAgICAgIGxhYmVsX2ZpbHRlci5FeGVjdXRlKGhhYml0YXRfaW1nLCBoYWJpdGF0X2ltZykNCiAgICAgICAgICAgIGxhYmVscyA9IGxhYmVsX2ZpbHRlci5HZXRMYWJlbHMoKQ0KICAgICAgICAgICAgbGFiZWxzID0gW2ludChsYWJlbCkgZm9yIGxhYmVsIGluIGxhYmVscyBpZiBsYWJlbCAhPSAwXQ0KDQogICAgICAgICAgICAjIG1ha2UgYSBiaW5hcnkgaW1hZ2UNCiAgICAgICAgICAgIGhhYml0YXRfaW1nX2JpbmFyeSA9IHNpdGsuQmluYXJ5VGhyZXNob2xkKA0KICAgICAgICAgICAgICAgIGhhYml0YXRfaW1nLCANCiAgICAgICAgICAgICAgICBsb3dlclRocmVzaG9sZD0xLCANCiAgICAgICAgICAgICAgICB1cHBlclRocmVzaG9sZD1ucC5tYXgobGFiZWxzKS5hc3R5cGUobnAuZG91YmxlKSwgDQogICAgICAgICAgICAgICAgaW5zaWRlVmFsdWU9MSwgDQogICAgICAgICAgICAgICAgb3V0c2lkZVZhbHVlPTANCiAgICAgICAgICAgICkNCg0KICAgICAgICAgICAgcmV0dXJuIGV4dHJhY3Rvci5leGVjdXRlKA0KICAgICAgICAgICAgICAgIGltYWdlRmlsZXBhdGg9aGFiaXRhdF9pbWcsDQogICAgICAgICAgICAgICAgbWFza0ZpbGVwYXRoPWhhYml0YXRfaW1nX2JpbmFyeSwgDQogICAgICAgICAgICAgICAgbGFiZWw9MQ0KICAgICAgICAgICAgKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBsb2dnaW5nLmVycm9yKGYi5o+Q5Y+W5pW05LiqUk9J5YaF55qEaGFiaXRhdOe7hOWtpueJueW+geaXtuWHuumUmToge3N0cihlKX0iKQ0KICAgICAgICAgICAgcmV0dXJuIHsiZXJyb3IiOiBmIueJueW+geaPkOWPlumUmeivrzoge3N0cihlKX0ifQ0KDQogICAgQHN0YXRpY21ldGhvZA0KICAgIGRlZiBleHRyYWN0X3JhZGlvbWljc19mZWF0dXJlc19mcm9tX2VhY2hfaGFiaXRhdChoYWJpdGF0X3BhdGgsIGltYWdlX3BhdGgsIHN1YmplY3RfaWQsIHBhcmFtc19maWxlKToNCiAgICAgICAgIiIi5o+Q5Y+W5q+P5LiqaGFiaXRhdOWGheWOn+Wni+W9seWDj+eahOe7hOWtpueJueW+gSIiIg0KICAgICAgICBleHRyYWN0b3IgPSBmZWF0dXJlZXh0cmFjdG9yLlJhZGlvbWljc0ZlYXR1cmVFeHRyYWN0b3IocGFyYW1zX2ZpbGUpDQogICAgICAgIA0KICAgICAgICB0cnk6DQogICAgICAgICAgICBoYWJpdGF0X2ltZyA9IHNpdGsuUmVhZEltYWdlKGhhYml0YXRfcGF0aCkNCiAgICAgICAgICAgIHJhd19pbWcgPSBzaXRrLlJlYWRJbWFnZShpbWFnZV9wYXRoKQ0KDQogICAgICAgICAgICBpZiByYXdfaW1nLkdldERpcmVjdGlvbigpICE9IGhhYml0YXRfaW1nLkdldERpcmVjdGlvbigpOg0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuaW5mbyhmInJhdyBhbmQgbWFzayBkaXJlY3Rpb24gaXMgZGlmZmVyZW50OiB7c3ViamVjdF9pZH0iKQ0KICAgICAgICAgICAgICAgIGhhYml0YXRfaW1nLlNldERpcmVjdGlvbihyYXdfaW1nLkdldERpcmVjdGlvbigpKQ0KDQogICAgICAgICAgICBpZiByYXdfaW1nLkdldE9yaWdpbigpICE9IGhhYml0YXRfaW1nLkdldE9yaWdpbigpOg0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuaW5mbyhmInJhdyBhbmQgbWFzayBvcmlnaW4gaXMgZGlmZmVyZW50OiB7c3ViamVjdF9pZH0iKQ0KICAgICAgICAgICAgICAgIGhhYml0YXRfaW1nLlNldE9yaWdpbihyYXdfaW1nLkdldE9yaWdpbigpKQ0KDQogICAgICAgICAgICBpZiByYXdfaW1nLkdldFNwYWNpbmcoKSAhPSBoYWJpdGF0X2ltZy5HZXRTcGFjaW5nKCk6DQogICAgICAgICAgICAgICAgbG9nZ2luZy5pbmZvKGYicmF3IGFuZCBtYXNrIHNwYWNpbmcgaXMgZGlmZmVyZW50OiB7c3ViamVjdF9pZH0iKQ0KICAgICAgICAgICAgICAgIGhhYml0YXRfaW1nLlNldFNwYWNpbmcocmF3X2ltZy5HZXRTcGFjaW5nKCkpDQoNCiAgICAgICAgICAgIGxhYmVsID0gc2l0ay5MYWJlbFN0YXRpc3RpY3NJbWFnZUZpbHRlcigpDQogICAgICAgICAgICBsYWJlbC5FeGVjdXRlKGhhYml0YXRfaW1nLCBoYWJpdGF0X2ltZykNCiAgICAgICAgICAgIGxhYmVscyA9IGxhYmVsLkdldExhYmVscygpDQogICAgICAgICAgICBsYWJlbHMgPSBbaW50KGxhYmVsKSBmb3IgbGFiZWwgaW4gbGFiZWxzIGlmIGxhYmVsICE9IDBdDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiLlh4blpIfnlJ/looPlm77lg4/mlbDmja7ml7blh7rplJk6IHtzdHIoZSl9IikNCiAgICAgICAgICAgIHJldHVybiB7fQ0KDQogICAgICAgIGZlYXR1cmVWZWN0b3IgPSB7fQ0KICAgICAgICBmb3IgbGFiZWwgaW4gbGFiZWxzOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGZlYXR1cmVWZWN0b3JbbGFiZWxdID0gZXh0cmFjdG9yLmV4ZWN1dGUoDQogICAgICAgICAgICAgICAgICAgIGltYWdlRmlsZXBhdGg9cmF3X2ltZywgDQogICAgICAgICAgICAgICAgICAgIG1hc2tGaWxlcGF0aD1oYWJpdGF0X2ltZywgDQogICAgICAgICAgICAgICAgICAgIGxhYmVsPWxhYmVsDQogICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiLmj5Dlj5bnlJ/looMge2xhYmVsfSDnmoTnu4TlrabnibnlvoHml7blh7rplJk6IHtzdHIoZSl9IikNCiAgICAgICAgICAgICAgICBmZWF0dXJlVmVjdG9yW2xhYmVsXSA9IHt9DQogICAgICAgICAgICAgICANCiAgICAgICAgcmV0dXJuIGZlYXR1cmVWZWN0b3INCg0KICAgIGRlZiBnZXRfbWFza19hbmRfcmF3X2ZpbGVzKHNlbGYpOg0KICAgICAgICAiIiLojrflj5bmiYDmnInljp/lp4vlvbHlg4/lkoznlJ/looPlm77mlofku7bot6/lvoQiIiINCiAgICAgICAgIyDkvb/nlKjku45pb191dGlsc+WvvOWFpeeahGdldF9pbWFnZV9hbmRfbWFza19wYXRoc+WHveaVsA0KICAgICAgICBpbWFnZXNfcGF0aHMsIF8gPSBnZXRfaW1hZ2VfYW5kX21hc2tfcGF0aHMoc2VsZi5yYXdfaW1nX2ZvbGRlcikNCg0KICAgICAgICBoYWJpdGF0X3BhdGhzID0ge30NCiAgICAgICAgZm9yIHN1YmogaW4gUGF0aChzZWxmLmhhYml0YXRzX21hcF9mb2xkZXIpLmdsb2Ioc2VsZi5faGFiaXRhdF9wYXR0ZXJuKToNCiAgICAgICAgICAgIGtleSA9IHN1YmoubmFtZS5yZXBsYWNlKHNlbGYuX2hhYml0YXRfcGF0dGVybi5yZXBsYWNlKCIqIiwgIiIpLCAiIikNCiAgICAgICAgICAgIGhhYml0YXRfcGF0aHNba2V5XSA9IHN0cihzdWJqKQ0KDQogICAgICAgIHJldHVybiBpbWFnZXNfcGF0aHMsIGhhYml0YXRfcGF0aHMNCg0KICAgIGRlZiBwcm9jZXNzX3N1YmplY3Qoc2VsZiwgc3ViaiwgaW1hZ2VzX3BhdGhzLCBoYWJpdGF0X3BhdGhzKToNCiAgICAgICAgIiIi5aSE55CG5Y2V5Liq5Y+X6K+V6ICF55qE55Sf5aKD54m55b6B5o+Q5Y+WIiIiDQogICAgICAgIHN1YmplY3RfZmVhdHVyZXMgPSB7fQ0KICAgICAgICBpbWdzID0gbGlzdChpbWFnZXNfcGF0aHNbc3Vial0ua2V5cygpKQ0KDQogICAgICAgICMg5o+Q5Y+W55Sf5aKD5Z+65pys54m55b6BDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIG5vbl9yYWRpb21pY3NfZmVhdHVyZXMgPSBzZWxmLmdldF9ub25fcmFkaW9taWNzX2ZlYXR1cmVzKGhhYml0YXRfcGF0aHNbc3Vial0pDQogICAgICAgICAgICBzdWJqZWN0X2ZlYXR1cmVzWydub25fcmFkaW9taWNzX2ZlYXR1cmVzJ10gPSBub25fcmFkaW9taWNzX2ZlYXR1cmVzDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiLlpITnkIblj5for5XogIUge3N1Ymp9IOeahOeUn+Wig+WfuuacrOeJueW+geaXtuWHuumUmToge3N0cihlKX0iKQ0KICAgICAgICAgICAgc3ViamVjdF9mZWF0dXJlc1snbm9uX3JhZGlvbWljc19mZWF0dXJlcyddID0geyJlcnJvciI6IHN0cihlKX0NCg0KICAgICAgICAjIOaPkOWPluWOn+Wni+W9seWDj+eahOW4uOinhOe7hOWtpueJueW+gQ0KICAgICAgICBzdWJqZWN0X2ZlYXR1cmVzWyd0cmFuZGl0aW9uYWxfcmFkaW9taWNzX2ZlYXR1cmVzJ10gPSB7fQ0KICAgICAgICBmb3IgaW1nIGluIGltZ3M6DQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgc3ViamVjdF9mZWF0dXJlc1sndHJhbmRpdGlvbmFsX3JhZGlvbWljc19mZWF0dXJlcyddW2ltZ10gPSBcDQogICAgICAgICAgICAgICAgICAgIHNlbGYuZXh0cmFjdF90cmFuZGl0aW9uYWxfcmFkaW9taWNzKA0KICAgICAgICAgICAgICAgICAgICBpbWFnZXNfcGF0aHNbc3Vial1baW1nXSwgDQogICAgICAgICAgICAgICAgICAgIGhhYml0YXRfcGF0aHNbc3Vial0sIA0KICAgICAgICAgICAgICAgICAgICBzdWJqLA0KICAgICAgICAgICAgICAgICAgICBzZWxmLnBhcmFtc19maWxlX29mX25vbl9oYWJpdGF0DQogICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiLlpITnkIblj5for5XogIUge3N1Ymp9IOeahOW4uOinhOe7hOWtpueJueW+gSB7aW1nfSDml7blh7rplJk6IHtzdHIoZSl9IikNCiAgICAgICAgICAgICAgICBzdWJqZWN0X2ZlYXR1cmVzWyd0cmFuZGl0aW9uYWxfcmFkaW9taWNzX2ZlYXR1cmVzJ11baW1nXSA9IHsiZXJyb3IiOiBzdHIoZSl9DQoNCiAgICAgICAgIyDmj5Dlj5bmlbTkuKrnlJ/looPlm77nmoTnu4TlrabnibnlvoENCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgcmFkaW9taWNzX2ZlYXR1cmVzX29mX3dob2xlX2hhYml0YXQgPSBzZWxmLmV4dHJhY3RfcmFkaW9taWNzX2ZlYXR1cmVzX2Zvcl93aG9sZV9oYWJpdGF0KA0KICAgICAgICAgICAgICAgIGhhYml0YXRfcGF0aHNbc3Vial0sIA0KICAgICAgICAgICAgICAgIHNlbGYucGFyYW1zX2ZpbGVfb2ZfaGFiaXRhdA0KICAgICAgICAgICAgKQ0KICAgICAgICAgICAgc3ViamVjdF9mZWF0dXJlc1sncmFkaW9taWNzX2ZlYXR1cmVzX29mX3dob2xlX2hhYml0YXRfbWFwJ10gPSByYWRpb21pY3NfZmVhdHVyZXNfb2Zfd2hvbGVfaGFiaXRhdA0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBsb2dnaW5nLmVycm9yKGYi5aSE55CG5Y+X6K+V6ICFIHtzdWJqfSDnmoTmlbTkuKrnlJ/looPlm77nu4TlrabnibnlvoHml7blh7rplJk6IHtzdHIoZSl9IikNCiAgICAgICAgICAgIHN1YmplY3RfZmVhdHVyZXNbJ3JhZGlvbWljc19mZWF0dXJlc19vZl93aG9sZV9oYWJpdGF0X21hcCddID0geyJlcnJvciI6IHN0cihlKX0NCiAgICAgICAgDQogICAgICAgICMg5o+Q5Y+W5q+P5Liq55Sf5aKD55qE57uE5a2m54m55b6BDQogICAgICAgIHN1YmplY3RfZmVhdHVyZXNbJ3JhZGlvbWljc19mZWF0dXJlc19mcm9tX2VhY2hfaGFiaXRhdCddID0ge30NCiAgICAgICAgZm9yIGltZyBpbiBpbWdzOg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGhhYml0YXRfZmVhdHVyZXMgPSBzZWxmLmV4dHJhY3RfcmFkaW9taWNzX2ZlYXR1cmVzX2Zyb21fZWFjaF9oYWJpdGF0KA0KICAgICAgICAgICAgICAgICAgICBoYWJpdGF0X3BhdGhzW3N1YmpdLCANCiAgICAgICAgICAgICAgICAgICAgaW1hZ2VzX3BhdGhzW3N1YmpdW2ltZ10sIA0KICAgICAgICAgICAgICAgICAgICBzdWJqLCANCiAgICAgICAgICAgICAgICAgICAgc2VsZi5wYXJhbXNfZmlsZV9vZl9ub25faGFiaXRhdA0KICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICBzdWJqZWN0X2ZlYXR1cmVzWydyYWRpb21pY3NfZmVhdHVyZXNfZnJvbV9lYWNoX2hhYml0YXQnXVtpbWddID0gaGFiaXRhdF9mZWF0dXJlcw0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiLlpITnkIblj5for5XogIUge3N1Ymp9IOeahOeUn+WigyB7aW1nfSDnu4TlrabnibnlvoHml7blh7rplJk6IHtzdHIoZSl9IikNCiAgICAgICAgICAgICAgICBzdWJqZWN0X2ZlYXR1cmVzWydyYWRpb21pY3NfZmVhdHVyZXNfZnJvbV9lYWNoX2hhYml0YXQnXVtpbWddID0geyJlcnJvciI6IHN0cihlKX0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgIyDmj5Dlj5ZNU0nnibnlvoENCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgbl9oYWJpdGF0cyA9IHNlbGYuX2dldF9uX2hhYml0YXRzX2Zyb21fY3N2KCkNCiAgICAgICAgICAgIG1zaV9mZWF0dXJlcyA9IHNlbGYuZXh0cmFjdF9NU0lfZmVhdHVyZXMoaGFiaXRhdF9wYXRoc1tzdWJqXSwgbl9oYWJpdGF0cywgc3ViaikNCiAgICAgICAgICAgIHN1YmplY3RfZmVhdHVyZXNbJ21zaV9mZWF0dXJlcyddID0gbXNpX2ZlYXR1cmVzDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiLlpITnkIblj5for5XogIUge3N1Ymp9IOeahE1TSeeJueW+geaXtuWHuumUmToge3N0cihlKX0iKQ0KICAgICAgICAgICAgc3ViamVjdF9mZWF0dXJlc1snbXNpX2ZlYXR1cmVzJ10gPSB7ImVycm9yIjogc3RyKGUpfQ0KDQogICAgICAgIHJldHVybiBzdWJqLCBzdWJqZWN0X2ZlYXR1cmVzDQoNCiAgICBkZWYgZXh0cmFjdF9mZWF0dXJlcyhzZWxmLCBpbWFnZXNfcGF0aHMsIGhhYml0YXRfcGF0aHMpOg0KICAgICAgICAiIiLmj5Dlj5bmiYDmnInlj5for5XogIXnmoTnlJ/looPnibnlvoEiIiINCiAgICAgICAgZmVhdHVyZXMgPSB7fQ0KICAgICAgICBzdWJqcyA9IGxpc3Qoc2V0KGltYWdlc19wYXRocy5rZXlzKCkpICYgc2V0KGhhYml0YXRfcGF0aHMua2V5cygpKSkNCiAgICAgICAgDQogICAgICAgIGlmIG5vdCBzdWJqczoNCiAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoIuacquWcqOWOn+Wni+W9seWDj+WSjOeUn+Wig+WbvuS5i+mXtOaJvuWIsOWMuemFjeeahOWPl+ivleiAhSIpDQogICAgICAgICAgICByZXR1cm4gc2VsZg0KICAgICAgICAgICAgDQogICAgICAgIHByaW50KGYiKioqKioqKioqKioqKirlvIDlp4vkuLoge2xlbihzdWJqcyl9IOS4quWPl+ivleiAheaPkOWPlueUn+Wig+eJueW+gSzkvb/nlKgge3NlbGYubl9wcm9jZXNzZXN9IOS4qui/m+eoiyoqKioqKioqKioqKioqIikNCiAgICAgICAgDQogICAgICAgIHRlbXBfZGlyID0gb3MucGF0aC5qb2luKHNlbGYub3V0X2RpciwgInRlbXAiKQ0KICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHModGVtcF9kaXIpOg0KICAgICAgICAgICAgb3MubWFrZWRpcnModGVtcF9kaXIpDQogICAgICAgICAgICANCiAgICAgICAgd2l0aCBtdWx0aXByb2Nlc3NpbmcuUG9vbChwcm9jZXNzZXM9c2VsZi5uX3Byb2Nlc3NlcykgYXMgcG9vbDoNCiAgICAgICAgICAgIHByb2Nlc3NfZnVuYyA9IHBhcnRpYWwoc2VsZi5wcm9jZXNzX3N1YmplY3QsIGltYWdlc19wYXRocz1pbWFnZXNfcGF0aHMsIGhhYml0YXRfcGF0aHM9aGFiaXRhdF9wYXRocykNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgdG90YWwgPSBsZW4oc3VianMpDQogICAgICAgICAgICBwcm9ncmVzc19iYXIgPSBDdXN0b21UcWRtKHRvdGFsPXRvdGFsLCBkZXNjPSJFeHRyYWN0aW5nIEZlYXR1cmVzIikNCiAgICAgICAgICAgIGZvciBpLCAoc3Viaiwgc3ViamVjdF9mZWF0dXJlcykgaW4gZW51bWVyYXRlKHBvb2wuaW1hcF91bm9yZGVyZWQocHJvY2Vzc19mdW5jLCBzdWJqcykpOg0KICAgICAgICAgICAgICAgIGZlYXR1cmVzW3N1YmpdID0gc3ViamVjdF9mZWF0dXJlcw0KICAgICAgICAgICAgICAgIHByb2dyZXNzX2Jhci51cGRhdGUoMSkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZiAoaSArIDEpICUgc2VsZi5zYXZlX2V2ZXJ5X25fZmlsZXMgPT0gMDoNCiAgICAgICAgICAgICAgICAgICAgdGVtcF9maWxlID0gb3MucGF0aC5qb2luKHRlbXBfZGlyLCBmImZlYXR1cmVzX3RlbXBfe2krMX0ubnB5IikNCiAgICAgICAgICAgICAgICAgICAgbnAuc2F2ZSh0ZW1wX2ZpbGUsIGZlYXR1cmVzKQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgZm9yIHRlbXBfZmlsZSBpbiBvcy5saXN0ZGlyKHRlbXBfZGlyKToNCiAgICAgICAgICAgIG9zLnJlbW92ZShvcy5wYXRoLmpvaW4odGVtcF9kaXIsIHRlbXBfZmlsZSkpDQogICAgICAgIG9zLnJtZGlyKHRlbXBfZGlyKQ0KICAgICAgICAgICAgDQogICAgICAgIG91dF9maWxlID0gb3MucGF0aC5qb2luKHNlbGYub3V0X2RpciwgImhhYml0YXRzX2ZlYXR1cmVzLm5weSIpDQogICAgICAgIG5wLnNhdmUob3V0X2ZpbGUsIGZlYXR1cmVzKQ0KICAgICAgICBwcmludChmIueJueW+geW3suS/neWtmOWIsCB7b3V0X2ZpbGV9IikNCiAgICAgICAgcmV0dXJuIHNlbGYNCg0KICAgIGRlZiBwYXJzZV9mZWF0dXJlcyhzZWxmLCBmZWF0dXJlX3R5cGVzOiBMaXN0W3N0cl0sIG5faGFiaXRhdHM6IE9wdGlvbmFsW2ludF0gPSBOb25lKToNCiAgICAgICAgIiIi6Kej5p6Q55Sf5aKD54m55b6B5YiwQ1NW5paH5Lu2IiIiDQogICAgICAgIGlmIG5vdCBzZWxmLm91dF9kaXI6DQogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCLlv4XpobvmjIflrprovpPlh7rnm67lvZXku6Xop6PmnpDnibnlvoEiKQ0KICAgICAgICAgICAgDQogICAgICAgIHRyeToNCiAgICAgICAgICAgIHNlbGYuZGF0YSA9IG5wLmxvYWQob3MucGF0aC5qb2luKHNlbGYub3V0X2RpciwgImhhYml0YXRzX2ZlYXR1cmVzLm5weSIpLCBhbGxvd19waWNrbGU9VHJ1ZSkuaXRlbSgpDQogICAgICAgICAgICBsb2dnaW5nLmluZm8oZiLmiJDlip/ku44gaGFiaXRhdHNfZmVhdHVyZXMubnB5IOWKoOi9veaVsOaNriIpDQogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiLku44gaGFiaXRhdHNfZmVhdHVyZXMubnB5IOWKoOi9veaVsOaNruaXtuWHuumUmToge3N0cihlKX0iKQ0KICAgICAgICAgICAgcmFpc2UNCg0KICAgICAgICAjIOWmguaenOayoeacieaMh+Wumm5faGFiaXRhdHPvvIzlsJ3or5Xku45DU1bmlofku7bor7vlj5YNCiAgICAgICAgaWYgbl9oYWJpdGF0cyBpcyBOb25lOg0KICAgICAgICAgICAgbl9oYWJpdGF0cyA9IHNlbGYuX2dldF9uX2hhYml0YXRzX2Zyb21fY3N2KCkNCiAgICAgICAgDQogICAgICAgIGxvZ2dpbmcuaW5mbyhmIuS9v+eUqOeUn+Wig+aVsOmHjzoge25faGFiaXRhdHN9IikNCiAgICAgICAgc2VsZi5uX2hhYml0YXRzID0gbl9oYWJpdGF0cw0KICAgICAgICAgICAgDQogICAgICAgIHJlc3VsdHMgPSB7fQ0KICAgICAgICANCiAgICAgICAgaWYgJ3RyYWRpdGlvbmFsJyBpbiBmZWF0dXJlX3R5cGVzOg0KICAgICAgICAgICAgcmVzdWx0c1sndHJhZGl0aW9uYWwnXSA9IHNlbGYuX2V4dHJhY3RfdHJhZGl0aW9uYWxfcmFkaW9taWNzKCkNCiAgICAgICAgICAgIA0KICAgICAgICBpZiAnbm9uX3JhZGlvbWljcycgaW4gZmVhdHVyZV90eXBlczoNCiAgICAgICAgICAgIHJlc3VsdHNbJ25vbl9yYWRpb21pY3MnXSA9IHNlbGYuX2V4dHJhY3Rfbm9uX3JhZGlvbWljc19mZWF0dXJlcyhuX2hhYml0YXRzKQ0KICAgICAgICAgICAgDQogICAgICAgIGlmICd3aG9sZV9oYWJpdGF0JyBpbiBmZWF0dXJlX3R5cGVzOg0KICAgICAgICAgICAgcmVzdWx0c1snd2hvbGVfaGFiaXRhdCddID0gc2VsZi5fZXh0cmFjdF9yYWRpb21pY3NfZmVhdHVyZXNfZm9yX3dob2xlX2hhYml0YXRfbWFwKCkNCiAgICAgICAgICAgIA0KICAgICAgICBpZiAnZWFjaF9oYWJpdGF0JyBpbiBmZWF0dXJlX3R5cGVzOg0KICAgICAgICAgICAgcmVzdWx0c1snZWFjaF9oYWJpdGF0J10gPSBzZWxmLl9leHRyYWN0X3JhZGlvbWljc19mZWF0dXJlc19mcm9tX2VhY2hfaGFiaXRhdChuX2hhYml0YXRzKQ0KICAgICAgICAgICAgDQogICAgICAgIGlmICdtc2knIGluIGZlYXR1cmVfdHlwZXM6DQogICAgICAgICAgICByZXN1bHRzWydtc2knXSA9IHNlbGYuX2V4dHJhY3RfbXNpX2ZlYXR1cmVzKCkNCiAgICAgICAgICAgIA0KICAgICAgICByZXR1cm4gcmVzdWx0cw0KDQogICAgZGVmIF9leHRyYWN0X3RyYWRpdGlvbmFsX3JhZGlvbWljcyhzZWxmKToNCiAgICAgICAgIiIi5o+Q5Y+W5Y6f5aeL5b2x5YOP55qE5bi46KeE57uE5a2m54m55b6BIiIiDQogICAgICAgIGxvZ2dpbmcuaW5mbygi5byA5aeL5o+Q5Y+W5Y6f5aeL5b2x5YOP55qE5bi46KeE57uE5a2m54m55b6BIikNCiAgICAgICAgc3VianMgPSBsaXN0KHNlbGYuZGF0YS5rZXlzKCkpDQogICAgICAgIHRyYW5kaXRpb25hbF9yYWRpb21pY3MgPSBbXQ0KICAgICAgICB0b3RhbCA9IGxlbihzdWJqcykNCiAgICAgICAgDQogICAgICAgIHByb2dyZXNzX2JhciA9IEN1c3RvbVRxZG0odG90YWw9dG90YWwsIGRlc2M9IlByb2Nlc3NpbmcgVHJhZGl0aW9uYWwgUmFkaW9taWNzIikNCiAgICAgICAgZm9yIGksIHN1YmogaW4gZW51bWVyYXRlKHN1YmpzKToNCiAgICAgICAgICAgIHByb2dyZXNzX2Jhci51cGRhdGUoMSkNCg0KICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgIGltZ3MgPSBsaXN0KHNlbGYuZGF0YS5nZXQoc3ViaikuZ2V0KCd0cmFuZGl0aW9uYWxfcmFkaW9taWNzX2ZlYXR1cmVzJykua2V5cygpKQ0KICAgICAgICAgICAgICAgIGRmcyA9IHBkLkRhdGFGcmFtZShbc2VsZi5kYXRhLmdldChzdWJqKS5nZXQoJ3RyYW5kaXRpb25hbF9yYWRpb21pY3NfZmVhdHVyZXMnKS5nZXQoaW1nKSBmb3IgaW1nIGluIGltZ3NdLCBpbmRleD1pbWdzKQ0KICAgICAgICAgICAgICAgIGRmcyA9IGRmcy5sb2NbOiwgfmRmcy5jb2x1bW5zLnN0ci5jb250YWlucygnZGlhZ25vc3RpYycpXQ0KICAgICAgICAgICAgICAgIG5ld19jb2x1bW5zID0gW2Yie2NvbH1fb2Zfe2lkeH0iIGZvciBpZHggaW4gZGZzLmluZGV4IGZvciBjb2wgaW4gZGZzLmNvbHVtbnNdDQogICAgICAgICAgICAgICAgZGZzX3Jlc2hhcGVkID0gcGQuRGF0YUZyYW1lKFtkZnMudmFsdWVzLmZsYXR0ZW4oKV0sIGNvbHVtbnM9bmV3X2NvbHVtbnMpDQogICAgICAgICAgICAgICAgdHJhbmRpdGlvbmFsX3JhZGlvbWljcy5hcHBlbmQoZGZzX3Jlc2hhcGVkKQ0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiLlpITnkIblj5for5XogIUge3N1Ymp9IOeahOS8oOe7n+e7hOWtpueJueW+geaXtuWHuumUmToge3N0cihlKX0iKQ0KICAgICAgICAgICAgICAgICMg5Yib5bu65LiA5Liq56m655qERGF0YUZyYW1l77yM5YiX5ZCN5LiO5YW25LuW5Y+X6K+V6ICF5LiA6Ie0DQogICAgICAgICAgICAgICAgaWYgbGVuKHRyYW5kaXRpb25hbF9yYWRpb21pY3MpID4gMDoNCiAgICAgICAgICAgICAgICAgICAgIyDnm7TmjqXliJvlu7rkuI7lhbbku5bmoLfmnKznm7jlkIzlvaLnirbnmoREYXRhRnJhbWXvvIzloavlhYVOYU7lgLwNCiAgICAgICAgICAgICAgICAgICAgZW1wdHlfZGYgPSBwZC5EYXRhRnJhbWUoDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhPW5wLm5hbiwgDQogICAgICAgICAgICAgICAgICAgICAgICBpbmRleD1bMF0sIA0KICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucz10cmFuZGl0aW9uYWxfcmFkaW9taWNzWzBdLmNvbHVtbnMNCiAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgICAgICB0cmFuZGl0aW9uYWxfcmFkaW9taWNzLmFwcGVuZChlbXB0eV9kZikNCiAgICAgICAgDQogICAgICAgIGlmIGxlbih0cmFuZGl0aW9uYWxfcmFkaW9taWNzKSA+IDA6DQogICAgICAgICAgICB0cmFuZGl0aW9uYWxfcmFkaW9taWNzID0gcGQuY29uY2F0KHRyYW5kaXRpb25hbF9yYWRpb21pY3MpDQogICAgICAgICAgICB0cmFuZGl0aW9uYWxfcmFkaW9taWNzLmluZGV4ID0gc3VianMNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgb3V0X2ZpbGUgPSBvcy5wYXRoLmpvaW4oc2VsZi5vdXRfZGlyLCAicmF3X2ltYWdlX3JhZGlvbWljcy5jc3YiKQ0KICAgICAgICAgICAgdHJhbmRpdGlvbmFsX3JhZGlvbWljcy50b19jc3Yob3V0X2ZpbGUsIGluZGV4PVRydWUpDQogICAgICAgICAgICBsb2dnaW5nLmluZm8oZiLlt7Lkv53lrZjljp/lp4vlvbHlg4/nu4TlrabnibnlvoHliLAge291dF9maWxlfSIpDQogICAgICAgICAgICByZXR1cm4gdHJhbmRpdGlvbmFsX3JhZGlvbWljcw0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgbG9nZ2luZy5lcnJvcigi5aSE55CG5Lyg57uf57uE5a2m54m55b6B5pe25Ye6546w6ZSZ6K+v77yM5peg5rOV55Sf5oiQ5pyJ5pWI57uT5p6cIikNCiAgICAgICAgICAgIHJldHVybiBOb25lDQoNCiAgICBkZWYgX2V4dHJhY3Rfbm9uX3JhZGlvbWljc19mZWF0dXJlcyhzZWxmLCBuX2hhYml0YXRzOiBpbnQpOg0KICAgICAgICAiIiLmj5Dlj5bnlJ/looPnmoTln7rmnKznibnlvoEo5LiN6L+e6YCa5Yy65Z+f5pWw5ZKM5L2T56ev5Y2g5q+UKSIiIg0KICAgICAgICBsb2dnaW5nLmluZm8oIuW8gOWni+aPkOWPlueUn+Wig+WfuuacrOeJueW+gSIpDQogICAgICAgIHN1YmpzID0gbGlzdChzZWxmLmRhdGEua2V5cygpKQ0KICAgICAgICBuMSA9IFtmIntpfV9udW1fcmVnaW9ucyIgZm9yIGkgaW4gcmFuZ2UoMSwgbl9oYWJpdGF0cysxKV0NCiAgICAgICAgbjIgPSBbZiJ7aX1fdm9sdW1lX3JhdGlvIiBmb3IgaSBpbiByYW5nZSgxLCBuX2hhYml0YXRzKzEpXQ0KICAgICAgICBub25fcmFkaW9taWNzX2ZlYXR1cmVzID0gcGQuRGF0YUZyYW1lKGluZGV4PXN1YmpzLCBjb2x1bW5zPVsnbnVtX2hhYml0YXRzJ10rbjErbjIpDQogICAgICAgIHRvdGFsID0gbGVuKHN1YmpzKQ0KICAgICAgICANCiAgICAgICAgcHJvZ3Jlc3NfYmFyID0gQ3VzdG9tVHFkbSh0b3RhbD10b3RhbCwgZGVzYz0iUHJvY2Vzc2luZyBCYXNpYyBIYWJpdGF0IEZlYXR1cmVzIikNCiAgICAgICAgZm9yIGksIHN1YmogaW4gZW51bWVyYXRlKHN1YmpzKToNCiAgICAgICAgICAgIHByb2dyZXNzX2Jhci51cGRhdGUoMSkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZmQgPSBzZWxmLl9mbGF0dGVuX2RpY3Qoc2VsZi5kYXRhLmdldChzdWJqKS5nZXQoJ25vbl9yYWRpb21pY3NfZmVhdHVyZXMnKSkNCiAgICAgICAgICAgIGZvciBmbiBpbiBub25fcmFkaW9taWNzX2ZlYXR1cmVzLmNvbHVtbnM6DQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBub25fcmFkaW9taWNzX2ZlYXR1cmVzLmxvY1tzdWJqLCBmbl0gPSBmZC5nZXQoZm4pDQogICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgICAgICBsb2dnaW5nLmVycm9yKGYi5aSE55CG5Y+X6K+V6ICFIHtzdWJqfSDnmoTnibnlvoEge2ZufSDml7blh7rplJk6IHtzdHIoZSl9IikNCiAgICAgICAgICAgICAgICAgICAgIyDlsIbor6XnibnlvoHorr7kuLpOYU4NCiAgICAgICAgICAgICAgICAgICAgbm9uX3JhZGlvbWljc19mZWF0dXJlcy5sb2Nbc3ViaiwgZm5dID0gbnAubmFuDQoNCiAgICAgICAgb3V0X2ZpbGUgPSBvcy5wYXRoLmpvaW4oc2VsZi5vdXRfZGlyLCAiaGFiaXRhdF9iYXNpY19mZWF0dXJlcy5jc3YiKQ0KICAgICAgICBub25fcmFkaW9taWNzX2ZlYXR1cmVzLnRvX2NzdihvdXRfZmlsZSwgaW5kZXg9VHJ1ZSkNCiAgICAgICAgbG9nZ2luZy5pbmZvKGYi5bey5L+d5a2Y55Sf5aKD5Z+65pys54m55b6B5YiwIHtvdXRfZmlsZX0iKQ0KICAgICAgICByZXR1cm4gbm9uX3JhZGlvbWljc19mZWF0dXJlcw0KDQogICAgZGVmIF9leHRyYWN0X3JhZGlvbWljc19mZWF0dXJlc19mb3Jfd2hvbGVfaGFiaXRhdF9tYXAoc2VsZik6DQogICAgICAgICIiIuaPkOWPluaVtOS4queUn+Wig+WbvueahOe7hOWtpueJueW+gSIiIg0KICAgICAgICBsb2dnaW5nLmluZm8oIuW8gOWni+aPkOWPluaVtOS4queUn+Wig+WbvueahOe7hOWtpueJueW+gSIpDQogICAgICAgIHN1YmpzID0gbGlzdChzZWxmLmRhdGEua2V5cygpKQ0KICAgICAgICByYWRpb21pY3Nfb2Zfd2hvbGVfaGFiaXRhdCA9IFtdDQogICAgICAgIHRvdGFsID0gbGVuKHN1YmpzKQ0KICAgICAgICANCiAgICAgICAgcHJvZ3Jlc3NfYmFyID0gQ3VzdG9tVHFkbSh0b3RhbD10b3RhbCwgZGVzYz0iUHJvY2Vzc2luZyBXaG9sZSBIYWJpdGF0IFJhZGlvbWljcyIpDQogICAgICAgIGZvciBpLCBzdWJqIGluIGVudW1lcmF0ZShzdWJqcyk6DQogICAgICAgICAgICBwcm9ncmVzc19iYXIudXBkYXRlKDEpDQoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBmZWF0dXJlcyA9IHNlbGYuZGF0YS5nZXQoc3ViaikuZ2V0KCdyYWRpb21pY3NfZmVhdHVyZXNfb2Zfd2hvbGVfaGFiaXRhdF9tYXAnKQ0KICAgICAgICAgICAgICAgIGZlYXR1cmVzX2RmID0gcGQuRGF0YUZyYW1lLmZyb21fZGljdChmZWF0dXJlcywgb3JpZW50PSdpbmRleCcpLlQNCiAgICAgICAgICAgICAgICBmZWF0dXJlc19kZiA9IGZlYXR1cmVzX2RmLmxvY1s6LCB+ZmVhdHVyZXNfZGYuY29sdW1ucy5zdHIuY29udGFpbnMoJ2RpYWdub3N0aWMnKV0NCiAgICAgICAgICAgICAgICByYWRpb21pY3Nfb2Zfd2hvbGVfaGFiaXRhdC5hcHBlbmQoZmVhdHVyZXNfZGYpDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgbG9nZ2luZy5lcnJvcihmIuWkhOeQhuWPl+ivleiAhSB7c3Vian0g55qE5pW05Liq55Sf5aKD5Zu+57uE5a2m54m55b6B5pe25Ye66ZSZOiB7c3RyKGUpfSIpDQogICAgICAgICAgICAgICAgIyDliJvlu7rkuIDkuKrnqbrnmoREYXRhRnJhbWXvvIzliJflkI3kuI7lhbbku5blj5for5XogIXkuIDoh7QNCiAgICAgICAgICAgICAgICBpZiBsZW4ocmFkaW9taWNzX29mX3dob2xlX2hhYml0YXQpID4gMDoNCiAgICAgICAgICAgICAgICAgICAgZW1wdHlfZGYgPSBwZC5EYXRhRnJhbWUoDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhPW5wLm5hbiwgDQogICAgICAgICAgICAgICAgICAgICAgICBpbmRleD1bMF0sIA0KICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucz1yYWRpb21pY3Nfb2Zfd2hvbGVfaGFiaXRhdFswXS5jb2x1bW5zDQogICAgICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICAgICAgcmFkaW9taWNzX29mX3dob2xlX2hhYml0YXQuYXBwZW5kKGVtcHR5X2RmKQ0KICAgICAgICANCiAgICAgICAgaWYgbGVuKHJhZGlvbWljc19vZl93aG9sZV9oYWJpdGF0KSA+IDA6DQogICAgICAgICAgICByYWRpb21pY3Nfb2Zfd2hvbGVfaGFiaXRhdCA9IHBkLmNvbmNhdChyYWRpb21pY3Nfb2Zfd2hvbGVfaGFiaXRhdCkNCiAgICAgICAgICAgIHJhZGlvbWljc19vZl93aG9sZV9oYWJpdGF0LmluZGV4ID0gc3VianMNCg0KICAgICAgICAgICAgb3V0X2ZpbGUgPSBvcy5wYXRoLmpvaW4oc2VsZi5vdXRfZGlyLCAid2hvbGVfaGFiaXRhdF9yYWRpb21pY3MuY3N2IikNCiAgICAgICAgICAgIHJhZGlvbWljc19vZl93aG9sZV9oYWJpdGF0LnRvX2NzdihvdXRfZmlsZSwgaW5kZXg9VHJ1ZSkNCiAgICAgICAgICAgIGxvZ2dpbmcuaW5mbyhmIuW3suS/neWtmOaVtOS4queUn+Wig+Wbvue7hOWtpueJueW+geWIsCB7b3V0X2ZpbGV9IikNCiAgICAgICAgICAgIHJldHVybiByYWRpb21pY3Nfb2Zfd2hvbGVfaGFiaXRhdA0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgbG9nZ2luZy5lcnJvcigi5aSE55CG5pW05Liq55Sf5aKD5Zu+57uE5a2m54m55b6B5pe25Ye6546w6ZSZ6K+v77yM5peg5rOV55Sf5oiQ5pyJ5pWI57uT5p6cIikNCiAgICAgICAgICAgIHJldHVybiBOb25lDQoNCiAgICBkZWYgX2V4dHJhY3RfcmFkaW9taWNzX2ZlYXR1cmVzX2Zyb21fZWFjaF9oYWJpdGF0KHNlbGYsIG5faGFiaXRhdHM6IGludCk6DQogICAgICAgICIiIuaPkOWPluavj+S4queUn+Wig+eahOe7hOWtpueJueW+gSIiIg0KICAgICAgICBsb2dnaW5nLmluZm8oIuW8gOWni+aPkOWPluWQhOS4queUn+Wig+eahOe7hOWtpueJueW+gSIpDQogICAgICAgIHN1YmpzID0gbGlzdChzZWxmLmRhdGEua2V5cygpKQ0KICAgICAgICByYWRpb21pY3Nfb2ZfZWFjaF9oYWJpdGF0ID0ge2krMTogW10gZm9yIGkgaW4gcmFuZ2Uobl9oYWJpdGF0cyl9DQogICAgICAgIGhhYml0YXRfY291bnQgPSBucC56ZXJvcygobGVuKHN1YmpzKSwgbl9oYWJpdGF0cykpDQogICAgICAgIGhhYml0YXRfY291bnQgPSBwZC5EYXRhRnJhbWUoaGFiaXRhdF9jb3VudCwgaW5kZXg9c3VianMsIGNvbHVtbnM9W25wLmFyYW5nZSgxLCBuX2hhYml0YXRzKzEpXSkNCg0KICAgICAgICB0b3RhbCA9IGxlbihyYWRpb21pY3Nfb2ZfZWFjaF9oYWJpdGF0KQ0KICAgICAgICANCiAgICAgICAgcHJvZ3Jlc3NfYmFyID0gQ3VzdG9tVHFkbSh0b3RhbD10b3RhbCwgZGVzYz0iUHJvY2Vzc2luZyBIYWJpdGF0cyIpDQogICAgICAgIGZvciBoYWJpdGF0X2lkIGluIHJhZGlvbWljc19vZl9lYWNoX2hhYml0YXQua2V5cygpOg0KICAgICAgICAgICAgcHJvZ3Jlc3NfYmFyLnVwZGF0ZSgxKQ0KDQogICAgICAgICAgICBmb3IgaSwgc3ViaiBpbiBlbnVtZXJhdGUoc3VianMpOg0KICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgaWYgaSA9PSAwOiANCiAgICAgICAgICAgICAgICAgICAgICAgIGltZ3MgPSBsaXN0KHNlbGYuZGF0YS5nZXQoc3ViaikuZ2V0KCdyYWRpb21pY3NfZmVhdHVyZXNfZnJvbV9lYWNoX2hhYml0YXQnKS5rZXlzKCkpDQogICAgICAgICAgICAgICAgICAgIHJhZGlvbWljc19vZl9oYWJpdGF0ID0gW10gDQogICAgICAgICAgICAgICAgICAgIGZvciBpaW1nLCBpbWcgaW4gZW51bWVyYXRlKGltZ3MpOg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhYml0YXRfaWQgPT0gMSkgJiAoaWltZyA9PSAwKTogDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sID0gbGlzdChzZWxmLmRhdGEuZ2V0KHN1YmopLmdldCgncmFkaW9taWNzX2ZlYXR1cmVzX2Zyb21fZWFjaF9oYWJpdGF0JykuZ2V0KGltZykua2V5cygpKQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhYml0YXRfY291bnQubG9jW3N1YmosIGNvbF0gPSAxDQoNCiAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmUgPSBzZWxmLmRhdGEuZ2V0KHN1YmopLmdldCgncmFkaW9taWNzX2ZlYXR1cmVzX2Zyb21fZWFjaF9oYWJpdGF0JykuZ2V0KGltZykuZ2V0KGhhYml0YXRfaWQpDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBmZWF0dXJlIGlzIG5vdCBOb25lOiANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZiA9IHBkLkRhdGFGcmFtZS5mcm9tX2RpY3QoZmVhdHVyZSwgb3JpZW50PSdpbmRleCcpLlQNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYWRpb21pY3Nfb2ZfaGFiaXRhdC5hcHBlbmQoZGYpICANCg0KICAgICAgICAgICAgICAgICAgICBpZiBsZW4ocmFkaW9taWNzX29mX2hhYml0YXQpID4gMDogICANCiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGlvbWljc19vZl9oYWJpdGF0ID0gcGQuY29uY2F0KHJhZGlvbWljc19vZl9oYWJpdGF0KQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW9taWNzX29mX2hhYml0YXQuaW5kZXggPSBpbWdzDQogICAgICAgICAgICAgICAgICAgICAgICByYWRpb21pY3Nfb2ZfaGFiaXRhdCA9IHJhZGlvbWljc19vZl9oYWJpdGF0LmxvY1s6LCB+cmFkaW9taWNzX29mX2hhYml0YXQuY29sdW1ucy5zdHIuY29udGFpbnMoJ2RpYWdub3N0aWMnKV0NCiAgICAgICAgICAgICAgICAgICAgICAgIG5ld19jb2x1bW5zID0gW2Yie2NvbH1fb2Zfe2lkeH0iIGZvciBpZHggaW4gcmFkaW9taWNzX29mX2hhYml0YXQuaW5kZXggZm9yIGNvbCBpbiByYWRpb21pY3Nfb2ZfaGFiaXRhdC5jb2x1bW5zXQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW9taWNzX29mX2hhYml0YXQgPSBwZC5EYXRhRnJhbWUoW3JhZGlvbWljc19vZl9oYWJpdGF0LnZhbHVlcy5mbGF0dGVuKCldLCBjb2x1bW5zPW5ld19jb2x1bW5zLCBpbmRleD1bc3Vial0pDQogICAgICAgICAgICAgICAgICAgICAgICByYWRpb21pY3Nfb2ZfZWFjaF9oYWJpdGF0W2hhYml0YXRfaWRdLmFwcGVuZChyYWRpb21pY3Nfb2ZfaGFiaXRhdCkNCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiLlpITnkIblj5for5XogIUge3N1Ymp9IOeahOeUn+WigyB7aGFiaXRhdF9pZH0g57uE5a2m54m55b6B5pe25Ye66ZSZOiB7c3RyKGUpfSIpDQogICAgICAgICAgICAgICAgICAgICMg5aaC5p6c5bey57uP5pyJ5YW25LuW5Y+X6K+V6ICF5oiQ5Yqf5aSE55CG77yM5YiZ5Yib5bu65LiA5Liq56m6RGF0YUZyYW1lDQogICAgICAgICAgICAgICAgICAgIGlmIGxlbihyYWRpb21pY3Nfb2ZfZWFjaF9oYWJpdGF0W2hhYml0YXRfaWRdKSA+IDA6DQogICAgICAgICAgICAgICAgICAgICAgICBmaXJzdF9kZiA9IHJhZGlvbWljc19vZl9lYWNoX2hhYml0YXRbaGFiaXRhdF9pZF1bMF0NCiAgICAgICAgICAgICAgICAgICAgICAgIGVtcHR5X2RmID0gcGQuRGF0YUZyYW1lKA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE9bnAubmFuLCANCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleD1bc3Vial0sIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM9Zmlyc3RfZGYuY29sdW1ucw0KICAgICAgICAgICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmFkaW9taWNzX29mX2VhY2hfaGFiaXRhdFtoYWJpdGF0X2lkXS5hcHBlbmQoZW1wdHlfZGYpDQogICAgICAgICAgICANCiAgICAgICAgICAgIGlmIGxlbihyYWRpb21pY3Nfb2ZfZWFjaF9oYWJpdGF0W2hhYml0YXRfaWRdKSA+IDA6DQogICAgICAgICAgICAgICAgcmFkaW9taWNzX29mX2VhY2hfaGFiaXRhdFtoYWJpdGF0X2lkXSA9IHBkLmNvbmNhdChyYWRpb21pY3Nfb2ZfZWFjaF9oYWJpdGF0W2hhYml0YXRfaWRdKQ0KICAgICAgICAgICAgICAgIG91dF9maWxlID0gb3MucGF0aC5qb2luKHNlbGYub3V0X2RpciwgZiJoYWJpdGF0X3toYWJpdGF0X2lkfV9yYWRpb21pY3MuY3N2IikNCiAgICAgICAgICAgICAgICByYWRpb21pY3Nfb2ZfZWFjaF9oYWJpdGF0W2hhYml0YXRfaWRdLnRvX2NzdihvdXRfZmlsZSwgaW5kZXg9VHJ1ZSkNCiAgICAgICAgICAgICAgICBsb2dnaW5nLmluZm8oZiLlt7Lkv53lrZjnlJ/looMge2hhYml0YXRfaWR9IOeahOe7hOWtpueJueW+geWIsCB7b3V0X2ZpbGV9IikNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgbG9nZ2luZy5lcnJvcihmIueUn+WigyB7aGFiaXRhdF9pZH0g5rKh5pyJ5pyJ5pWI55qE57uE5a2m54m55b6B5pWw5o2uIikNCiAgICAgICAgDQogICAgICAgIGhhYml0YXRfY291bnQuY29sdW1ucyA9IFtmImhhc19oYWJpdGF0X3tpfSIgZm9yIGkgaW4gcmFuZ2UoMSwgbl9oYWJpdGF0cysxKV0NCiAgICAgICAgaGFiaXRhdF9jb3VudC50b19jc3Yob3MucGF0aC5qb2luKHNlbGYub3V0X2RpciwgImhhYml0YXRfY291bnQuY3N2IiksIGluZGV4PVRydWUpDQogICAgICAgIGxvZ2dpbmcuaW5mbygi5bey5L+d5a2Y55Sf5aKD5pWw6YeP5L+h5oGvIikNCiAgICAgICAgcmV0dXJuIHJhZGlvbWljc19vZl9lYWNoX2hhYml0YXQNCg0KICAgIEBzdGF0aWNtZXRob2QNCiAgICBkZWYgX2ZsYXR0ZW5fZGljdChkOiBkaWN0LCBwYXJlbnRfa2V5OiBzdHIgPSAnJywgc2VwOiBzdHIgPSAnXycpIC0+IGRpY3Q6DQogICAgICAgICIiIuWxleW5s+W1jOWll+Wtl+WFuCIiIg0KICAgICAgICBpdGVtcyA9IFtdDQogICAgICAgIGZvciBrLCB2IGluIGQuaXRlbXMoKToNCiAgICAgICAgICAgIG5ld19rZXkgPSBmIntwYXJlbnRfa2V5fXtzZXB9e2t9IiBpZiBwYXJlbnRfa2V5IGVsc2Ugaw0KICAgICAgICAgICAgaWYgaXNpbnN0YW5jZSh2LCBkaWN0KToNCiAgICAgICAgICAgICAgICBpdGVtcy5leHRlbmQoSGFiaXRhdEZlYXR1cmVFeHRyYWN0b3IuX2ZsYXR0ZW5fZGljdCh2LCBuZXdfa2V5LCBzZXA9c2VwKS5pdGVtcygpKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBpdGVtcy5hcHBlbmQoKG5ld19rZXksIHYpKQ0KICAgICAgICByZXR1cm4gZGljdChpdGVtcykNCg0KICAgIGRlZiBydW4oc2VsZiwgZmVhdHVyZV90eXBlczogT3B0aW9uYWxbTGlzdFtzdHJdXSA9IE5vbmUsIG5faGFiaXRhdHM6IE9wdGlvbmFsW2ludF0gPSBOb25lLCBtb2RlOiBzdHIgPSAnYm90aCcpOg0KICAgICAgICAiIiLov5DooYzlrozmlbTnmoTliIbmnpDmtYHnqIsiIiINCiAgICAgICAgIyDnibnlvoHmj5Dlj5YNCiAgICAgICAgaWYgc2VsZi5vdXRfZGlyIGFuZCAobW9kZSA9PSAnZXh0cmFjdCcgb3IgbW9kZSA9PSAnYm90aCcpOg0KICAgICAgICAgICAgaW1hZ2VzX3BhdGhzLCBoYWJpdGF0X3BhdGhzID0gc2VsZi5nZXRfbWFza19hbmRfcmF3X2ZpbGVzKCkNCiAgICAgICAgICAgIHNlbGYuZXh0cmFjdF9mZWF0dXJlcyhpbWFnZXNfcGF0aHMsIGhhYml0YXRfcGF0aHMpDQogICAgICAgICAgICANCiAgICAgICAgIyDnibnlvoHop6PmnpANCiAgICAgICAgaWYgZmVhdHVyZV90eXBlcyBhbmQgc2VsZi5vdXRfZGlyIGFuZCAobW9kZSA9PSAncGFyc2UnIG9yIG1vZGUgPT0gJ2JvdGgnKToNCiAgICAgICAgICAgIHNlbGYucGFyc2VfZmVhdHVyZXMoZmVhdHVyZV90eXBlcywgbl9oYWJpdGF0cykNCiAgICAgICAgICAgIA0KICAgICAgICByZXR1cm4gc2VsZg0KDQogICAgZGVmIGNhbGN1bGF0ZV9NU0lfbWF0cml4KHNlbGYsIGhhYml0YXRfYXJyYXk6IG5wLm5kYXJyYXksIHVuaXF1ZV9jbGFzczogaW50KSAtPiBucC5uZGFycmF5Og0KICAgICAgICAiIiINCiAgICAgICAgQ2FsY3VsYXRlIHRoZSBNU0kgbWF0cml4IGZyb20gaGFiaXRhdCBhcnJheQ0KICAgICAgICANCiAgICAgICAgQXJnczoNCiAgICAgICAgICAgIGhhYml0YXRfYXJyYXk6IEFycmF5IHJlcHJlc2VudGluZyB0aGUgaGFiaXRhdCBtYXANCiAgICAgICAgICAgIHVuaXF1ZV9jbGFzczogTnVtYmVyIG9mIGhhYml0YXQgY2xhc3NlcyAoaW5jbHVkaW5nIGJhY2tncm91bmQpDQogICAgICAgICAgICANCiAgICAgICAgUmV0dXJuczoNCiAgICAgICAgICAgIG1zaV9tYXRyaXg6IENhbGN1bGF0ZWQgTVNJIG1hdHJpeA0KICAgICAgICAiIiINCiAgICAgICAgIyBGaW5kIHRoZSBtaW5pbXVtIGJvdW5kaW5nIGJveCBvZiBub24temVybyByZWdpb25zIGluIGhhYml0YXRfYXJyYXkNCiAgICAgICAgcm9pX3osIHJvaV95LCByb2lfeCA9IG5wLndoZXJlKGhhYml0YXRfYXJyYXkgIT0gMCkNCiAgICAgICAgDQogICAgICAgIGlmIGxlbihyb2lfeikgPT0gMDoNCiAgICAgICAgICAgIGxvZ2dpbmcud2FybmluZygiTm8gbm9uLXplcm8gZWxlbWVudHMgZm91bmQgaW4gaGFiaXRhdCBhcnJheSIpDQogICAgICAgICAgICByZXR1cm4gbnAuemVyb3MoKHVuaXF1ZV9jbGFzcywgdW5pcXVlX2NsYXNzKSwgZHR5cGU9bnAuaW50NjQpDQogICAgICAgICAgICANCiAgICAgICAgel9taW4sIHpfbWF4ID0gbnAubWluKHJvaV96KSwgbnAubWF4KHJvaV96KQ0KICAgICAgICB5X21pbiwgeV9tYXggPSBucC5taW4ocm9pX3kpLCBucC5tYXgocm9pX3kpDQogICAgICAgIHhfbWluLCB4X21heCA9IG5wLm1pbihyb2lfeCksIG5wLm1heChyb2lfeCkNCg0KICAgICAgICAjIEV4dHJhY3QgZGF0YSB3aXRoaW4gdGhlIGJvdW5kaW5nIGJveA0KICAgICAgICBib3hfb2ZfVk9JID0gaGFiaXRhdF9hcnJheVt6X21pbjp6X21heCsxLCB5X21pbjp5X21heCsxLCB4X21pbjp4X21heCsxXQ0KICAgICAgICANCiAgICAgICAgIyBBZGQgYSBsYXllciBvZiB6ZXJvcyBhcm91bmQgdGhlIGJveCB0byBjYXB0dXJlIGJvdW5kYXJ5IGluZm9ybWF0aW9uDQogICAgICAgIGJveF9vZl9WT0kgPSBucC5wYWQoYm94X29mX1ZPSSwgKCgxLCAxKSwgKDEsIDEpLCAoMSwgMSkpLCAnY29uc3RhbnQnLCBjb25zdGFudF92YWx1ZXM9MCkNCg0KICAgICAgICAjIERlZmluZSAzRCBuZWlnaGJvcmhvb2QgKGZhY2UtY29ubmVjdGVkIG9ubHkpDQogICAgICAgIG5laWdoYm9yaG9vZF8zZF9jdWJlX29ubHkgPSBbDQogICAgICAgICAgICAoLTEsIDAsIDApLCAoMSwgMCwgMCksICAjIFVwIGFuZCBkb3duIG5laWdoYm9ycw0KICAgICAgICAgICAgKDAsIC0xLCAwKSwgKDAsIDEsIDApLCAgIyBMZWZ0IGFuZCByaWdodCBuZWlnaGJvcnMNCiAgICAgICAgICAgICgwLCAwLCAtMSksICgwLCAwLCAxKSAgICMgRnJvbnQgYW5kIGJhY2sgbmVpZ2hib3JzDQogICAgICAgIF0NCg0KICAgICAgICAjIEluaXRpYWxpemUgTVNJIG1hdHJpeA0KICAgICAgICBtc2lfbWF0cml4ID0gbnAuemVyb3MoKHVuaXF1ZV9jbGFzcywgdW5pcXVlX2NsYXNzKSwgZHR5cGU9bnAuaW50NjQpDQogICAgICAgIA0KICAgICAgICAjIFRyYXZlcnNlIHRoZSAzRCBpbWFnZSBhbmQgY291bnQgbmVpZ2hib3IgcmVsYXRpb25zaGlwcw0KICAgICAgICBmb3IgeiBpbiByYW5nZShib3hfb2ZfVk9JLnNoYXBlWzBdKTogIA0KICAgICAgICAgICAgZm9yIHkgaW4gcmFuZ2UoYm94X29mX1ZPSS5zaGFwZVsxXSk6ICANCiAgICAgICAgICAgICAgICBmb3IgeCBpbiByYW5nZShib3hfb2ZfVk9JLnNoYXBlWzJdKTogDQogICAgICAgICAgICAgICAgICAgICMgR2V0IGN1cnJlbnQgdm94ZWwgdmFsdWUNCiAgICAgICAgICAgICAgICAgICAgY3VycmVudF92b3hlbF92YWx1ZSA9IGJveF9vZl9WT0lbeiwgeSwgeF0NCg0KICAgICAgICAgICAgICAgICAgICAjIENoZWNrIGFsbCBuZWlnaGJvcnMNCiAgICAgICAgICAgICAgICAgICAgZm9yIGR6LCBkeSwgZHggaW4gbmVpZ2hib3Job29kXzNkX2N1YmVfb25seToNCiAgICAgICAgICAgICAgICAgICAgICAgIG5laWdoYm9yX3ogPSB6ICsgZHoNCiAgICAgICAgICAgICAgICAgICAgICAgIG5laWdoYm9yX3kgPSB5ICsgZHkNCiAgICAgICAgICAgICAgICAgICAgICAgIG5laWdoYm9yX3ggPSB4ICsgZHgNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgIyBDaGVjayBpZiBuZWlnaGJvciBpcyB3aXRoaW4gaW1hZ2UgYm91bmRzDQogICAgICAgICAgICAgICAgICAgICAgICBpZiAwIDw9IG5laWdoYm9yX3ogPCBib3hfb2ZfVk9JLnNoYXBlWzBdIGFuZCBcDQogICAgICAgICAgICAgICAgICAgICAgICAwIDw9IG5laWdoYm9yX3kgPCBib3hfb2ZfVk9JLnNoYXBlWzFdIGFuZCBcDQogICAgICAgICAgICAgICAgICAgICAgICAwIDw9IG5laWdoYm9yX3ggPCBib3hfb2ZfVk9JLnNoYXBlWzJdOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5laWdoYm9yX3ZveGVsX3ZhbHVlID0gYm94X29mX1ZPSVtuZWlnaGJvcl96LCBuZWlnaGJvcl95LCBuZWlnaGJvcl94XQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICMgVXBkYXRlIE1TSSBtYXRyaXgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtc2lfbWF0cml4W2N1cnJlbnRfdm94ZWxfdmFsdWUsIG5laWdoYm9yX3ZveGVsX3ZhbHVlXSArPSAxDQoNCiAgICAgICAgcmV0dXJuIG1zaV9tYXRyaXgNCg0KICAgIGRlZiBjYWxjdWxhdGVfTVNJX2ZlYXR1cmVzKHNlbGYsIG1zaV9tYXRyaXg6IG5wLm5kYXJyYXksIG5hbWU6IHN0cikgLT4gRGljdDoNCiAgICAgICAgIiIiDQogICAgICAgIENhbGN1bGF0ZSBNU0kgZmVhdHVyZXMgZnJvbSB0aGUgTVNJIG1hdHJpeA0KICAgICAgICANCiAgICAgICAgQXJnczoNCiAgICAgICAgICAgIG1zaV9tYXRyaXg6IE1TSSBtYXRyaXgNCiAgICAgICAgICAgIG5hbWU6IFByZWZpeCBmb3IgZmVhdHVyZSBuYW1lcw0KICAgICAgICAgICAgDQogICAgICAgIFJldHVybnM6DQogICAgICAgICAgICBEaWN0OiBDYWxjdWxhdGVkIE1TSSBmZWF0dXJlcw0KICAgICAgICAiIiINCiAgICAgICAgIyBBc3NlcnQgdGhhdCBtc2lfbWF0cml4IGlzIHNxdWFyZSBhbmQgY29udGFpbnMgbm8gbmVnYXRpdmUgdmFsdWVzDQogICAgICAgIGFzc2VydCBtc2lfbWF0cml4LnNoYXBlWzBdID09IG1zaV9tYXRyaXguc2hhcGVbMV0sIGYnbXNpX21hdHJpeCBvZiB7bmFtZX0gaXMgbm90IGEgc3F1YXJlIG1hdHJpeCcNCiAgICAgICAgYXNzZXJ0IG5wLmFsbChtc2lfbWF0cml4ID49IDApLCBmJ21zaV9tYXRyaXggb2Yge25hbWV9IGhhcyBuZWdhdGl2ZSB2YWx1ZScNCiAgICAgICAgDQogICAgICAgICMgRmlyc3Qtb3JkZXIgZmVhdHVyZXM6IFZvbHVtZSBvZiBlYWNoIHN1YnJlZ2lvbiAoZGlhZ29uYWwpIGFuZCBib3JkZXJzIG9mIHR3byBkaWZmZXJpbmcgc3VicmVnaW9ucyAob2ZmLWRpYWdvbmFsKQ0KICAgICAgICBmaXJzdG9yZGVyX2ZlYXR1cmUgPSB7fQ0KICAgICAgICBmb3IgaSBpbiByYW5nZSgwLCBtc2lfbWF0cml4LnNoYXBlWzBdKToNCiAgICAgICAgICAgIGZvciBqIGluIHJhbmdlKGkrMSwgbXNpX21hdHJpeC5zaGFwZVswXSk6DQogICAgICAgICAgICAgICAgZmlyc3RvcmRlcl9mZWF0dXJlWydmaXJzdG9yZGVyX3t9X2FuZF97fScuZm9ybWF0KGksIGopXSA9IG1zaV9tYXRyaXhbaSwgal0NCg0KICAgICAgICAjIENhbGN1bGF0ZSBkaWFnb25hbCBlbGVtZW50cywgZXhjbHVkaW5nIGJhY2tncm91bmQNCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMSwgbXNpX21hdHJpeC5zaGFwZVswXSk6DQogICAgICAgICAgICBmaXJzdG9yZGVyX2ZlYXR1cmVbJ2ZpcnN0b3JkZXJfe31fYW5kX3t9Jy5mb3JtYXQoaSwgaSldID0gbXNpX21hdHJpeFtpLCBpXQ0KDQogICAgICAgICMgTm9ybWFsaXplZCBmaXJzdC1vcmRlciBmZWF0dXJlcywgZGVub21pbmF0b3IgaW5jbHVkZXMgb25seSB0aGUgbG93ZXIgdHJpYW5ndWxhciBwYXJ0IGV4Y2x1ZGluZyB0aGUgZmlyc3QgZWxlbWVudA0KICAgICAgICBkZW5vbWluYXRvcl9tYXQgPSBucC50cmlsKG1zaV9tYXRyaXgsIGs9MCkNCiAgICAgICAgZGVub21pbmF0b3JfbWF0WzBdID0gMA0KICAgICAgICBkZW5vbWluYXRvciA9IG5wLnN1bShkZW5vbWluYXRvcl9tYXQpDQogICAgICAgIA0KICAgICAgICBpZiBkZW5vbWluYXRvciA9PSAwOg0KICAgICAgICAgICAgbG9nZ2luZy53YXJuaW5nKGYiTVNJIG1hdHJpeCBkZW5vbWluYXRvciBpcyAwIGZvciB7bmFtZX0sIGNhbm5vdCBjYWxjdWxhdGUgbm9ybWFsaXplZCBmZWF0dXJlcyIpDQogICAgICAgICAgICBub3JtYWxfbXNpX21hdHJpeCA9IG5wLnplcm9zX2xpa2UobXNpX21hdHJpeCwgZHR5cGU9ZmxvYXQpDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBub3JtYWxfbXNpX21hdHJpeCA9IG1zaV9tYXRyaXggLyBkZW5vbWluYXRvcg0KICAgICAgICAgICAgDQogICAgICAgIGZpcnN0b3JkZXJfZmVhdHVyZV9ub3JtYWxpemVkID0ge30NCiAgICAgICAgZm9yIGkgaW4gcmFuZ2UoMCwgbm9ybWFsX21zaV9tYXRyaXguc2hhcGVbMF0pOg0KICAgICAgICAgICAgZm9yIGogaW4gcmFuZ2UoaSsxLCBub3JtYWxfbXNpX21hdHJpeC5zaGFwZVsxXSk6DQogICAgICAgICAgICAgICAgZmlyc3RvcmRlcl9mZWF0dXJlX25vcm1hbGl6ZWRbJ2ZpcnN0b3JkZXJfbm9ybWFsaXplZF97fV9hbmRfe30nLmZvcm1hdChpLCBqKV0gPSBub3JtYWxfbXNpX21hdHJpeFtpLCBqXQ0KDQogICAgICAgIGZvciBpIGluIHJhbmdlKDEsIG5vcm1hbF9tc2lfbWF0cml4LnNoYXBlWzBdKToNCiAgICAgICAgICAgIGZpcnN0b3JkZXJfZmVhdHVyZV9ub3JtYWxpemVkWydmaXJzdG9yZGVyX25vcm1hbGl6ZWRfe31fYW5kX3t9Jy5mb3JtYXQoaSwgaSldID0gbm9ybWFsX21zaV9tYXRyaXhbaSwgaV0NCiAgICAgICAgDQogICAgICAgICMgU2Vjb25kLW9yZGVyIGZlYXR1cmVzIGJhc2VkIG9uIG5vcm1hbGl6ZWQgTVNJIG1hdHJpeA0KICAgICAgICBwID0gbm9ybWFsX21zaV9tYXRyaXguY29weSgpDQogICAgICAgIA0KICAgICAgICAjIENhbGN1bGF0ZSBjb250cmFzdA0KICAgICAgICBpX2luZGljZXMsIGpfaW5kaWNlcyA9IG5wLmluZGljZXMocC5zaGFwZSkNCiAgICAgICAgY29udHJhc3QgPSBucC5zdW0oKGlfaW5kaWNlcyAtIGpfaW5kaWNlcykqKjIgKiBwKQ0KICAgICAgICANCiAgICAgICAgIyBDYWxjdWxhdGUgaG9tb2dlbmVpdHkNCiAgICAgICAgaG9tb2dlbmVpdHkgPSBucC5zdW0ocCAvICgxLjAgKyAoaV9pbmRpY2VzIC0gal9pbmRpY2VzKSoqMikpDQogICAgICAgIA0KICAgICAgICAjIENhbGN1bGF0ZSBjb3JyZWxhdGlvbg0KICAgICAgICBweCA9IG5wLnN1bShwLCBheGlzPTEpDQogICAgICAgIHB5ID0gbnAuc3VtKHAsIGF4aXM9MCkNCiAgICAgICAgDQogICAgICAgIHV4ID0gbnAuc3VtKHB4ICogbnAuYXJhbmdlKGxlbihweCkpKQ0KICAgICAgICB1eSA9IG5wLnN1bShweSAqIG5wLmFyYW5nZShsZW4ocHkpKSkNCiAgICAgICAgDQogICAgICAgIHNpZ21heCA9IG5wLnNxcnQobnAuc3VtKHB4ICogKG5wLmFyYW5nZShsZW4ocHgpKSAtIHV4KSoqMikpDQogICAgICAgIHNpZ21heSA9IG5wLnNxcnQobnAuc3VtKHB5ICogKG5wLmFyYW5nZShsZW4ocHkpKSAtIHV5KSoqMikpDQogICAgICAgIA0KICAgICAgICBpZiBzaWdtYXggPiAwIGFuZCBzaWdtYXkgPiAwOg0KICAgICAgICAgICAgc3VtX3BfaWogPSBucC5zdW0ocCAqIGlfaW5kaWNlcyAqIGpfaW5kaWNlcykNCiAgICAgICAgICAgIGNvcnJlbGF0aW9uID0gKHN1bV9wX2lqIC0gdXggKiB1eSkgLyAoc2lnbWF4ICogc2lnbWF5KQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgY29ycmVsYXRpb24gPSAxLjANCiAgICAgICAgDQogICAgICAgICMgQ2FsY3VsYXRlIGVuZXJneQ0KICAgICAgICBlbmVyZ3kgPSBucC5zdW0ocCoqMikNCiAgICAgICAgDQogICAgICAgIHNlY29uZG9yZGVyX2ZlYXR1cmUgPSB7IA0KICAgICAgICAgICAgJ2NvbnRyYXN0JzogY29udHJhc3QsDQogICAgICAgICAgICAnaG9tb2dlbmVpdHknOiBob21vZ2VuZWl0eSwNCiAgICAgICAgICAgICdjb3JyZWxhdGlvbic6IGNvcnJlbGF0aW9uLA0KICAgICAgICAgICAgJ2VuZXJneSc6IGVuZXJneQ0KICAgICAgICB9DQoNCiAgICAgICAgIyBDb21iaW5lIGFsbCBmZWF0dXJlcw0KICAgICAgICBtc2lfZmVhdHVyZSA9IHsqKmZpcnN0b3JkZXJfZmVhdHVyZSwgKipmaXJzdG9yZGVyX2ZlYXR1cmVfbm9ybWFsaXplZCwgKipzZWNvbmRvcmRlcl9mZWF0dXJlfQ0KICAgICAgICByZXR1cm4gbXNpX2ZlYXR1cmUNCg0KICAgIGRlZiBleHRyYWN0X01TSV9mZWF0dXJlcyhzZWxmLCBoYWJpdGF0X3BhdGg6IHN0ciwgbl9oYWJpdGF0czogaW50LCBzdWJqOiBzdHIpIC0+IERpY3Q6DQogICAgICAgICIiIg0KICAgICAgICBFeHRyYWN0IE1TSSBmZWF0dXJlcyBmcm9tIGEgc2luZ2xlIGhhYml0YXQgbWFwDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgaGFiaXRhdF9wYXRoOiBQYXRoIHRvIHRoZSBoYWJpdGF0IG1hcCBmaWxlDQogICAgICAgICAgICBuX2hhYml0YXRzOiBOdW1iZXIgb2YgaGFiaXRhdHMNCiAgICAgICAgICAgIHN1Ymo6IFN1YmplY3QgSUQNCiAgICAgICAgICAgIA0KICAgICAgICBSZXR1cm5zOg0KICAgICAgICAgICAgRGljdDogRXh0cmFjdGVkIE1TSSBmZWF0dXJlcw0KICAgICAgICAiIiINCiAgICAgICAgdHJ5Og0KICAgICAgICAgICAgaW1nID0gc2l0ay5SZWFkSW1hZ2UoaGFiaXRhdF9wYXRoKQ0KICAgICAgICAgICAgYXJyYXkgPSBzaXRrLkdldEFycmF5RnJvbUltYWdlKGltZykNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgdW5pcXVlX2NsYXNzID0gbl9oYWJpdGF0cysxICAjIE51bWJlciBvZiBoYWJpdGF0cyArIDEgKGluY2x1ZGluZyBiYWNrZ3JvdW5kKQ0KDQogICAgICAgICAgICAjIENhbGN1bGF0ZSBNU0kgbWF0cml4DQogICAgICAgICAgICBtc2lfbWF0cml4ID0gc2VsZi5jYWxjdWxhdGVfTVNJX21hdHJpeChhcnJheSwgdW5pcXVlX2NsYXNzKQ0KDQogICAgICAgICAgICAjIENhbGN1bGF0ZSBNU0kgZmVhdHVyZXMNCiAgICAgICAgICAgIG1zaV9mZWF0dXJlID0gc2VsZi5jYWxjdWxhdGVfTVNJX2ZlYXR1cmVzKG1zaV9tYXRyaXgsIHN1YmopDQogICAgICAgICAgICANCiAgICAgICAgICAgIHJldHVybiBtc2lfZmVhdHVyZQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBsb2dnaW5nLmVycm9yKGYiRXJyb3IgZXh0cmFjdGluZyBNU0kgZmVhdHVyZXMgZm9yIHN1YmplY3Qge3N1Ymp9OiB7c3RyKGUpfSIpDQogICAgICAgICAgICByZXR1cm4geyJlcnJvciI6IHN0cihlKX0NCg0KICAgIGRlZiBfZXh0cmFjdF9tc2lfZmVhdHVyZXMoc2VsZik6DQogICAgICAgICIiIuaPkOWPlk1TSeeJueW+geW5tuS/neWtmOS4ukNTVuaWh+S7tiIiIg0KICAgICAgICBsb2dnaW5nLmluZm8oIuW8gOWni+aPkOWPlk1TSeeJueW+gSIpDQogICAgICAgIHN1YmpzID0gbGlzdChzZWxmLmRhdGEua2V5cygpKQ0KICAgICAgICBtc2lfZmVhdHVyZXNfbGlzdCA9IFtdDQogICAgICAgIHRvdGFsID0gbGVuKHN1YmpzKQ0KICAgICAgICANCiAgICAgICAgcHJvZ3Jlc3NfYmFyID0gQ3VzdG9tVHFkbSh0b3RhbD10b3RhbCwgZGVzYz0iUHJvY2Vzc2luZyBNU0kgRmVhdHVyZXMiKQ0KICAgICAgICBmb3IgaSwgc3ViaiBpbiBlbnVtZXJhdGUoc3VianMpOg0KICAgICAgICAgICAgcHJvZ3Jlc3NfYmFyLnVwZGF0ZSgxKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgaWYgJ21zaV9mZWF0dXJlcycgaW4gc2VsZi5kYXRhLmdldChzdWJqKToNCiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZXMgPSBzZWxmLmRhdGEuZ2V0KHN1YmopLmdldCgnbXNpX2ZlYXR1cmVzJykNCiAgICAgICAgICAgICAgICAgICAgaWYgJ2Vycm9yJyBub3QgaW4gZmVhdHVyZXM6DQogICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlc19kZiA9IHBkLkRhdGFGcmFtZS5mcm9tX2RpY3QoZmVhdHVyZXMsIG9yaWVudD0naW5kZXgnKS5UDQogICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlc19kZi5pbmRleCA9IFtzdWJqXQ0KICAgICAgICAgICAgICAgICAgICAgICAgbXNpX2ZlYXR1cmVzX2xpc3QuYXBwZW5kKGZlYXR1cmVzX2RmKQ0KICAgICAgICAgICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2luZy5lcnJvcihmIuWPl+ivleiAhSB7c3Vian0g55qETVNJ54m55b6B5o+Q5Y+W5Ye66ZSZOiB7ZmVhdHVyZXNbJ2Vycm9yJ119IikNCiAgICAgICAgICAgICAgICAgICAgICAgICMg5aaC5p6c5bey57uP5pyJ5YW25LuW5Y+X6K+V6ICF5oiQ5Yqf5aSE55CG77yM5Yib5bu65LiA5Liq56m6RGF0YUZyYW1lDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBsZW4obXNpX2ZlYXR1cmVzX2xpc3QpID4gMDoNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbXB0eV9kZiA9IHBkLkRhdGFGcmFtZSgNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YT1ucC5uYW4sIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmRleD1bc3Vial0sIA0KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zPW1zaV9mZWF0dXJlc19saXN0WzBdLmNvbHVtbnMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICApDQogICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNpX2ZlYXR1cmVzX2xpc3QuYXBwZW5kKGVtcHR5X2RmKQ0KICAgICAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiLlj5for5XogIUge3N1Ymp9IOayoeaciU1TSeeJueW+geaVsOaNriIpDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgbG9nZ2luZy5lcnJvcihmIuWkhOeQhuWPl+ivleiAhSB7c3Vian0g55qETVNJ54m55b6B5pe25Ye66ZSZOiB7c3RyKGUpfSIpDQogICAgICAgICAgICAgICAgIyDlpoLmnpzlt7Lnu4/mnInlhbbku5blj5for5XogIXmiJDlip/lpITnkIbvvIzliJvlu7rkuIDkuKrnqbpEYXRhRnJhbWUNCiAgICAgICAgICAgICAgICBpZiBsZW4obXNpX2ZlYXR1cmVzX2xpc3QpID4gMDoNCiAgICAgICAgICAgICAgICAgICAgZW1wdHlfZGYgPSBwZC5EYXRhRnJhbWUoDQogICAgICAgICAgICAgICAgICAgICAgICBkYXRhPW5wLm5hbiwgDQogICAgICAgICAgICAgICAgICAgICAgICBpbmRleD1bc3Vial0sIA0KICAgICAgICAgICAgICAgICAgICAgICAgY29sdW1ucz1tc2lfZmVhdHVyZXNfbGlzdFswXS5jb2x1bW5zDQogICAgICAgICAgICAgICAgICAgICkNCiAgICAgICAgICAgICAgICAgICAgbXNpX2ZlYXR1cmVzX2xpc3QuYXBwZW5kKGVtcHR5X2RmKQ0KICAgICAgICANCiAgICAgICAgaWYgbGVuKG1zaV9mZWF0dXJlc19saXN0KSA+IDA6DQogICAgICAgICAgICBtc2lfZmVhdHVyZXNfZGYgPSBwZC5jb25jYXQobXNpX2ZlYXR1cmVzX2xpc3QpDQogICAgICAgICAgICBvdXRfZmlsZSA9IG9zLnBhdGguam9pbihzZWxmLm91dF9kaXIsICJtc2lfZmVhdHVyZXMuY3N2IikNCiAgICAgICAgICAgIG1zaV9mZWF0dXJlc19kZi50b19jc3Yob3V0X2ZpbGUsIGluZGV4PVRydWUpDQogICAgICAgICAgICBsb2dnaW5nLmluZm8oZiLlt7Lkv53lrZhNU0nnibnlvoHliLAge291dF9maWxlfSIpDQogICAgICAgICAgICByZXR1cm4gbXNpX2ZlYXR1cmVzX2RmDQogICAgICAgIGVsc2U6DQogICAgICAgICAgICBsb2dnaW5nLmVycm9yKCLmsqHmnInmnInmlYjnmoRNU0nnibnlvoHmlbDmja4iKQ0KICAgICAgICAgICAgcmV0dXJuIE5vbmU=').decode())
