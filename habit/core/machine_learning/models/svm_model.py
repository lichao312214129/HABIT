
import base64
exec(base64.b64decode(b'IiIiDQpTVk0gTW9kZWwNCg0KV3JhcHBlciBmb3Igc2tsZWFybidzIFNWQyBtb2RlbA0KIiIiDQpmcm9tIHNrbGVhcm4uc3ZtIGltcG9ydCBTVkMNCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBBbnksIE9wdGlvbmFsLCBVbmlvbg0KaW1wb3J0IG51bXB5IGFzIG5wDQppbXBvcnQgcGFuZGFzIGFzIHBkDQpmcm9tIC5iYXNlIGltcG9ydCBCYXNlTW9kZWwNCmZyb20gLmZhY3RvcnkgaW1wb3J0IE1vZGVsRmFjdG9yeQ0KDQpATW9kZWxGYWN0b3J5LnJlZ2lzdGVyKCdTVk0nKQ0KY2xhc3MgU1ZNTW9kZWwoQmFzZU1vZGVsKToNCiAgICAiIiJXcmFwcGVyIGZvciBza2xlYXJuJ3MgU1ZDIG1vZGVsIiIiDQogICAgDQogICAgZGVmIF9faW5pdF9fKHNlbGYsIGNvbmZpZzogRGljdFtzdHIsIEFueV0pOg0KICAgICAgICAiIiINCiAgICAgICAgSW5pdGlhbGl6ZSB0aGUgbW9kZWwNCiAgICAgICAgDQogICAgICAgIEFyZ3M6DQogICAgICAgICAgICBjb25maWc6IENvbmZpZ3VyYXRpb24gZGljdGlvbmFyeSB3aXRoIG1vZGVsIHBhcmFtZXRlcnMNCiAgICAgICAgIiIiDQogICAgICAgIHN1cGVyKCkuX19pbml0X18oY29uZmlnKQ0KICAgICAgICANCiAgICAgICAgIyBFeHRyYWN0IHBhcmFtZXRlcnMgZnJvbSBjb25maWcNCiAgICAgICAgcGFyYW1zID0gY29uZmlnLmdldCgncGFyYW1zJywge30pDQogICAgICAgIA0KICAgICAgICAjIENyZWF0ZSBtb2RlbCB3aXRoIHBhcmFtZXRlcnMNCiAgICAgICAgc2VsZi5tb2RlbCA9IFNWQygNCiAgICAgICAgICAgIEM9cGFyYW1zLmdldCgnQycsIDEuMCksDQogICAgICAgICAgICBrZXJuZWw9cGFyYW1zLmdldCgna2VybmVsJywgJ3JiZicpLA0KICAgICAgICAgICAgZGVncmVlPXBhcmFtcy5nZXQoJ2RlZ3JlZScsIDMpLA0KICAgICAgICAgICAgZ2FtbWE9cGFyYW1zLmdldCgnZ2FtbWEnLCAnc2NhbGUnKSwNCiAgICAgICAgICAgIHByb2JhYmlsaXR5PXBhcmFtcy5nZXQoJ3Byb2JhYmlsaXR5JywgVHJ1ZSksDQogICAgICAgICAgICByYW5kb21fc3RhdGU9cGFyYW1zLmdldCgncmFuZG9tX3N0YXRlJywgNDIpLA0KICAgICAgICAgICAgY2xhc3Nfd2VpZ2h0PXBhcmFtcy5nZXQoJ2NsYXNzX3dlaWdodCcsIE5vbmUpLA0KICAgICAgICAgICAgKip7azogdiBmb3IgaywgdiBpbiBwYXJhbXMuaXRlbXMoKSBpZiBrIG5vdCBpbiBbJ0MnLCAna2VybmVsJywgJ2RlZ3JlZScsICdnYW1tYScsICdwcm9iYWJpbGl0eScsICdyYW5kb21fc3RhdGUnLCAnY2xhc3Nfd2VpZ2h0J119DQogICAgICAgICkNCiAgICAgICAgDQogICAgZGVmIGZpdChzZWxmLCBYOiBVbmlvbltwZC5EYXRhRnJhbWUsIG5wLm5kYXJyYXldLCANCiAgICAgICAgICAgICB5OiBVbmlvbltwZC5TZXJpZXMsIG5wLm5kYXJyYXldKSAtPiBOb25lOg0KICAgICAgICAiIiINCiAgICAgICAgVHJhaW4gdGhlIG1vZGVsDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgWDogVHJhaW5pbmcgZmVhdHVyZXMNCiAgICAgICAgICAgIHk6IFRyYWluaW5nIGxhYmVscw0KICAgICAgICAiIiINCiAgICAgICAgIyBTYXZlIGZlYXR1cmUgbmFtZXMgaWYgWCBpcyBhIERhdGFGcmFtZQ0KICAgICAgICBpZiBpc2luc3RhbmNlKFgsIHBkLkRhdGFGcmFtZSk6DQogICAgICAgICAgICBzZWxmLmZlYXR1cmVfbmFtZXMgPSBsaXN0KFguY29sdW1ucykNCiAgICAgICAgDQogICAgICAgICMgVHJhaW4gdGhlIG1vZGVsDQogICAgICAgIHNlbGYubW9kZWwuZml0KFgsIHkpDQogICAgICAgIA0KICAgIGRlZiBwcmVkaWN0KHNlbGYsIFg6IFVuaW9uW3BkLkRhdGFGcmFtZSwgbnAubmRhcnJheV0pIC0+IG5wLm5kYXJyYXk6DQogICAgICAgICIiIg0KICAgICAgICBNYWtlIHByZWRpY3Rpb25zDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgWDogRmVhdHVyZXMNCiAgICAgICAgICAgIA0KICAgICAgICBSZXR1cm5zOg0KICAgICAgICAgICAgbnAubmRhcnJheTogUHJlZGljdGVkIGNsYXNzIGxhYmVscw0KICAgICAgICAiIiINCiAgICAgICAgaWYgc2VsZi5tb2RlbCBpcyBOb25lOg0KICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiTW9kZWwgbm90IHRyYWluZWQuIENhbGwgdHJhaW4oKSBmaXJzdC4iKQ0KICAgICAgICByZXR1cm4gc2VsZi5tb2RlbC5wcmVkaWN0KFgpDQogICAgICAgIA0KICAgIGRlZiBwcmVkaWN0X3Byb2JhKHNlbGYsIFg6IFVuaW9uW3BkLkRhdGFGcmFtZSwgbnAubmRhcnJheV0pIC0+IG5wLm5kYXJyYXk6DQogICAgICAgICIiIg0KICAgICAgICBHZXQgcHJlZGljdGlvbiBwcm9iYWJpbGl0aWVzDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgWDogRmVhdHVyZXMNCiAgICAgICAgICAgIA0KICAgICAgICBSZXR1cm5zOg0KICAgICAgICAgICAgbnAubmRhcnJheTogUHJlZGljdGVkIHByb2JhYmlsaXRpZXMgZm9yIHBvc2l0aXZlIGNsYXNzDQogICAgICAgICIiIg0KICAgICAgICBpZiBzZWxmLm1vZGVsIGlzIE5vbmU6DQogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJNb2RlbCBub3QgdHJhaW5lZC4gQ2FsbCB0cmFpbigpIGZpcnN0LiIpDQogICAgICAgICAgICANCiAgICAgICAgIyBDaGVjayBpZiBwcm9iYWJpbGl0eT1UcnVlIHdhcyBzZXQgZHVyaW5nIGluaXRpYWxpemF0aW9uDQogICAgICAgIGlmIG5vdCBoYXNhdHRyKHNlbGYubW9kZWwsICdwcmVkaWN0X3Byb2JhJyk6DQogICAgICAgICAgICAjIFVzZSBkZWNpc2lvbiBmdW5jdGlvbiBhbmQgY29udmVydCB0byBwcm9iYWJpbGl0eQ0KICAgICAgICAgICAgZGVjaXNpb25fdmFsdWVzID0gc2VsZi5tb2RlbC5kZWNpc2lvbl9mdW5jdGlvbihYKQ0KICAgICAgICAgICAgcmV0dXJuIDEgLyAoMSArIG5wLmV4cCgtZGVjaXNpb25fdmFsdWVzKSkNCiAgICAgICAgICAgIA0KICAgICAgICByZXR1cm4gc2VsZi5tb2RlbC5wcmVkaWN0X3Byb2JhKFgpDQogICAgICAgIA0KICAgIGRlZiBnZXRfZmVhdHVyZV9pbXBvcnRhbmNlKHNlbGYpIC0+IERpY3Rbc3RyLCBmbG9hdF06DQogICAgICAgICIiIg0KICAgICAgICBHZXQgZmVhdHVyZSBpbXBvcnRhbmNlIHNjb3Jlcw0KICAgICAgICANCiAgICAgICAgUmV0dXJuczoNCiAgICAgICAgICAgIERpY3Rbc3RyLCBmbG9hdF06IEZlYXR1cmUgaW1wb3J0YW5jZSBzY29yZXMNCiAgICAgICAgIiIiDQogICAgICAgIGlmIHNlbGYubW9kZWwgaXMgTm9uZToNCiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIk1vZGVsIG5vdCB0cmFpbmVkLiBDYWxsIHRyYWluKCkgZmlyc3QuIikNCiAgICAgICAgICAgIA0KICAgICAgICAjIEZvciBsaW5lYXIgU1ZNLCBjb2VmZmljaWVudHMgY2FuIGJlIHVzZWQgYXMgZmVhdHVyZSBpbXBvcnRhbmNlDQogICAgICAgIGlmIGhhc2F0dHIoc2VsZi5tb2RlbCwgJ2NvZWZfJykgYW5kIHNlbGYubW9kZWwua2VybmVsID09ICdsaW5lYXInOg0KICAgICAgICAgICAgIyBHZXQgZmVhdHVyZSBuYW1lcw0KICAgICAgICAgICAgZmVhdHVyZV9uYW1lcyA9IHNlbGYuZmVhdHVyZV9uYW1lcyBvciBbZiJmZWF0dXJlX3tpfSIgZm9yIGkgaW4gcmFuZ2Uoc2VsZi5tb2RlbC5jb2VmXy5zaGFwZVsxXSldDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgR2V0IGNvZWZmaWNpZW50cw0KICAgICAgICAgICAgY29lZiA9IHNlbGYubW9kZWwuY29lZl9bMF0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBSZXR1cm4gYXMgZGljdGlvbmFyeQ0KICAgICAgICAgICAgcmV0dXJuIGRpY3QoemlwKGZlYXR1cmVfbmFtZXMsIGNvZWYpKQ0KICAgICAgICANCiAgICAgICAgIyBGb3Igbm9uLWxpbmVhciBTVk0sIHRoZXJlJ3Mgbm8gZGlyZWN0IGZlYXR1cmUgaW1wb3J0YW5jZQ0KICAgICAgICAjIFdlIGNvdWxkIGltcGxlbWVudCBwZXJtdXRhdGlvbiBpbXBvcnRhbmNlIG9yIG90aGVyIG1ldGhvZHMgaGVyZQ0KICAgICAgICByZXR1cm4ge30g').decode())
