
import base64
exec(base64.b64decode(b'ZnJvbSB0eXBpbmcgaW1wb3J0IERpY3QsIEFueSwgVW5pb24sIExpc3QsIE9wdGlvbmFsLCBTZXF1ZW5jZSwgVHVwbGUNCmltcG9ydCB0b3JjaA0KaW1wb3J0IG51bXB5IGFzIG5wDQpmcm9tIC5iYXNlX3ByZXByb2Nlc3NvciBpbXBvcnQgQmFzZVByZXByb2Nlc3Nvcg0KZnJvbSAucHJlcHJvY2Vzc29yX2ZhY3RvcnkgaW1wb3J0IFByZXByb2Nlc3NvckZhY3RvcnkNCg0KQFByZXByb2Nlc3NvckZhY3RvcnkucmVnaXN0ZXIoImN1c3RvbV9wcmVwcm9jZXNzb3IiKQ0KY2xhc3MgQ3VzdG9tUHJlcHJvY2Vzc29yKEJhc2VQcmVwcm9jZXNzb3IpOg0KICAgICIiIlRlbXBsYXRlIGZvciBjcmVhdGluZyBjdXN0b20gcHJlcHJvY2Vzc29ycy4NCiAgICANCiAgICBUaGlzIGNsYXNzIHNlcnZlcyBhcyBhIHRlbXBsYXRlIGZvciB1c2VycyB0byBjcmVhdGUgdGhlaXIgb3duIHByZXByb2Nlc3NvcnMuDQogICAgVXNlcnMgc2hvdWxkOg0KICAgIDEuIENvcHkgdGhpcyBmaWxlIGFuZCByZW5hbWUgaXQNCiAgICAyLiBDaGFuZ2UgdGhlIGNsYXNzIG5hbWUgYW5kIHJlZ2lzdHJhdGlvbiBuYW1lDQogICAgMy4gSW1wbGVtZW50IHRoZSBfX2NhbGxfXyBtZXRob2Qgd2l0aCB0aGVpciBjdXN0b20gcHJlcHJvY2Vzc2luZyBsb2dpYw0KICAgIDQuIEFkZCBhbnkgbmVjZXNzYXJ5IGhlbHBlciBtZXRob2RzIGZvciBwcmVwcm9jZXNzaW5nDQogICAgDQogICAgRXhhbXBsZToNCiAgICAgICAgQFByZXByb2Nlc3NvckZhY3RvcnkucmVnaXN0ZXIoIm15X3ByZXByb2Nlc3NvciIpDQogICAgICAgIGNsYXNzIE15UHJlcHJvY2Vzc29yKEJhc2VQcmVwcm9jZXNzb3IpOg0KICAgICAgICAgICAgZGVmIF9faW5pdF9fKHNlbGYsIGtleXMsIHBhcmFtMSwgcGFyYW0yLCAqKmt3YXJncyk6DQogICAgICAgICAgICAgICAgc3VwZXIoKS5fX2luaXRfXyhrZXlzPWtleXMpDQogICAgICAgICAgICAgICAgc2VsZi5wYXJhbTEgPSBwYXJhbTENCiAgICAgICAgICAgICAgICBzZWxmLnBhcmFtMiA9IHBhcmFtMg0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgZGVmIF9fY2FsbF9fKHNlbGYsIGRhdGEpOg0KICAgICAgICAgICAgICAgIHNlbGYuX2NoZWNrX2tleXMoZGF0YSkNCiAgICAgICAgICAgICAgICBmb3Iga2V5IGluIHNlbGYua2V5czoNCiAgICAgICAgICAgICAgICAgICAgZGF0YVtrZXldID0gc2VsZi5fcHJvY2Vzc19pbWFnZShkYXRhW2tleV0pDQogICAgICAgICAgICAgICAgcmV0dXJuIGRhdGENCiAgICAiIiINCiAgICANCiAgICBkZWYgX19pbml0X18oc2VsZiwga2V5czogVW5pb25bc3RyLCBMaXN0W3N0cl1dLCBhbGxvd19taXNzaW5nX2tleXM6IGJvb2wgPSBGYWxzZSwgKiprd2FyZ3M6IEFueSk6DQogICAgICAgICIiIkluaXRpYWxpemUgdGhlIGN1c3RvbSBwcmVwcm9jZXNzb3IuDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAga2V5cyAoVW5pb25bc3RyLCBMaXN0W3N0cl1dKTogS2V5cyBvZiB0aGUgY29ycmVzcG9uZGluZyBpdGVtcyB0byBiZSB0cmFuc2Zvcm1lZC4NCiAgICAgICAgICAgICAgICBJZiBhIHNpbmdsZSBzdHJpbmcgaXMgcHJvdmlkZWQsIGl0IHdpbGwgYmUgY29udmVydGVkIHRvIGEgbGlzdC4NCiAgICAgICAgICAgIGFsbG93X21pc3Npbmdfa2V5cyAoYm9vbCk6IElmIFRydWUsIGFsbG93cyBtaXNzaW5nIGtleXMgaW4gdGhlIGlucHV0IGRhdGEuDQogICAgICAgICAgICAqKmt3YXJnczogQWRkaXRpb25hbCBhcmd1bWVudHMgc3BlY2lmaWMgdG8gdGhlIGN1c3RvbSBwcmVwcm9jZXNzb3IuDQogICAgICAgICAgICAgICAgVGhlc2Ugc2hvdWxkIGJlIGRvY3VtZW50ZWQgaW4gdGhlIGNsYXNzIGRvY3N0cmluZy4NCiAgICAgICAgIiIiDQogICAgICAgIHN1cGVyKCkuX19pbml0X18oa2V5cz1rZXlzLCBhbGxvd19taXNzaW5nX2tleXM9YWxsb3dfbWlzc2luZ19rZXlzKQ0KICAgICAgICANCiAgICAgICAgIyBDb252ZXJ0IHNpbmdsZSBrZXkgdG8gbGlzdA0KICAgICAgICBpZiBpc2luc3RhbmNlKGtleXMsIHN0cik6DQogICAgICAgICAgICBrZXlzID0gW2tleXNdDQogICAgICAgIHNlbGYua2V5cyA9IGtleXMNCiAgICAgICAgDQogICAgICAgICMgQWRkIGFueSBhZGRpdGlvbmFsIGluaXRpYWxpemF0aW9uIGhlcmUNCiAgICAgICAgIyBFeGFtcGxlOg0KICAgICAgICAjIHNlbGYucGFyYW0xID0ga3dhcmdzLnBvcCgncGFyYW0xJywgZGVmYXVsdF92YWx1ZSkNCiAgICAgICAgIyBzZWxmLnBhcmFtMiA9IGt3YXJncy5wb3AoJ3BhcmFtMicsIGRlZmF1bHRfdmFsdWUpDQogICAgICAgIA0KICAgIGRlZiBfX2NhbGxfXyhzZWxmLCBkYXRhOiBEaWN0W3N0ciwgQW55XSkgLT4gRGljdFtzdHIsIEFueV06DQogICAgICAgICIiIlByb2Nlc3MgdGhlIGlucHV0IGRhdGEgd2l0aCBjdXN0b20gcHJlcHJvY2Vzc2luZyBsb2dpYy4NCiAgICAgICAgDQogICAgICAgIEFyZ3M6DQogICAgICAgICAgICBkYXRhIChEaWN0W3N0ciwgQW55XSk6IElucHV0IGRhdGEgZGljdGlvbmFyeSBjb250YWluaW5nIGltYWdlIGFuZCBtZXRhZGF0YS4NCiAgICAgICAgICAgICAgICBUaGUgdmFsdWVzIGZvciBrZXlzIHNob3VsZCBiZSBpbiB0aGUgZXhwZWN0ZWQgZm9ybWF0IChlLmcuLCBTaW1wbGVJVEsgSW1hZ2Ugb2JqZWN0cywNCiAgICAgICAgICAgICAgICBudW1weSBhcnJheXMsIG9yIHRvcmNoIHRlbnNvcnMpLg0KICAgICAgICAgICAgDQogICAgICAgIFJldHVybnM6DQogICAgICAgICAgICBEaWN0W3N0ciwgQW55XTogUHJvY2Vzc2VkIGRhdGEgZGljdGlvbmFyeSB3aXRoIHRoZSBzYW1lIHN0cnVjdHVyZSBhcyBpbnB1dC4NCiAgICAgICAgICAgIA0KICAgICAgICBFeGFtcGxlOg0KICAgICAgICAgICAgIyAxLiBDaGVjayBpZiByZXF1aXJlZCBrZXlzIGFyZSBwcmVzZW50DQogICAgICAgICAgICBzZWxmLl9jaGVja19rZXlzKGRhdGEpDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgMi4gUHJvY2VzcyBlYWNoIGtleQ0KICAgICAgICAgICAgZm9yIGtleSBpbiBzZWxmLmtleXM6DQogICAgICAgICAgICAgICAgIyBHZXQgdGhlIGRhdGENCiAgICAgICAgICAgICAgICBpdGVtID0gZGF0YVtrZXldDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgIyBQcm9jZXNzIHRoZSBkYXRhDQogICAgICAgICAgICAgICAgcHJvY2Vzc2VkX2l0ZW0gPSBzZWxmLl9wcm9jZXNzX2l0ZW0oaXRlbSkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjIFVwZGF0ZSB0aGUgZGF0YSBkaWN0aW9uYXJ5DQogICAgICAgICAgICAgICAgZGF0YVtrZXldID0gcHJvY2Vzc2VkX2l0ZW0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjIFVwZGF0ZSBtZXRhZGF0YSBpZiBuZWNlc3NhcnkNCiAgICAgICAgICAgICAgICBtZXRhX2tleSA9IGYie2tleX1fbWV0YV9kaWN0Ig0KICAgICAgICAgICAgICAgIGlmIG1ldGFfa2V5IGluIGRhdGE6DQogICAgICAgICAgICAgICAgICAgIGRhdGFbbWV0YV9rZXldWyJwcm9jZXNzZWQiXSA9IFRydWUNCiAgICAgICAgICAgICAgICAgICAgZGF0YVttZXRhX2tleV1bInByb2Nlc3NvciJdID0gc2VsZi5fX2NsYXNzX18uX19uYW1lX18NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgIHJldHVybiBkYXRhDQogICAgICAgICIiIg0KICAgICAgICAjIEltcGxlbWVudCB5b3VyIGN1c3RvbSBwcmVwcm9jZXNzaW5nIGxvZ2ljIGhlcmUNCiAgICAgICAgcGFzcw0KICAgICAgICANCiAgICBkZWYgX3Byb2Nlc3NfaXRlbShzZWxmLCBpdGVtOiBBbnkpIC0+IEFueToNCiAgICAgICAgIiIiUHJvY2VzcyBhIHNpbmdsZSBpdGVtIHdpdGggY3VzdG9tIHByZXByb2Nlc3NpbmcgbG9naWMuDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgaXRlbSAoQW55KTogSW5wdXQgaXRlbSB0byBiZSBwcm9jZXNzZWQuIFRoZSB0eXBlIHNob3VsZCBiZSBkb2N1bWVudGVkDQogICAgICAgICAgICAgICAgYmFzZWQgb24geW91ciBzcGVjaWZpYyB1c2UgY2FzZSAoZS5nLiwgdG9yY2guVGVuc29yLCBucC5uZGFycmF5LCBzaXRrLkltYWdlKS4NCiAgICAgICAgICAgIA0KICAgICAgICBSZXR1cm5zOg0KICAgICAgICAgICAgQW55OiBQcm9jZXNzZWQgaXRlbSBpbiB0aGUgc2FtZSBmb3JtYXQgYXMgaW5wdXQuDQogICAgICAgICAgICANCiAgICAgICAgRXhhbXBsZToNCiAgICAgICAgICAgICMgQWRkIHlvdXIgcHJlcHJvY2Vzc2luZyBsb2dpYyBoZXJlDQogICAgICAgICAgICAjIEV4YW1wbGUgZm9yIGltYWdlIHByb2Nlc3Npbmc6DQogICAgICAgICAgICAjIDEuIENvbnZlcnQgdG8gYXBwcm9wcmlhdGUgZm9ybWF0IGlmIG5lZWRlZA0KICAgICAgICAgICAgIyAyLiBBcHBseSB0cmFuc2Zvcm1hdGlvbnMNCiAgICAgICAgICAgICMgMy4gUmV0dXJuIHByb2Nlc3NlZCBpdGVtDQogICAgICAgICAgICByZXR1cm4gaXRlbQ0KICAgICAgICAiIiINCiAgICAgICAgIyBBZGQgeW91ciBwcmVwcm9jZXNzaW5nIGxvZ2ljIGhlcmUNCiAgICAgICAgcmV0dXJuIGl0ZW0g').decode())
