
import base64
exec(base64.b64decode(b'IiIiCkJhdGNoIHByb2Nlc3NpbmcgbW9kdWxlIGZvciBtZWRpY2FsIGltYWdlIHByZXByb2Nlc3NpbmcuCgpUaGlzIG1vZHVsZSBwcm92aWRlcyBmdW5jdGlvbmFsaXR5IGZvciBwYXJhbGxlbCBiYXRjaCBwcm9jZXNzaW5nIG9mIG1lZGljYWwgaW1hZ2VzCnVzaW5nIG11bHRpcGxlIHByZXByb2Nlc3Npbmcgc3RlcHMgZGVmaW5lZCBpbiBhIGNvbmZpZ3VyYXRpb24gZmlsZS4KCkV4YW1wbGU6CiAgICA+Pj4gZnJvbSBoYWJpdC5jb3JlLnByZXByb2Nlc3NpbmcuaW1hZ2VfcHJvY2Vzc29yX3BpcGVsaW5lIGltcG9ydCBCYXRjaFByb2Nlc3NvcgogICAgPj4+IHByb2Nlc3NvciA9IEJhdGNoUHJvY2Vzc29yKGNvbmZpZ19wYXRoPSIuL2NvbmZpZy9jb25maWdfa21lYW5zLnlhbWwiKQogICAgPj4+IHByb2Nlc3Nvci5wcm9jZXNzX2JhdGNoKCkKIiIiCgpmcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgTGlzdCwgT3B0aW9uYWwsIFVuaW9uLCBDYWxsYWJsZQppbXBvcnQgbG9nZ2luZwpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgKaW1wb3J0IFNpbXBsZUlUSyBhcyBzaXRrCmltcG9ydCBudW1weSBhcyBucAppbXBvcnQgb3MKZnJvbSBoYWJpdC5jb3JlLnByZXByb2Nlc3NpbmcucHJlcHJvY2Vzc29yX2ZhY3RvcnkgaW1wb3J0IFByZXByb2Nlc3NvckZhY3RvcnkKZnJvbSBoYWJpdC51dGlscy5pb191dGlscyBpbXBvcnQgZ2V0X2ltYWdlX2FuZF9tYXNrX3BhdGhzCmZyb20gaGFiaXQudXRpbHMucHJvZ3Jlc3NfdXRpbHMgaW1wb3J0IEN1c3RvbVRxZG0KZnJvbSBoYWJpdC51dGlscy5jb25maWdfdXRpbHMgaW1wb3J0IGxvYWRfY29uZmlnCmltcG9ydCBtdWx0aXByb2Nlc3NpbmcKaW1wb3J0IHRyYWNlYmFjawpmcm9tIGhhYml0LmNvcmUucHJlcHJvY2Vzc2luZy5sb2FkX2ltYWdlIGltcG9ydCBMb2FkSW1hZ2VQcmVwcm9jZXNzb3IKCgpjbGFzcyBCYXRjaFByb2Nlc3NvcjoKICAgICIiIkJhdGNoIHByb2Nlc3NvciBmb3IgbWVkaWNhbCBpbWFnZSBwcmVwcm9jZXNzaW5nLgogICAgCiAgICBUaGlzIGNsYXNzIGhhbmRsZXMgcGFyYWxsZWwgcHJvY2Vzc2luZyBvZiBtZWRpY2FsIGltYWdlcyB1c2luZyBtdWx0aXBsZSBwcmVwcm9jZXNzaW5nCiAgICBzdGVwcyBkZWZpbmVkIGluIGEgY29uZmlndXJhdGlvbiBmaWxlLiBJdCBzdXBwb3J0cyBwcm9jZXNzaW5nIG11bHRpcGxlIHN1YmplY3RzIGFuZAogICAgbXVsdGlwbGUgdGltZSBwb2ludHMgZm9yIGVhY2ggc3ViamVjdC4KICAgIAogICAgQXR0cmlidXRlczoKICAgICAgICBjb25maWcgKERpY3QpOiBDb25maWd1cmF0aW9uIGRpY3Rpb25hcnkgY29udGFpbmluZyBwcmVwcm9jZXNzaW5nIHN0ZXBzLgogICAgICAgIG51bV93b3JrZXJzIChpbnQpOiBOdW1iZXIgb2Ygd29ya2VyIHByb2Nlc3NlcyBmb3IgcGFyYWxsZWwgcHJvY2Vzc2luZy4KICAgICIiIgogICAgCiAgICBkZWYgX19pbml0X18oCiAgICAgICAgc2VsZiwKICAgICAgICBjb25maWdfcGF0aDogVW5pb25bc3RyLCBQYXRoXSwKICAgICAgICBudW1fd29ya2VyczogT3B0aW9uYWxbaW50XSA9IDEsCiAgICAgICAgbG9nX2xldmVsOiBzdHIgPSAiSU5GTyIsCiAgICAgICAgdmVyYm9zZTogYm9vbCA9IFRydWUKICAgICk6CiAgICAgICAgIiIiSW5pdGlhbGl6ZSB0aGUgYmF0Y2ggcHJvY2Vzc29yLgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGNvbmZpZ19wYXRoIChVbmlvbltzdHIsIFBhdGhdKTogUGF0aCB0byB0aGUgY29uZmlndXJhdGlvbiBmaWxlLgogICAgICAgICAgICBudW1fd29ya2VycyAoT3B0aW9uYWxbaW50XSk6IE51bWJlciBvZiB3b3JrZXIgcHJvY2Vzc2VzLiBJZiBOb25lLCB1c2VzCiAgICAgICAgICAgICAgICBudW1iZXIgb2YgQ1BVIGNvcmVzIC0gMSBvbiBMaW51eC9NYWMsIG9yIDAgb24gV2luZG93cy4KICAgICAgICAgICAgbG9nX2xldmVsIChzdHIpOiBMb2dnaW5nIGxldmVsLiBEZWZhdWx0cyB0byAiSU5GTyIuCiAgICAgICAgICAgIHZlcmJvc2UgKGJvb2wpOiBXaGV0aGVyIHRvIHByaW50IHZlcmJvc2Ugb3V0cHV0LiBEZWZhdWx0cyB0byBUcnVlLgogICAgICAgICIiIgogICAgICAgIHNlbGYuY29uZmlnID0gbG9hZF9jb25maWcoY29uZmlnX3BhdGgpCiAgICAgICAgc2VsZi5vdXRwdXRfcm9vdCA9IFBhdGgoc2VsZi5jb25maWdbIm91dF9kaXIiXSkKICAgICAgICBzZWxmLm91dHB1dF9yb290Lm1rZGlyKHBhcmVudHM9VHJ1ZSwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICAjIOS4jeWGjeWIm+W7uuWFqOWxgOmihOWkhOeQhuWZqO+8jOiAjOaYr+S4uuavj+S4quagt+acrOWNleeLrOWIm+W7ugogICAgICAgIHNlbGYudmVyYm9zZSA9IHZlcmJvc2UKICAgICAgICBzZWxmLl9zZXR1cF9sb2dnaW5nKGxvZ19sZXZlbCkKICAgICAgICAKICAgICAgICAjIFVzZSBjb25maWcgdmFsdWUgb3IgZGVmYXVsdCB0byAwIGlmIG5vdCBzcGVjaWZpZWQgb3IgaW52YWxpZAogICAgICAgIHRyeToKICAgICAgICAgICAgc2VsZi5udW1fd29ya2VycyA9IGludChzZWxmLmNvbmZpZy5nZXQoInByb2Nlc3NlcyIsIG51bV93b3JrZXJzKSkKICAgICAgICAgICAgc2VsZi5udW1fd29ya2VycyA9IG1pbihzZWxmLm51bV93b3JrZXJzLCBtdWx0aXByb2Nlc3NpbmcuY3B1X2NvdW50KCkgLSAyKQogICAgICAgICAgICAjIOehruS/neacgOWwj+S4ujHkuKrov5vnqIvvvIzljbPkvb/orr7nva7kuLow5Lmf5L2/55SoMeS4qgogICAgICAgICAgICBpZiBzZWxmLm51bV93b3JrZXJzIDw9IDA6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci53YXJuaW5nKGYiU2V0dGluZyBudW1fd29ya2VycyB0byAxICh3YXMge3NlbGYubnVtX3dvcmtlcnN9KSIpCiAgICAgICAgICAgICAgICBzZWxmLm51bV93b3JrZXJzID0gMQogICAgICAgIGV4Y2VwdCAoVmFsdWVFcnJvciwgVHlwZUVycm9yKToKICAgICAgICAgICAgc2VsZi5sb2dnZXIud2FybmluZyhmIkludmFsaWQgJ3Byb2Nlc3NlcycgdHlwZSBpbiBjb25maWcsIGRlZmF1bHRpbmcgdG8gMS4iKQogICAgICAgICAgICBzZWxmLm51bV93b3JrZXJzID0gMQoKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYiVXNpbmcge3NlbGYubnVtX3dvcmtlcnN9IHdvcmtlciBwcm9jZXNzZXMuIikKICAgICAgICAgICAgCiAgICBkZWYgX3NldHVwX2xvZ2dpbmcoc2VsZiwgbG9nX2xldmVsOiBzdHIpIC0+IE5vbmU6CiAgICAgICAgIiIiU2V0dXAgbG9nZ2luZyBjb25maWd1cmF0aW9uLgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIGxvZ19sZXZlbCAoc3RyKTogTG9nZ2luZyBsZXZlbC4KICAgICAgICAiIiIKICAgICAgICAjIENyZWF0ZSBmb3JtYXR0ZXIKICAgICAgICBmb3JtYXR0ZXIgPSBsb2dnaW5nLkZvcm1hdHRlcignJShhc2N0aW1lKXMgLSAlKG5hbWUpcyAtICUobGV2ZWxuYW1lKXMgLSAlKG1lc3NhZ2UpcycpCiAgICAgICAgCiAgICAgICAgIyBTZXR1cCBsb2dnZXIKICAgICAgICBzZWxmLmxvZ2dlciA9IGxvZ2dpbmcuZ2V0TG9nZ2VyKF9fbmFtZV9fKQogICAgICAgIHNlbGYubG9nZ2VyLnNldExldmVsKGdldGF0dHIobG9nZ2luZywgbG9nX2xldmVsLnVwcGVyKCkpKQogICAgICAgIAogICAgICAgICMgQ2xlYXIgYW55IGV4aXN0aW5nIGhhbmRsZXJzCiAgICAgICAgc2VsZi5sb2dnZXIuaGFuZGxlcnMgPSBbXQogICAgICAgIAogICAgICAgICMgQWRkIGNvbnNvbGUgaGFuZGxlcgogICAgICAgIGNvbnNvbGVfaGFuZGxlciA9IGxvZ2dpbmcuU3RyZWFtSGFuZGxlcigpCiAgICAgICAgY29uc29sZV9oYW5kbGVyLnNldEZvcm1hdHRlcihmb3JtYXR0ZXIpCiAgICAgICAgc2VsZi5sb2dnZXIuYWRkSGFuZGxlcihjb25zb2xlX2hhbmRsZXIpCiAgICAgICAgCiAgICAgICAgIyBBZGQgZmlsZSBoYW5kbGVyCiAgICAgICAgbG9nX2RpciA9IHNlbGYub3V0cHV0X3Jvb3QgLyAibG9ncyIKICAgICAgICBsb2dfZGlyLm1rZGlyKHBhcmVudHM9VHJ1ZSwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICBsb2dfZmlsZSA9IGxvZ19kaXIgLyAicHJvY2Vzc2luZy5sb2ciCiAgICAgICAgZmlsZV9oYW5kbGVyID0gbG9nZ2luZy5GaWxlSGFuZGxlcihzdHIobG9nX2ZpbGUpLCBlbmNvZGluZz0ndXRmLTgnKQogICAgICAgIGZpbGVfaGFuZGxlci5zZXRGb3JtYXR0ZXIoZm9ybWF0dGVyKQogICAgICAgIHNlbGYubG9nZ2VyLmFkZEhhbmRsZXIoZmlsZV9oYW5kbGVyKQogICAgICAgIAogICAgICAgIHNlbGYubG9nZ2VyLmluZm8oZiJMb2dnaW5nIGluaXRpYWxpemVkLiBMb2cgZmlsZToge2xvZ19maWxlfSIpCiAgICAgICAgCiAgICBkZWYgX3Byb2Nlc3Nfc2luZ2xlX3N1YmplY3Qoc2VsZiwgc3ViamVjdF9kYXRhKToKICAgICAgICAiIiLlpITnkIbljZXkuKrmoLfmnKznmoTmlbDmja7jgIIKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBzdWJqZWN0X2RhdGEgKERpY3QpOiDljZXkuKrmoLfmnKznmoTmlbDmja7lrZflhbjvvIzljIXlkKtzdWJqZWN0X2lk5ZKM6L6T5Ye655uu5b2V5L+h5oGvCgogICAgICAgIFJldHVybnM6CiAgICAgICAgICAgIHR1cGxlOiAoc3ViamVjdF9pZCwg5aSE55CG57uT5p6c5raI5oGvKQogICAgICAgICIiIgogICAgICAgIHRyeToKICAgICAgICAgICAgc3ViamVjdF9pZCA9IHN1YmplY3RfZGF0YVsnc3ViaiddCiAgICAgICAgICAgICMg5Yib5bu65Y2V54us55qE6aKE5aSE55CG566h6YGT5a6e5L6LCiAgICAgICAgICAgIHRyYW5zZm9ybXMgPSBbXSAgCgogICAgICAgICAgICAjIGFkZCBsb2FkIGltYWdlCiAgICAgICAgICAgIGxvYWRfa2V5cyA9IFtzZWxmLmNvbmZpZ1siUHJlcHJvY2Vzc2luZyJdLmdldChrKS5nZXQoImltYWdlcyIsIHt9KSBmb3IgayBpbiBzZWxmLmNvbmZpZ1siUHJlcHJvY2Vzc2luZyJdLmtleXMoKV0KICAgICAgICAgICAgbG9hZF9rZXlzID0gW2l0ZW0gZm9yIHN1Ymxpc3QgaW4gbG9hZF9rZXlzIGZvciBpdGVtIGluIHN1Ymxpc3RdCiAgICAgICAgICAgIGxvYWRfa2V5cyA9IGxpc3Qoc2V0KGxvYWRfa2V5cykpCiAgICAgICAgICAgIG1hc2tfa2V5cyA9IFtmIm1hc2tfe21vZH0iIGZvciBtb2QgaW4gbG9hZF9rZXlzXQogICAgICAgICAgICBsb2FkX2tleXMuZXh0ZW5kKG1hc2tfa2V5cykKICAgICAgICAgICAgbG9hZF9pbWFnZSA9IExvYWRJbWFnZVByZXByb2Nlc3NvcihrZXlzPWxvYWRfa2V5cykKICAgICAgICAgICAgdHJhbnNmb3Jtcy5hcHBlbmQobG9hZF9pbWFnZSkKCiAgICAgICAgICAgICMg5aSE55CG6YWN572u5Lit5a6a5LmJ55qE5q+P5Liq6aKE5aSE55CG5q2l6aqkCiAgICAgICAgICAgIGZvciBzdGVwX25hbWUsIHBhcmFtcyBpbiBzZWxmLmNvbmZpZ1siUHJlcHJvY2Vzc2luZyJdLml0ZW1zKCk6CiAgICAgICAgICAgICAgICAjIEV4dHJhY3QgbW9kYWxpdGllcyBmcm9tIHBhcmFtcwogICAgICAgICAgICAgICAgbW9kYWxpdGllcyA9IHBhcmFtcy5nZXQoImltYWdlcyIsIFtdKQogICAgICAgICAgICAgICAgaWYgbm90IG1vZGFsaXRpZXM6CiAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyDku4XlpITnkIblrZjlnKjkuo7lvZPliY1zdWJqZWN0X2RhdGHkuK3nmoRtb2RhbGl0aWVzCiAgICAgICAgICAgICAgICBtb2RhbGl0aWVzID0gW21vZCBmb3IgbW9kIGluIG1vZGFsaXRpZXMgaWYgbW9kIGluIHN1YmplY3RfZGF0YV0KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgIyDliJvlu7rpooTlpITnkIblmagKICAgICAgICAgICAgICAgIHByb2Nlc3NvciA9IFByZXByb2Nlc3NvckZhY3RvcnkuY3JlYXRlKAogICAgICAgICAgICAgICAgICAgIG5hbWU9c3RlcF9uYW1lLAogICAgICAgICAgICAgICAgICAgIGtleXM9bW9kYWxpdGllcywKICAgICAgICAgICAgICAgICAgICAqKntrOiB2IGZvciBrLCB2IGluIHBhcmFtcy5pdGVtcygpIGlmIGsgIT0gImltYWdlcyJ9CiAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1zLmFwcGVuZChwcm9jZXNzb3IpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIFJ1biBwaXBlbGluZQogICAgICAgICAgICBmb3IgdHJhbnNmb3JtIGluIHRyYW5zZm9ybXM6CiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0oc3ViamVjdF9kYXRhKQoKICAgICAgICAgICAgcmV0dXJuIGYiU3VjY2Vzczoge3N1YmplY3RfaWR9Iiwgc3ViamVjdF9kYXRhCiAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICByZXR1cm4gZiJFcnJvciBwcm9jZXNzaW5nIHtzdWJqZWN0X2RhdGEuZ2V0KCdzdWJqJywgJ3Vua25vd24nKX06IHtzdHIoZSl9XG57dHJhY2ViYWNrLmZvcm1hdF9leGMoKX0iLCBOb25lCgogICAgZGVmIHNhdmVfcHJvY2Vzc2VkX2ltYWdlcyhzZWxmLCBzdWJqZWN0X2RhdGE6IERpY3QpIC0+IE5vbmU6CiAgICAgICAgIiIiU2F2ZSBwcm9jZXNzZWQgaW1hZ2VzIHRvIHRoZWlyIHJlc3BlY3RpdmUgb3V0cHV0IGRpcmVjdG9yaWVzLgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHN1YmplY3RfZGF0YSAoRGljdCk6IERpY3Rpb25hcnkgY29udGFpbmluZyBwcm9jZXNzZWQgaW1hZ2VzIGFuZCB0aGVpciBvdXRwdXQgcGF0aHMuCiAgICAgICAgICAgICAgICBFeHBlY3RlZCBrZXlzOgogICAgICAgICAgICAgICAgLSAnb3V0cHV0X2RpcnMnOiBEaWN0IG1hcHBpbmcgbW9kYWxpdHkgbmFtZXMgdG8gb3V0cHV0IGRpcmVjdG9yeSBwYXRocwogICAgICAgICAgICAgICAgLSBPdGhlciBrZXlzIHNob3VsZCBiZSBtb2RhbGl0eSBuYW1lcyBjb250YWluaW5nIHRoZSBwcm9jZXNzZWQgaW1hZ2VzCiAgICAgICAgIiIiCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvdXRwdXRfZGlycyA9IHN1YmplY3RfZGF0YVsnb3V0cHV0X2RpcnMnXQogICAgICAgICAgICAKICAgICAgICAgICAgIyBTYXZlIGVhY2ggbW9kYWxpdHkgaW1hZ2UKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gc3ViamVjdF9kYXRhLml0ZW1zKCk6CiAgICAgICAgICAgICAgICAjIFNraXAgbm9uLWltYWdlIGtleXMKICAgICAgICAgICAgICAgIGlmIGtleSBpbiBbJ3N1YmonLCAnb3V0cHV0X2RpcnMnXSBvciBrZXkuc3RhcnRzd2l0aCgnbWFza18nKToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYga2V5IGluIG91dHB1dF9kaXJzOgogICAgICAgICAgICAgICAgICAgIG91dHB1dF9wYXRoID0gUGF0aChvdXRwdXRfZGlyc1trZXldKQogICAgICAgICAgICAgICAgICAgIG91dHB1dF9wYXRoLm1rZGlyKHBhcmVudHM9VHJ1ZSwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAjIEdldCB0aGUgaW1hZ2UgZGF0YQogICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIChucC5uZGFycmF5LCBzaXRrLkltYWdlKSk6CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2UodmFsdWUsIG5wLm5kYXJyYXkpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgIyBDb252ZXJ0IG51bXB5IGFycmF5IHRvIFNpbXBsZUlUSyBpbWFnZSBpZiBuZWVkZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlID0gc2l0ay5HZXRJbWFnZUZyb21BcnJheSh2YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltYWdlID0gdmFsdWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIFNhdmUgdGhlIGltYWdlCiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGsuV3JpdGVJbWFnZShpbWFnZSwgb3MucGF0aC5qb2luKG91dHB1dF9wYXRoLCBmIntrZXl9Lm5paS5neiIpKQogICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5kZWJ1ZyhmIlNhdmVkIHtrZXl9IGltYWdlIHRvIHtvdXRwdXRfcGF0aH0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBTYXZlIG1hc2sgaW1hZ2VzIGlmIHRoZXkgZXhpc3QKICAgICAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gc3ViamVjdF9kYXRhLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBpZiBrZXkuc3RhcnRzd2l0aCgnbWFza18nKSBhbmQga2V5IGluIG91dHB1dF9kaXJzOgogICAgICAgICAgICAgICAgICAgIG91dHB1dF9wYXRoID0gUGF0aChvdXRwdXRfZGlyc1trZXldKQogICAgICAgICAgICAgICAgICAgIG91dHB1dF9wYXRoLm1rZGlyKHBhcmVudHM9VHJ1ZSwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCAobnAubmRhcnJheSwgc2l0ay5JbWFnZSkpOgogICAgICAgICAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHZhbHVlLCBucC5uZGFycmF5KToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2sgPSBzaXRrLkdldEltYWdlRnJvbUFycmF5KHZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzayA9IHZhbHVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgIyBTYXZlIHRoZSBtYXNrCiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGsuV3JpdGVJbWFnZShtYXNrLCBvcy5wYXRoLmpvaW4ob3V0cHV0X3BhdGgsIGYie2tleX0ubmlpLmd6IikpCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmRlYnVnKGYiU2F2ZWQge2tleX0gbWFzayB0byB7b3V0cHV0X3BhdGh9IikKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIkVycm9yIHNhdmluZyBwcm9jZXNzZWQgaW1hZ2VzOiB7c3RyKGUpfSIpCiAgICAgICAgICAgIHJhaXNlCgogICAgZGVmIHByb2Nlc3NfYmF0Y2goc2VsZikgLT4gTm9uZToKICAgICAgICAiIiLlpITnkIbmiYDmnInmoLfmnKzmlbDmja7jgIIKICAgICAgICAKICAgICAgICDkvb/nlKjlpJrov5vnqIvmlrnlvI/ov5vooYzmibnlpITnkIbjgIIKICAgICAgICAiIiIKICAgICAgICAjIOWIm+W7uui+k+WHuuebruW9lQogICAgICAgIG91dF9kaXIgPSBzZWxmLm91dHB1dF9yb290IC8gInByb2Nlc3NlZF9pbWFnZXMiCiAgICAgICAgaW1hZ2VzX2RpciA9IG91dF9kaXIgLyAiaW1hZ2VzIgogICAgICAgIG1hc2tzX2RpciA9IG91dF9kaXIgLyAibWFza3MiCiAgICAgICAgaW1hZ2VzX2Rpci5ta2RpcihwYXJlbnRzPVRydWUsIGV4aXN0X29rPVRydWUpCiAgICAgICAgbWFza3NfZGlyLm1rZGlyKHBhcmVudHM9VHJ1ZSwgZXhpc3Rfb2s9VHJ1ZSkKICAgICAgICAKICAgICAgICAjIOiOt+WPluaJgOacieWbvuWDj+WSjG1hc2vot6/lvoQKICAgICAgICBpbWFnZXNfcGF0aHMsIG1hc2tfcGF0aHMgPSBnZXRfaW1hZ2VfYW5kX21hc2tfcGF0aHMoc2VsZi5jb25maWdbImRhdGFfZGlyIl0pCiAgICAgICAgCiAgICAgICAgc3ViamVjdF9kYXRhX2xpc3QgPSBbXQogICAgICAgIAogICAgICAgIGZvciBzdWJqZWN0IGluIGltYWdlc19wYXRocy5rZXlzKCk6CiAgICAgICAgICAgIGRhdGFfZW50cnkgPSB7InN1YmoiOiBzdWJqZWN0fQogICAgICAgICAgICBvdXRwdXRfZGlycyA9IHt9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIOmBjeWOhuW9k+WJjeenkeebrueahOaJgOacieWbvuWDj+i3r+W+hAogICAgICAgICAgICBmb3Igc2Nhbl90eXBlLCBpbWdfcGF0aCBpbiBpbWFnZXNfcGF0aHNbc3ViamVjdF0uaXRlbXMoKToKICAgICAgICAgICAgICAgICMg56Gu5L+d6Lev5b6E5piv5a2X56ym5LiyCiAgICAgICAgICAgICAgICBkYXRhX2VudHJ5W3NjYW5fdHlwZV0gPSBzdHIoaW1nX3BhdGgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMg5Yib5bu66K+l5qih5oCB55qE6L6T5Ye655uu5b2VCiAgICAgICAgICAgICAgICBvdXRwdXRfZGlyID0gaW1hZ2VzX2RpciAvIHN1YmplY3QgLyBzY2FuX3R5cGUKICAgICAgICAgICAgICAgIG91dHB1dF9kaXIubWtkaXIocGFyZW50cz1UcnVlLCBleGlzdF9vaz1UcnVlKQogICAgICAgICAgICAgICAgb3V0cHV0X2RpcnNbc2Nhbl90eXBlXSA9IHN0cihvdXRwdXRfZGlyKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAjIOS4uuavj+S4quaooeaAgea3u+WKoOWvueW6lOeahG1hc2vvvIjlpoLmnpzlrZjlnKjvvIkKICAgICAgICAgICAgICAgIGlmIHN1YmplY3QgaW4gbWFza19wYXRocyBhbmQgc2Nhbl90eXBlIGluIG1hc2tfcGF0aHNbc3ViamVjdF06CiAgICAgICAgICAgICAgICAgICAgIyDkuLror6XmqKHmgIHliJvlu7rkuIDkuKrnibnlrprnmoRtYXNr6ZSuCiAgICAgICAgICAgICAgICAgICAgbWFza19rZXkgPSBmIm1hc2tfe3NjYW5fdHlwZX0iCiAgICAgICAgICAgICAgICAgICAgbWFza19wYXRoID0gbWFza19wYXRoc1tzdWJqZWN0XVtzY2FuX3R5cGVdCiAgICAgICAgICAgICAgICAgICAgIyDnoa7kv53ot6/lvoTmmK/lrZfnrKbkuLIKICAgICAgICAgICAgICAgICAgICBkYXRhX2VudHJ5W21hc2tfa2V5XSA9IHN0cihtYXNrX3BhdGgpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyDkuLror6XmqKHmgIHnmoRtYXNr5Yib5bu66L6T5Ye655uu5b2VCiAgICAgICAgICAgICAgICAgICAgbWFza19vdXRwdXRfZGlyID0gbWFza3NfZGlyIC8gc3ViamVjdCAvIHNjYW5fdHlwZQogICAgICAgICAgICAgICAgICAgIG1hc2tfb3V0cHV0X2Rpci5ta2RpcihwYXJlbnRzPVRydWUsIGV4aXN0X29rPVRydWUpCiAgICAgICAgICAgICAgICAgICAgb3V0cHV0X2RpcnNbbWFza19rZXldID0gc3RyKG1hc2tfb3V0cHV0X2RpcikKICAgICAgICAgICAgCiAgICAgICAgICAgICMg5bCG6L6T5Ye655uu5b2V5L+h5oGv5re75Yqg5Yiw5pWw5o2u5p2h55uu5Lit77yI56Gu5L+d5omA5pyJ6Lev5b6E6YO95piv5a2X56ym5Liy57G75Z6L77yJCiAgICAgICAgICAgIGRhdGFfZW50cnlbIm91dHB1dF9kaXJzIl0gPSB7azogc3RyKHYpIGZvciBrLCB2IGluIG91dHB1dF9kaXJzLml0ZW1zKCl9CiAgICAgICAgICAgIAogICAgICAgICAgICAjIOajgOafpeaYr+WQpuiHs+WwkeacieS4gOS4quaooeaAgeacieWvueW6lOeahG1hc2sKICAgICAgICAgICAgaGFzX21hc2sgPSBhbnkoa2V5LnN0YXJ0c3dpdGgoIm1hc2tfIikgZm9yIGtleSBpbiBkYXRhX2VudHJ5LmtleXMoKSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMg5bCG55Sf5oiQ55qE5pWw5o2u5p2h55uu5Yqg5YWl5Yiw5YiX6KGo5LitCiAgICAgICAgICAgIGlmIGhhc19tYXNrOiAgIyDnoa7kv53oh7PlsJHmnInkuIDkuKptYXNr5omN5re75YqgCiAgICAgICAgICAgICAgICBzdWJqZWN0X2RhdGFfbGlzdC5hcHBlbmQoZGF0YV9lbnRyeSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoZiJObyBtYXNrIGZvdW5kIGZvciBzdWJqZWN0IHtzdWJqZWN0fSwgc2tpcHBpbmciKQogICAgICAgICAgICAKICAgICAgICBpZiBub3Qgc3ViamVjdF9kYXRhX2xpc3Q6CiAgICAgICAgICAgIHNlbGYubG9nZ2VyLndhcm5pbmcoIk5vIHZhbGlkIHN1YmplY3RzIGZvdW5kIikKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIuWwhuS9v+eUqCB7c2VsZi5udW1fd29ya2Vyc30g5Liq6L+b56iL6L+b6KGM5aSE55CGIikKICAgICAgICB0b3RhbF9zdWJqZWN0cyA9IGxlbihzdWJqZWN0X2RhdGFfbGlzdCkKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKGYi5YWx5pyJIHt0b3RhbF9zdWJqZWN0c30g5Liq5qC35pys6ZyA6KaB5aSE55CGIikKICAgICAgICAKICAgICAgICAjIOWIm+W7uui/m+W6puadoQogICAgICAgIHByb2dyZXNzX2JhciA9IEN1c3RvbVRxZG0odG90YWw9dG90YWxfc3ViamVjdHMsIGRlc2M9IlByb2Nlc3Npbmcgc3ViamVjdHMiKQogICAgICAgIAogICAgICAgICMg5L2/55So5aSa6L+b56iL5aSE55CGCiAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygi5byA5aeL5aSE55CG5pWw5o2uLi4uIikKICAgICAgICAKICAgICAgICAjIOWNlei/m+eoi+aooeW8jwogICAgICAgIGlmIHNlbGYubnVtX3dvcmtlcnMgPT0gMToKICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygi5L2/55So5Y2V6L+b56iL5qih5byPLi4uIikKICAgICAgICAgICAgZm9yIHN1YmplY3RfZGF0YSBpbiBzdWJqZWN0X2RhdGFfbGlzdDoKICAgICAgICAgICAgICAgIHN1YmplY3RfaWQsIHJlc3VsdCA9IHNlbGYuX3Byb2Nlc3Nfc2luZ2xlX3N1YmplY3Qoc3ViamVjdF9kYXRhKQogICAgICAgICAgICAgICAgIyBTYXZlIHByb2Nlc3NlZCBpbWFnZXMKICAgICAgICAgICAgICAgIHNlbGYuc2F2ZV9wcm9jZXNzZWRfaW1hZ2VzKHJlc3VsdCkKCiAgICAgICAgICAgICAgICBwcm9ncmVzc19iYXIudXBkYXRlKDEpCiAgICAgICAgICAgICAgICBpZiBzdWJqZWN0X2lkLnN0YXJ0c3dpdGgoIkVycm9yIik6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuZXJyb3Ioc3ViamVjdF9pZCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIuWujOaIkOWkhOeQhuagt+acrDoge3N1YmplY3RfaWR9ICh7cHJvZ3Jlc3NfYmFyLm59L3t0b3RhbF9zdWJqZWN0c30pIikKICAgICAgICBlbHNlOgogICAgICAgICAgICAjIOS9v+eUqOi/m+eoi+axoOW5tuihjOWkhOeQhgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICB3aXRoIG11bHRpcHJvY2Vzc2luZy5Qb29sKHByb2Nlc3Nlcz1zZWxmLm51bV93b3JrZXJzKSBhcyBwb29sOgogICAgICAgICAgICAgICAgICAgIGlmIHNlbGYudmVyYm9zZToKICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygi5byA5aeL5bm26KGM5aSE55CG5omA5pyJ5qC35pysLi4uIikKICAgICAgICAgICAgICAgICAgICBmb3Igc3ViamVjdF9pZCwgcmVzdWx0IGluIHBvb2wuaW1hcChzZWxmLl9wcm9jZXNzX3NpbmdsZV9zdWJqZWN0LCBzdWJqZWN0X2RhdGFfbGlzdCk6CiAgICAgICAgICAgICAgICAgICAgICAgICMgU2F2ZSBwcm9jZXNzZWQgaW1hZ2VzCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG5vdCBzdWJqZWN0X2lkLnN0YXJ0c3dpdGgoIkVycm9yIik6ICAjIOWPquS/neWtmOaIkOWKn+WkhOeQhueahOe7k+aenAogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5zYXZlX3Byb2Nlc3NlZF9pbWFnZXMocmVzdWx0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbyhmIuWujOaIkOWkhOeQhuagt+acrDoge3N1YmplY3RfaWR9ICh7cHJvZ3Jlc3NfYmFyLm59L3t0b3RhbF9zdWJqZWN0c30pIikKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYubG9nZ2VyLmVycm9yKHN1YmplY3RfaWQpICAjIOiusOW9lemUmeivr+S/oeaBrwogICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc19iYXIudXBkYXRlKDEpICAjIOaXoOiuuuaIkOWKn+aIluWksei0pemDveabtOaWsOi/m+W6puadoQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICBzZWxmLmxvZ2dlci5lcnJvcihmIuWkmui/m+eoi+WkhOeQhuWPkeeUn+mUmeivrzoge3N0cihlKX0iKQogICAgICAgICAgICAgICAgc2VsZi5sb2dnZXIuaW5mbygi5bCd6K+V6ZmN57qn5Yiw5Y2V6L+b56iL5qih5byPLi4uIikKICAgICAgICAKICAgICAgICBzZWxmLmxvZ2dlci5pbmZvKCLmibnlpITnkIblrozmiJAiKSA=').decode())
