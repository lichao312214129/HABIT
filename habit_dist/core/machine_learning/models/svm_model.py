
import base64
exec(base64.b64decode(b'IiIiDQpTVk0gTW9kZWwNCg0KV3JhcHBlciBmb3Igc2tsZWFybidzIExpbmVhclNWQyBtb2RlbCBmb3IgZmFzdGVyIHRyYWluaW5nDQoiIiINCmZyb20gc2tsZWFybi5zdm0gaW1wb3J0IExpbmVhclNWQw0KZnJvbSBza2xlYXJuLmNhbGlicmF0aW9uIGltcG9ydCBDYWxpYnJhdGVkQ2xhc3NpZmllckNWDQpmcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgQW55LCBPcHRpb25hbCwgVW5pb24NCmltcG9ydCBudW1weSBhcyBucA0KaW1wb3J0IHBhbmRhcyBhcyBwZA0KZnJvbSAuYmFzZSBpbXBvcnQgQmFzZU1vZGVsDQpmcm9tIC5mYWN0b3J5IGltcG9ydCBNb2RlbEZhY3RvcnkNCmZyb20gc2NpcHkuc3BlY2lhbCBpbXBvcnQgZXhwaXQgICMgc2lnbW9pZCBmdW5jdGlvbg0KDQpATW9kZWxGYWN0b3J5LnJlZ2lzdGVyKCdTVk0nKQ0KY2xhc3MgU1ZNTW9kZWwoQmFzZU1vZGVsKToNCiAgICAiIiJXcmFwcGVyIGZvciBza2xlYXJuJ3MgTGluZWFyU1ZDIG1vZGVsIHdpdGggcHJvYmFiaWxpdHkgY2FsaWJyYXRpb24iIiINCiAgICANCiAgICBAcHJvcGVydHkNCiAgICBkZWYgbW9kZWxfdHlwZShzZWxmKSAtPiBzdHI6DQogICAgICAgICIiIg0KICAgICAgICBHZXQgdGhlIHR5cGUgb2YgdGhlIG1vZGVsDQogICAgICAgIA0KICAgICAgICBSZXR1cm5zOg0KICAgICAgICAgICAgc3RyOiBNb2RlbCB0eXBlICgnbGluZWFyJyBmb3IgTGluZWFyIFNWTSkNCiAgICAgICAgIiIiDQogICAgICAgIHJldHVybiAnbGluZWFyJw0KICAgIA0KICAgIGRlZiBfX2luaXRfXyhzZWxmLCBjb25maWc6IERpY3Rbc3RyLCBBbnldKToNCiAgICAgICAgIiIiDQogICAgICAgIEluaXRpYWxpemUgdGhlIG1vZGVsDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgY29uZmlnOiBDb25maWd1cmF0aW9uIGRpY3Rpb25hcnkgd2l0aCBtb2RlbCBwYXJhbWV0ZXJzDQogICAgICAgICIiIg0KICAgICAgICBzdXBlcigpLl9faW5pdF9fKGNvbmZpZykNCiAgICAgICAgDQogICAgICAgICMgRXh0cmFjdCBwYXJhbWV0ZXJzIGZyb20gY29uZmlnDQogICAgICAgIHBhcmFtcyA9IGNvbmZpZy5nZXQoJ3BhcmFtcycsIHt9KQ0KICAgICAgICANCiAgICAgICAgIyBDcmVhdGUgYmFzZSBtb2RlbCB3aXRoIHBhcmFtZXRlcnMNCiAgICAgICAgc2VsZi5tb2RlbCA9IExpbmVhclNWQygNCiAgICAgICAgICAgIEM9cGFyYW1zLmdldCgnQycsIDEuMCksDQogICAgICAgICAgICBjbGFzc193ZWlnaHQ9cGFyYW1zLmdldCgnY2xhc3Nfd2VpZ2h0JywgTm9uZSksDQogICAgICAgICAgICByYW5kb21fc3RhdGU9cGFyYW1zLmdldCgncmFuZG9tX3N0YXRlJywgNDIpLA0KICAgICAgICAgICAgbWF4X2l0ZXI9cGFyYW1zLmdldCgnbWF4X2l0ZXInLCAxMDAwKSwNCiAgICAgICAgICAgICoqe2s6IHYgZm9yIGssIHYgaW4gcGFyYW1zLml0ZW1zKCkgaWYgayBub3QgaW4gWydDJywgJ2NsYXNzX3dlaWdodCcsICdyYW5kb21fc3RhdGUnLCAnbWF4X2l0ZXInXX0NCiAgICAgICAgKQ0KICAgICAgICANCiAgICAgICAgDQogICAgZGVmIGZpdChzZWxmLCBYOiBVbmlvbltwZC5EYXRhRnJhbWUsIG5wLm5kYXJyYXldLCANCiAgICAgICAgICAgICB5OiBVbmlvbltwZC5TZXJpZXMsIG5wLm5kYXJyYXldKSAtPiBOb25lOg0KICAgICAgICAiIiINCiAgICAgICAgVHJhaW4gdGhlIG1vZGVsDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgWDogVHJhaW5pbmcgZmVhdHVyZXMNCiAgICAgICAgICAgIHk6IFRyYWluaW5nIGxhYmVscw0KICAgICAgICAiIiINCiAgICAgICAgIyBTYXZlIGZlYXR1cmUgbmFtZXMgaWYgWCBpcyBhIERhdGFGcmFtZQ0KICAgICAgICBpZiBpc2luc3RhbmNlKFgsIHBkLkRhdGFGcmFtZSk6DQogICAgICAgICAgICBzZWxmLmZlYXR1cmVfbmFtZXMgPSBsaXN0KFguY29sdW1ucykNCiAgICAgICAgDQogICAgICAgICMgVHJhaW4gdGhlIG1vZGVsDQogICAgICAgIHNlbGYubW9kZWwuZml0KFgsIHkpDQogICAgICAgIA0KICAgICAgICAjIFN0b3JlIGNsYXNzZXMNCiAgICAgICAgc2VsZi5jbGFzc2VzXyA9IG5wLnVuaXF1ZSh5KQ0KICAgICAgICANCiAgICBkZWYgcHJlZGljdChzZWxmLCBYOiBVbmlvbltwZC5EYXRhRnJhbWUsIG5wLm5kYXJyYXldKSAtPiBucC5uZGFycmF5Og0KICAgICAgICAiIiINCiAgICAgICAgTWFrZSBwcmVkaWN0aW9ucw0KICAgICAgICANCiAgICAgICAgQXJnczoNCiAgICAgICAgICAgIFg6IEZlYXR1cmVzDQogICAgICAgICAgICANCiAgICAgICAgUmV0dXJuczoNCiAgICAgICAgICAgIG5wLm5kYXJyYXk6IFByZWRpY3RlZCBjbGFzcyBsYWJlbHMNCiAgICAgICAgIiIiDQogICAgICAgIGlmIHNlbGYubW9kZWwgaXMgTm9uZToNCiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIk1vZGVsIG5vdCB0cmFpbmVkLiBDYWxsIHRyYWluKCkgZmlyc3QuIikNCiAgICAgICAgcmV0dXJuIHNlbGYubW9kZWwucHJlZGljdChYKQ0KICAgICAgICANCiAgICBkZWYgcHJlZGljdF9wcm9iYShzZWxmLCBYOiBVbmlvbltwZC5EYXRhRnJhbWUsIG5wLm5kYXJyYXldKSAtPiBucC5uZGFycmF5Og0KICAgICAgICAiIiINCiAgICAgICAgR2V0IHByZWRpY3Rpb24gcHJvYmFiaWxpdGllcyB1c2luZyB0aGUgZGVjaXNpb24gZnVuY3Rpb24gdmFsdWVzDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgWDogRmVhdHVyZXMNCiAgICAgICAgICAgIA0KICAgICAgICBSZXR1cm5zOg0KICAgICAgICAgICAgbnAubmRhcnJheTogUHJlZGljdGVkIHByb2JhYmlsaXRpZXMgZm9yIGVhY2ggY2xhc3MNCiAgICAgICAgIiIiDQogICAgICAgIGlmIHNlbGYubW9kZWwgaXMgTm9uZToNCiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIk1vZGVsIG5vdCB0cmFpbmVkLiBDYWxsIHRyYWluKCkgZmlyc3QuIikNCiAgICAgICAgDQogICAgICAgICMgR2V0IGRlY2lzaW9uIGZ1bmN0aW9uIHZhbHVlcw0KICAgICAgICBkZWNpc2lvbl92YWx1ZXMgPSBzZWxmLm1vZGVsLmRlY2lzaW9uX2Z1bmN0aW9uKFgpDQogICAgICAgIA0KICAgICAgICAjIEZvciBiaW5hcnkgY2xhc3NpZmljYXRpb24NCiAgICAgICAgaWYgbGVuKHNlbGYuY2xhc3Nlc18pID09IDI6DQogICAgICAgICAgICAjIENvbnZlcnQgdG8gcHJvYmFiaWxpdGllcyB1c2luZyBzaWdtb2lkIGZ1bmN0aW9uDQogICAgICAgICAgICBwcm9iYSA9IGV4cGl0KGRlY2lzaW9uX3ZhbHVlcykNCiAgICAgICAgICAgICMgUmV0dXJuIHByb2JhYmlsaXRpZXMgZm9yIGJvdGggY2xhc3Nlcw0KICAgICAgICAgICAgcmV0dXJuIG5wLnZzdGFjayhbMSAtIHByb2JhLCBwcm9iYV0pLlQNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgICMgRm9yIG11bHRpLWNsYXNzLCB1c2Ugc29mdG1heCBvbiBkZWNpc2lvbiB2YWx1ZXMNCiAgICAgICAgICAgICMgU3VidHJhY3QgbWF4IGZvciBudW1lcmljYWwgc3RhYmlsaXR5DQogICAgICAgICAgICBleHBfZGVjaXNpb24gPSBucC5leHAoZGVjaXNpb25fdmFsdWVzIC0gbnAubWF4KGRlY2lzaW9uX3ZhbHVlcywgYXhpcz0xLCBrZWVwZGltcz1UcnVlKSkNCiAgICAgICAgICAgIHJldHVybiBleHBfZGVjaXNpb24gLyBucC5zdW0oZXhwX2RlY2lzaW9uLCBheGlzPTEsIGtlZXBkaW1zPVRydWUpDQogICAgICAgIA0KICAgIGRlZiBnZXRfZmVhdHVyZV9pbXBvcnRhbmNlKHNlbGYpIC0+IERpY3Rbc3RyLCBmbG9hdF06DQogICAgICAgICIiIg0KICAgICAgICBHZXQgZmVhdHVyZSBpbXBvcnRhbmNlIHNjb3Jlcw0KICAgICAgICANCiAgICAgICAgUmV0dXJuczoNCiAgICAgICAgICAgIERpY3Rbc3RyLCBmbG9hdF06IEZlYXR1cmUgaW1wb3J0YW5jZSBzY29yZXMNCiAgICAgICAgIiIiDQogICAgICAgIGlmIHNlbGYubW9kZWwgaXMgTm9uZToNCiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIk1vZGVsIG5vdCB0cmFpbmVkLiBDYWxsIHRyYWluKCkgZmlyc3QuIikNCiAgICAgICAgICAgIA0KICAgICAgICB0cnk6DQogICAgICAgICAgICAjIEdldCBjb2VmZmljaWVudHMgZnJvbSB0aGUgbW9kZWwNCiAgICAgICAgICAgIGlmIGxlbihzZWxmLmNsYXNzZXNfKSA9PSAyOg0KICAgICAgICAgICAgICAgIGNvZWYgPSBzZWxmLm1vZGVsLmNvZWZfWzBdDQogICAgICAgICAgICBlbHNlOg0KICAgICAgICAgICAgICAgICMgRm9yIG11bHRpY2xhc3MsIGF2ZXJhZ2UgdGhlIGNvZWZmaWNpZW50cyBhY3Jvc3MgY2xhc3Nlcw0KICAgICAgICAgICAgICAgIGNvZWYgPSBucC5tZWFuKHNlbGYubW9kZWwuY29lZl8sIGF4aXM9MCkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBHZXQgZmVhdHVyZSBuYW1lcw0KICAgICAgICAgICAgZmVhdHVyZV9uYW1lcyA9IHNlbGYuZmVhdHVyZV9uYW1lcyBvciBbZiJmZWF0dXJlX3tpfSIgZm9yIGkgaW4gcmFuZ2UobGVuKGNvZWYpKV0NCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBSZXR1cm4gYXMgZGljdGlvbmFyeQ0KICAgICAgICAgICAgcmV0dXJuIGRpY3QoemlwKGZlYXR1cmVfbmFtZXMsIGNvZWYpKQ0KICAgICAgICBleGNlcHQgQXR0cmlidXRlRXJyb3I6DQogICAgICAgICAgICAjIElmIHdlIGNhbid0IGdldCBjb2VmZmljaWVudHMsIHJldHVybiBlbXB0eSBkaWN0DQogICAgICAgICAgICByZXR1cm4ge30g').decode())
