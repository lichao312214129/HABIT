
import base64
exec(base64.b64decode(b'IiIiClBsb3R0aW5nIE1vZHVsZQpQcm92aWRlcyB2YXJpb3VzIGV2YWx1YXRpb24gY2hhcnQgcGxvdHRpbmcgZnVuY3Rpb25zCiIiIgoKaW1wb3J0IG9zCmZyb20gdHlwaW5nIGltcG9ydCBEaWN0LCBMaXN0LCBUdXBsZSwgVW5pb24sIEFueQppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdAppbXBvcnQgc2VhYm9ybiBhcyBzbnMKaW1wb3J0IHNoYXAKZnJvbSBza2xlYXJuLm1ldHJpY3MgaW1wb3J0IHJvY19jdXJ2ZSwgcHJlY2lzaW9uX3JlY2FsbF9jdXJ2ZSwgY29uZnVzaW9uX21hdHJpeApmcm9tIHNrbGVhcm4uY2FsaWJyYXRpb24gaW1wb3J0IGNhbGlicmF0aW9uX2N1cnZlICAjIENhbGlicmF0aW9uIGN1cnZlIHJlbGF0ZWQKZnJvbSAuLmV2YWx1YXRpb24ubWV0cmljcyBpbXBvcnQgY2FsY3VsYXRlX25ldF9iZW5lZml0CmZyb20gLi4uLnV0aWxzLnZpc3VhbGl6YXRpb25fdXRpbHMgaW1wb3J0IHByb2Nlc3Nfc2hhcF9leHBsYW5hdGlvbgoKY2xhc3MgUGxvdHRlcjoKICAgIGRlZiBfX2luaXRfXyhzZWxmLCBvdXRwdXRfZGlyOiBzdHIsIGRwaTogaW50ID0gNjAwKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIEluaXRpYWxpemUgdGhlIHBsb3R0ZXIKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBvdXRwdXRfZGlyIChzdHIpOiBPdXRwdXQgZGlyZWN0b3J5IHBhdGgKICAgICAgICAgICAgZHBpIChpbnQpOiBSZXNvbHV0aW9uIGZvciBub24tUERGIGZvcm1hdCBpbWFnZXMKICAgICAgICAiIiIKICAgICAgICBzZWxmLm91dHB1dF9kaXIgPSBvdXRwdXRfZGlyCiAgICAgICAgc2VsZi5kcGkgPSBkcGkKICAgICAgICBvcy5tYWtlZGlycyhvdXRwdXRfZGlyLCBleGlzdF9vaz1UcnVlKQogICAgICAgIAogICAgICAgICMgU2V0IHBsb3R0aW5nIHN0eWxlCiAgICAgICAgIyBwbHQuc3R5bGUudXNlKCdzZWFib3JuJykKICAgICAgICAjIHNucy5zZXRfY29udGV4dCgicGFwZXIiLCBmb250X3NjYWxlPTEuMikKICAgICAgICAKICAgIGRlZiBwbG90X3JvY192MihzZWxmLCBtb2RlbHNfZGF0YTogRGljdFtzdHIsIFR1cGxlW25wLm5kYXJyYXksIG5wLm5kYXJyYXldXSwgc2F2ZV9uYW1lOiBzdHIgPSAnUk9DLnBkZicsIHRpdGxlOiBzdHIgPSAndGVzdCcpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgUGxvdCBST0MgY3VydmVzIGZvciBhIHNpbmdsZSBkYXRhc2V0IChvcHRpbWl6ZWQgdmVyc2lvbikKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBtb2RlbHNfZGF0YTogRGljdGlvbmFyeSB3aXRoIG1vZGVsIG5hbWVzIGFzIGtleXMgYW5kICh5X3RydWUsIHlfcHJlZF9wcm9iYSkgdHVwbGVzIGFzIHZhbHVlcwogICAgICAgICAgICBzYXZlX25hbWU6IE5hbWUgb2YgdGhlIGZpbGUgdG8gc2F2ZSB0aGUgcGxvdAogICAgICAgICAgICB0aXRsZTogRGF0YSB0eXBlIGZvciB0aXRsZSBkaXNwbGF5ICgndHJhaW4nIG9yICd0ZXN0JykKICAgICAgICAiIiIKICAgICAgICAjIENyZWF0ZSBmaWd1cmUKICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDgsIDgpKQogICAgICAgIAogICAgICAgICMgUGxvdCBST0MgY3VydmVzIGZvciBlYWNoIG1vZGVsCiAgICAgICAgZm9yIG1vZGVsX25hbWUsICh5X3RydWUsIHlfcHJlZF9wcm9iYSkgaW4gbW9kZWxzX2RhdGEuaXRlbXMoKToKICAgICAgICAgICAgZnByLCB0cHIsIF8gPSByb2NfY3VydmUoeV90cnVlLCB5X3ByZWRfcHJvYmEpCiAgICAgICAgICAgIGF1YyA9IG5wLnRyYXB6KHRwciwgZnByKQogICAgICAgICAgICBwbHQucGxvdChmcHIsIHRwciwgbGFiZWw9Zid7bW9kZWxfbmFtZX0gKEFVQyA9IHthdWM6LjNmfSknLCBsaW5ld2lkdGg9MS41KQogICAgICAgIAogICAgICAgICMgQWRkIGRpYWdvbmFsIGxpbmUKICAgICAgICBwbHQucGxvdChbMCwgMV0sIFswLCAxXSwgJ2stLScsIGxpbmV3aWR0aD0xLjUpCiAgICAgICAgcGx0LnhsaW0oWy0wLjAyLCAxLjAyXSkKICAgICAgICBwbHQueWxpbShbLTAuMDIsIDEuMDJdKQogICAgICAgIHBsdC54bGFiZWwoJ0ZhbHNlIFBvc2l0aXZlIFJhdGUnLCBmb250c2l6ZT0xMikKICAgICAgICBwbHQueWxhYmVsKCdUcnVlIFBvc2l0aXZlIFJhdGUnLCBmb250c2l6ZT0xMikKICAgICAgICAKICAgICAgICAjIFNldCB0aXRsZSBiYXNlZCBvbiBkYXRhIHR5cGUKICAgICAgICB0aXRsZSA9IGYie3RpdGxlfSBTZXQgUk9DIEN1cnZlcyIKICAgICAgICBwbHQudGl0bGUodGl0bGUsIGZvbnRzaXplPTE0KQogICAgICAgIHBsdC5sZWdlbmQobG9jPSJsb3dlciByaWdodCIpCiAgICAgICAgCiAgICAgICAgcGx0LmdyaWQoVHJ1ZSwgbGluZXN0eWxlPSctLScsIGFscGhhPTAuNykKICAgICAgICBwbHQuZ2NhKCkuc2V0X2ZhY2Vjb2xvcignI2Y4ZjlmYScpCiAgICAgICAgCiAgICAgICAgIyBPbmx5IHNob3cgbGVmdCBhbmQgYm90dG9tIHNwaW5lcyBhbmQgc2V0IHRoZWlyIHdpZHRoIHRvIDEuNQogICAgICAgIGF4ID0gcGx0LmdjYSgpCiAgICAgICAgYXguc3BpbmVzWyd0b3AnXS5zZXRfdmlzaWJsZShGYWxzZSkKICAgICAgICBheC5zcGluZXNbJ3JpZ2h0J10uc2V0X3Zpc2libGUoRmFsc2UpCiAgICAgICAgYXguc3BpbmVzWydib3R0b20nXS5zZXRfdmlzaWJsZShUcnVlKQogICAgICAgIGF4LnNwaW5lc1snbGVmdCddLnNldF92aXNpYmxlKFRydWUpCiAgICAgICAgYXguc3BpbmVzWydib3R0b20nXS5zZXRfbGluZXdpZHRoKDEuNSkKICAgICAgICBheC5zcGluZXNbJ2xlZnQnXS5zZXRfbGluZXdpZHRoKDEuNSkKICAgICAgICAKICAgICAgICAjIFNhdmUgZmlndXJlCiAgICAgICAgcGx0LnRpZ2h0X2xheW91dCgpCiAgICAgICAgCiAgICAgICAgIyDmoLnmja7mlofku7bmianlsZXlkI3lhrPlrprmmK/lkKblupTnlKjljovnvKnlkoxEUEnorr7nva4KICAgICAgICBmaWxlX2V4dCA9IG9zLnBhdGguc3BsaXRleHQoc2F2ZV9uYW1lKVsxXS5sb3dlcigpCiAgICAgICAgaWYgZmlsZV9leHQgPT0gJy5wZGYnOgogICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBzYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnKQogICAgICAgIGVsaWYgZmlsZV9leHQgaW4gWycudGlmJywgJy50aWZmJ106CiAgICAgICAgICAgIHBsdC5zYXZlZmlnKG9zLnBhdGguam9pbihzZWxmLm91dHB1dF9kaXIsIHNhdmVfbmFtZSksIGJib3hfaW5jaGVzPSd0aWdodCcsIAogICAgICAgICAgICAgICAgICAgICAgICBkcGk9c2VsZi5kcGksIGZvcm1hdD0ndGlmJywgY29tcHJlc3Npb249J3RpZmZfbHp3JykKICAgICAgICBlbHNlOgogICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBzYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnLCAKICAgICAgICAgICAgICAgICAgICAgICAgZHBpPXNlbGYuZHBpKQogICAgICAgIAogICAgICAgIHBsdC5jbG9zZSgpCiAgICAgIAogICAgZGVmIHBsb3RfZGNhX3YyKHNlbGYsIG1vZGVsc19kYXRhOiBEaWN0W3N0ciwgVHVwbGVbbnAubmRhcnJheSwgbnAubmRhcnJheV1dLCBzYXZlX25hbWU6IHN0ciA9ICdEQ0EucGRmJywgdGl0bGU6IHN0ciA9ICd0ZXN0JykgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICBQbG90IERlY2lzaW9uIEN1cnZlIEFuYWx5c2lzIChEQ0EpIGZvciBhIHNpbmdsZSBkYXRhc2V0IChvcHRpbWl6ZWQgdmVyc2lvbikKICAgICAgICAKICAgICAgICBBcmdzOgogICAgICAgICAgICBtb2RlbHNfZGF0YTogRGljdGlvbmFyeSB3aXRoIG1vZGVsIG5hbWVzIGFzIGtleXMgYW5kICh5X3RydWUsIHlfcHJlZF9wcm9iYSkgdHVwbGVzIGFzIHZhbHVlcwogICAgICAgICAgICBzYXZlX25hbWU6IE5hbWUgb2YgdGhlIGZpbGUgdG8gc2F2ZSB0aGUgcGxvdAogICAgICAgICAgICB0aXRsZTogRGF0YSB0eXBlIGZvciB0aXRsZSBkaXNwbGF5ICgndHJhaW4nIG9yICd0ZXN0JykKICAgICAgICAiIiIKICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDgsIDgpKQogICAgICAgIAogICAgICAgICMgRGVmaW5lIHRocmVzaG9sZCByYW5nZQogICAgICAgIHRocmVzaG9sZHMgPSBucC5saW5zcGFjZSgwLCAxLCAxMDApCiAgICAgICAgCiAgICAgICAgIyBFeHRyYWN0IHlfdHJ1ZSBhcyByZWZlcmVuY2UgKGFueSBtb2RlbCBjYW4gYmUgdXNlZCBzaW5jZSB5X3RydWUgc2hvdWxkIGJlIGNvbnNpc3RlbnQpCiAgICAgICAgaWYgbm90IG1vZGVsc19kYXRhOgogICAgICAgICAgICBwcmludCgiTm8gZGF0YSBwcm92aWRlZCBmb3IgRENBIHBsb3QiKQogICAgICAgICAgICByZXR1cm4KICAgICAgICAKICAgICAgICAjIOajgOa1i+aooeWei+eahOi+k+WHuuamgueOh+aYr+WQpui2hei/hzAtMe+8jOWmguaenOi2hei/h+WImei/m+ihjOW9kuS4gOWMlgogICAgICAgIGZvciBtb2RlbF9uYW1lLCAoeV90cnVlLCB5X3ByZWRfcHJvYmEpIGluIG1vZGVsc19kYXRhLml0ZW1zKCk6CiAgICAgICAgICAgIGlmIG5wLmFueSh5X3ByZWRfcHJvYmEgPiAxKSBvciBucC5hbnkoeV9wcmVkX3Byb2JhIDwgMCk6CiAgICAgICAgICAgICAgICBwcmludChmIldhcm5pbmc6IE1vZGVsIHttb2RlbF9uYW1lfSBoYXMgcHJlZGljdGVkIHByb2JhYmlsaXRpZXMgb3V0c2lkZSBbMCwgMV0iKQogICAgICAgICAgICAgICAgeV9wcmVkX3Byb2JhID0gKHlfcHJlZF9wcm9iYSAtIG5wLm1pbih5X3ByZWRfcHJvYmEpKSAvIChucC5tYXgoeV9wcmVkX3Byb2JhKSAtIG5wLm1pbih5X3ByZWRfcHJvYmEpKQogICAgICAgICAgICAgICAgbW9kZWxzX2RhdGFbbW9kZWxfbmFtZV0gPSAoeV90cnVlLCB5X3ByZWRfcHJvYmEpCiAgICAgICAgeV90cnVlID0gbmV4dChpdGVyKG1vZGVsc19kYXRhLnZhbHVlcygpKSlbMF0KICAgICAgICAKICAgICAgICAjIENhbGN1bGF0ZSBhbmQgcGxvdCAiVHJlYXQgQWxsIiBjdXJ2ZQogICAgICAgIG5ldF9iZW5lZml0X2FsbCA9IG5wLmFycmF5KFtjYWxjdWxhdGVfbmV0X2JlbmVmaXQoeV90cnVlLCBucC5vbmVzX2xpa2UoeV90cnVlKSwgdCkgZm9yIHQgaW4gdGhyZXNob2xkc10pCiAgICAgICAgcGx0LnBsb3QodGhyZXNob2xkcywgbmV0X2JlbmVmaXRfYWxsLCAnay0tJywgbGFiZWw9J1RyZWF0IEFsbCcsIGxpbmV3aWR0aD0xLjUpCiAgICAgICAgCiAgICAgICAgIyBDYWxjdWxhdGUgYW5kIHBsb3QgIlRyZWF0IE5vbmUiIGN1cnZlCiAgICAgICAgbmV0X2JlbmVmaXRfbm9uZSA9IG5wLmFycmF5KFtjYWxjdWxhdGVfbmV0X2JlbmVmaXQoeV90cnVlLCBucC56ZXJvc19saWtlKHlfdHJ1ZSksIHQpIGZvciB0IGluIHRocmVzaG9sZHNdKQogICAgICAgIHBsdC5wbG90KHRocmVzaG9sZHMsIG5ldF9iZW5lZml0X25vbmUsICdrLScsIGxhYmVsPSdUcmVhdCBOb25lJywgbGluZXdpZHRoPTEuNSkKICAgICAgICAKICAgICAgICAjIFBsb3QgZGVjaXNpb24gY3VydmVzIGZvciBlYWNoIG1vZGVsCiAgICAgICAgZm9yIG1vZGVsX25hbWUsICh5X3RydWUsIHlfcHJlZF9wcm9iYSkgaW4gbW9kZWxzX2RhdGEuaXRlbXMoKToKICAgICAgICAgICAgbmV0X2JlbmVmaXRzID0gbnAuYXJyYXkoW2NhbGN1bGF0ZV9uZXRfYmVuZWZpdCh5X3RydWUsIHlfcHJlZF9wcm9iYSwgdCkgZm9yIHQgaW4gdGhyZXNob2xkc10pCiAgICAgICAgICAgIHBsdC5wbG90KHRocmVzaG9sZHMsIG5ldF9iZW5lZml0cywgJy0nLCBsaW5ld2lkdGg9MS41LCBsYWJlbD1tb2RlbF9uYW1lKQogICAgICAgIAogICAgICAgICMgQmVhdXRpZnkgdGhlIHBsb3QKICAgICAgICBwbHQueGxhYmVsKCdUaHJlc2hvbGQgUHJvYmFiaWxpdHknLCBmb250c2l6ZT0xMikKICAgICAgICBwbHQueWxhYmVsKCdOZXQgQmVuZWZpdCcsIGZvbnRzaXplPTEyKQogICAgICAgIHRpdGxlID0gZiJ7J1RyYWluaW5nJyBpZiB0aXRsZS5sb3dlcigpID09ICd0cmFpbicgZWxzZSAnVGVzdGluZyd9IFNldCBEZWNpc2lvbiBDdXJ2ZSBBbmFseXNpcyIKICAgICAgICBwbHQudGl0bGUodGl0bGUsIGZvbnRzaXplPTE0KQogICAgICAgIHBsdC5ncmlkKFRydWUsIGxpbmVzdHlsZT0nLS0nLCBhbHBoYT0wLjcpCiAgICAgICAgcGx0LmdjYSgpLnNldF9mYWNlY29sb3IoJyNmOGY5ZmEnKQogICAgICAgIHBsdC5sZWdlbmQobG9jPSdiZXN0JykKICAgICAgICAKICAgICAgICAjIE9ubHkgc2hvdyBsZWZ0IGFuZCBib3R0b20gc3BpbmVzIGFuZCBzZXQgdGhlaXIgd2lkdGggdG8gMS41CiAgICAgICAgYXggPSBwbHQuZ2NhKCkKICAgICAgICBheC5zcGluZXNbJ3RvcCddLnNldF92aXNpYmxlKEZhbHNlKQogICAgICAgIGF4LnNwaW5lc1sncmlnaHQnXS5zZXRfdmlzaWJsZShGYWxzZSkKICAgICAgICBheC5zcGluZXNbJ2JvdHRvbSddLnNldF92aXNpYmxlKFRydWUpCiAgICAgICAgYXguc3BpbmVzWydsZWZ0J10uc2V0X3Zpc2libGUoVHJ1ZSkKICAgICAgICBheC5zcGluZXNbJ2JvdHRvbSddLnNldF9saW5ld2lkdGgoMS41KQogICAgICAgIGF4LnNwaW5lc1snbGVmdCddLnNldF9saW5ld2lkdGgoMS41KQogICAgICAgIAogICAgICAgICMgU2FmZWx5IHNldCB5LWF4aXMgcmFuZ2UsIGhhbmRsaW5nIHBvc3NpYmxlIE5hTiBvciBJbmYKICAgICAgICB5X21pbiA9IC0wLjA1ICAjIERlZmF1bHQgbWluaW11bQogICAgICAgIHlfbWF4ID0gMC41ICAgICMgRGVmYXVsdCBtYXhpbXVtCiAgICAgICAgCiAgICAgICAgIyBTYWZlbHkgZ2V0IG1pbmltdW0gb2YgbmV0X2JlbmVmaXRfbm9uZQogICAgICAgIGlmIGxlbihuZXRfYmVuZWZpdF9ub25lKSA+IDAgYW5kIG5wLmlzZmluaXRlKG5ldF9iZW5lZml0X25vbmUpLmFueSgpOgogICAgICAgICAgICBub25lX21pbiA9IG5wLm5hbm1pbihuZXRfYmVuZWZpdF9ub25lW25wLmlzZmluaXRlKG5ldF9iZW5lZml0X25vbmUpXSkKICAgICAgICAgICAgaWYgbnAuaXNmaW5pdGUobm9uZV9taW4pOgogICAgICAgICAgICAgICAgeV9taW4gPSBtaW4oeV9taW4sIG5vbmVfbWluKQogICAgICAgIAogICAgICAgICMgU2FmZWx5IGdldCBtYXhpbXVtIG9mIG5ldF9iZW5lZml0X2FsbAogICAgICAgIGlmIGxlbihuZXRfYmVuZWZpdF9hbGwpID4gMCBhbmQgbnAuaXNmaW5pdGUobmV0X2JlbmVmaXRfYWxsKS5hbnkoKToKICAgICAgICAgICAgYWxsX21heCA9IG5wLm5hbm1heChuZXRfYmVuZWZpdF9hbGxbbnAuaXNmaW5pdGUobmV0X2JlbmVmaXRfYWxsKV0pCiAgICAgICAgICAgIGlmIG5wLmlzZmluaXRlKGFsbF9tYXgpOgogICAgICAgICAgICAgICAgeV9tYXggPSBtYXgoeV9tYXgsIGFsbF9tYXggKyAwLjEpCiAgICAgICAgCiAgICAgICAgcGx0LnlsaW0oW3lfbWluLCB5X21heF0pCiAgICAgICAgCiAgICAgICAgIyBTYXZlIGltYWdlCiAgICAgICAgcGx0LnRpZ2h0X2xheW91dCgpCiAgICAgICAgCiAgICAgICAgIyDmoLnmja7mlofku7bmianlsZXlkI3lhrPlrprmmK/lkKblupTnlKjljovnvKnlkoxEUEnorr7nva4KICAgICAgICBmaWxlX2V4dCA9IG9zLnBhdGguc3BsaXRleHQoc2F2ZV9uYW1lKVsxXS5sb3dlcigpCiAgICAgICAgaWYgZmlsZV9leHQgPT0gJy5wZGYnOgogICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBzYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnKQogICAgICAgIGVsaWYgZmlsZV9leHQgaW4gWycudGlmJywgJy50aWZmJ106CiAgICAgICAgICAgIHBsdC5zYXZlZmlnKG9zLnBhdGguam9pbihzZWxmLm91dHB1dF9kaXIsIHNhdmVfbmFtZSksIGJib3hfaW5jaGVzPSd0aWdodCcsIAogICAgICAgICAgICAgICAgICAgICAgICBkcGk9c2VsZi5kcGksIGZvcm1hdD0ndGlmJywgY29tcHJlc3Npb249J3RpZmZfbHp3JykKICAgICAgICBlbHNlOgogICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBzYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnLCAKICAgICAgICAgICAgICAgICAgICAgICAgZHBpPXNlbGYuZHBpKQogICAgICAgIAogICAgICAgIHBsdC5jbG9zZSgpCiAgICAKICAgIGRlZiBwbG90X2NvbmZ1c2lvbl9tYXRyaXgoc2VsZiwgeV90cnVlOiBucC5uZGFycmF5LCB5X3ByZWQ6IG5wLm5kYXJyYXksIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVfbmFtZTogc3RyID0gJ0NvbmZ1c2lvbl9NYXRyaXgucGRmJywgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IHN0ciA9ICdDb25mdXNpb24gTWF0cml4JywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzc19uYW1lczogTGlzdFtzdHJdID0gTm9uZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub3JtYWxpemU6IGJvb2wgPSBGYWxzZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbWFwOiBzdHIgPSAnQmx1ZXMnKSAtPiBOb25lOgogICAgICAgICIiIgogICAgICAgIFBsb3QgY29uZnVzaW9uIG1hdHJpeAogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHlfdHJ1ZSAobnAubmRhcnJheSk6IFRydWUgbGFiZWxzCiAgICAgICAgICAgIHlfcHJlZCAobnAubmRhcnJheSk6IFByZWRpY3RlZCBsYWJlbHMKICAgICAgICAgICAgc2F2ZV9uYW1lIChzdHIpOiBOYW1lIG9mIHRoZSBmaWxlIHRvIHNhdmUgdGhlIHBsb3QKICAgICAgICAgICAgdGl0bGUgKHN0cik6IFRpdGxlIG9mIHRoZSBwbG90CiAgICAgICAgICAgIGNsYXNzX25hbWVzIChMaXN0W3N0cl0pOiBOYW1lcyBvZiB0aGUgY2xhc3NlcyAoZGVmYXVsdDogTm9uZSwgd2lsbCB1c2UgJzAnLCAnMScgZm9yIGJpbmFyeSBjbGFzc2lmaWNhdGlvbikKICAgICAgICAgICAgbm9ybWFsaXplIChib29sKTogV2hldGhlciB0byBub3JtYWxpemUgdGhlIGNvbmZ1c2lvbiBtYXRyaXggKGRlZmF1bHQ6IEZhbHNlKQogICAgICAgICAgICBjbWFwIChzdHIpOiBDb2xvcm1hcCB0byB1c2UgKGRlZmF1bHQ6ICdCbHVlcycpCiAgICAgICAgIiIiCiAgICAgICAgIyBDYWxjdWxhdGUgY29uZnVzaW9uIG1hdHJpeAogICAgICAgIGNtID0gY29uZnVzaW9uX21hdHJpeCh5X3RydWUsIHlfcHJlZCkKICAgICAgICAKICAgICAgICAjIFNldCBjbGFzcyBuYW1lcyBpZiBub3QgcHJvdmlkZWQKICAgICAgICBpZiBjbGFzc19uYW1lcyBpcyBOb25lOgogICAgICAgICAgICBpZiBjbS5zaGFwZVswXSA9PSAyOiAgIyBCaW5hcnkgY2xhc3NpZmljYXRpb24KICAgICAgICAgICAgICAgIGNsYXNzX25hbWVzID0gWydOZWdhdGl2ZScsICdQb3NpdGl2ZSddCiAgICAgICAgICAgIGVsc2U6ICAjIE11bHRpLWNsYXNzIGNsYXNzaWZpY2F0aW9uCiAgICAgICAgICAgICAgICBjbGFzc19uYW1lcyA9IFtzdHIoaSkgZm9yIGkgaW4gcmFuZ2UoY20uc2hhcGVbMF0pXQogICAgICAgIAogICAgICAgICMgTm9ybWFsaXplIHRoZSBjb25mdXNpb24gbWF0cml4IGlmIHJlcXVlc3RlZAogICAgICAgIGlmIG5vcm1hbGl6ZToKICAgICAgICAgICAgY20gPSBjbS5hc3R5cGUoJ2Zsb2F0JykgLyBjbS5zdW0oYXhpcz0xKVs6LCBucC5uZXdheGlzXQogICAgICAgICAgICBmbXQgPSAnLjJmJwogICAgICAgICAgICB0aXRsZSA9IGYnTm9ybWFsaXplZCB7dGl0bGV9JwogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGZtdCA9ICdkJwogICAgICAgIAogICAgICAgICMgQ3JlYXRlIGZpZ3VyZSBhbmQgcGxvdCBjb25mdXNpb24gbWF0cml4CiAgICAgICAgcGx0LmZpZ3VyZShmaWdzaXplPSg4LCA2KSkKICAgICAgICBzbnMuaGVhdG1hcChjbSwgYW5ub3Q9VHJ1ZSwgZm10PWZtdCwgY21hcD1jbWFwLCAKICAgICAgICAgICAgICAgICAgIHh0aWNrbGFiZWxzPWNsYXNzX25hbWVzLCB5dGlja2xhYmVscz1jbGFzc19uYW1lcywKICAgICAgICAgICAgICAgICAgIGNiYXI9VHJ1ZSwgc3F1YXJlPVRydWUsIGxpbmV3aWR0aHM9MC41KQogICAgICAgIAogICAgICAgICMgQWRkIGxhYmVscyBhbmQgdGl0bGUKICAgICAgICBwbHQueGxhYmVsKCdQcmVkaWN0ZWQgTGFiZWwnLCBmb250c2l6ZT0xMikKICAgICAgICBwbHQueWxhYmVsKCdUcnVlIExhYmVsJywgZm9udHNpemU9MTIpCiAgICAgICAgcGx0LnRpdGxlKHRpdGxlLCBmb250c2l6ZT0xNCkKICAgICAgICAKICAgICAgICAjIENhbGN1bGF0ZSBhbmQgYWRkIG1ldHJpY3MgdG8gdGhlIHBsb3QKICAgICAgICB0biwgZnAsIGZuLCB0cCA9IGNtLnJhdmVsKCkKICAgICAgICBzZW5zaXRpdml0eSA9IHRwIC8gKHRwICsgZm4pIGlmICh0cCArIGZuKSA+IDAgZWxzZSAwCiAgICAgICAgc3BlY2lmaWNpdHkgPSB0biAvICh0biArIGZwKSBpZiAodG4gKyBmcCkgPiAwIGVsc2UgMAogICAgICAgIGFjY3VyYWN5ID0gKHRwICsgdG4pIC8gKHRwICsgdG4gKyBmcCArIGZuKQogICAgICAgIAogICAgICAgIHBsdC5maWd0ZXh0KDAuNSwgMC4wMSwgCiAgICAgICAgICAgICAgICAgIGYnQWNjdXJhY3k6IHthY2N1cmFjeTouM2Z9LCBTZW5zaXRpdml0eToge3NlbnNpdGl2aXR5Oi4zZn0sIFNwZWNpZmljaXR5OiB7c3BlY2lmaWNpdHk6LjNmfScsCiAgICAgICAgICAgICAgICAgIGhhPSdjZW50ZXInLCBmb250c2l6ZT0xMCwgYmJveD1kaWN0KGZhY2Vjb2xvcj0nd2hpdGUnLCBhbHBoYT0wLjgsIGJveHN0eWxlPSdyb3VuZCxwYWQ9MC41JykpCiAgICAgICAgCiAgICAgICAgIyBBZGp1c3QgcGxvdCBhZXN0aGV0aWNzCiAgICAgICAgcGx0LnRpZ2h0X2xheW91dChyZWN0PVswLCAwLjA1LCAxLCAwLjk1XSkKICAgICAgICAKICAgICAgICAjIFNhdmUgZmlndXJlCiAgICAgICAgZmlsZV9leHQgPSBvcy5wYXRoLnNwbGl0ZXh0KHNhdmVfbmFtZSlbMV0ubG93ZXIoKQogICAgICAgIGlmIGZpbGVfZXh0ID09ICcucGRmJzoKICAgICAgICAgICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKHNlbGYub3V0cHV0X2Rpciwgc2F2ZV9uYW1lKSwgYmJveF9pbmNoZXM9J3RpZ2h0JykKICAgICAgICBlbGlmIGZpbGVfZXh0IGluIFsnLnRpZicsICcudGlmZiddOgogICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBzYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnLCAKICAgICAgICAgICAgICAgICAgICAgICAgZHBpPXNlbGYuZHBpLCBmb3JtYXQ9J3RpZicsIGNvbXByZXNzaW9uPSd0aWZmX2x6dycpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKHNlbGYub3V0cHV0X2Rpciwgc2F2ZV9uYW1lKSwgYmJveF9pbmNoZXM9J3RpZ2h0JywgCiAgICAgICAgICAgICAgICAgICAgICAgIGRwaT1zZWxmLmRwaSkKICAgICAgICAKICAgICAgICBwbHQuY2xvc2UoKQogICAgCiAgICBkZWYgY2FsY3VsYXRlX25ldF9iZW5lZml0KHNlbGYsIHlfdHJ1ZSwgeV9wcmVkX3Byb2JhLCB0aHJlc2hvbGQpOgogICAgICAgICIiIgogICAgICAgIENhbGN1bGF0ZSB0aGUgbmV0IGJlbmVmaXQgYXQgYSBnaXZlbiB0aHJlc2hvbGQgZm9yIGRlY2lzaW9uIGN1cnZlIGFuYWx5c2lzLgogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIHlfdHJ1ZSAobnAubmRhcnJheSk6IFRydWUgYmluYXJ5IGxhYmVscyAoMCBvciAxKQogICAgICAgICAgICB5X3ByZWRfcHJvYmEgKG5wLm5kYXJyYXkpOiBQcmVkaWN0ZWQgcHJvYmFiaWxpdGllcwogICAgICAgICAgICB0aHJlc2hvbGQgKGZsb2F0KTogRGVjaXNpb24gdGhyZXNob2xkIGZvciBjbGFzc2lmaWNhdGlvbgogICAgICAgICAgICAKICAgICAgICBSZXR1cm5zOgogICAgICAgICAgICBmbG9hdDogTmV0IGJlbmVmaXQgdmFsdWUgYXQgdGhlIGdpdmVuIHRocmVzaG9sZAogICAgICAgICIiIgogICAgICAgICMgSGFuZGxlIGJvdW5kYXJ5IGNhc2VzCiAgICAgICAgaWYgdGhyZXNob2xkID49IDAuOTk5OiAgIyBQcmV2ZW50IGRpdmlzaW9uIGJ5IHZhbHVlcyBjbG9zZSB0byB6ZXJvCiAgICAgICAgICAgIHJldHVybiAwLjAKICAgICAgICAgICAgCiAgICAgICAgIyBDb252ZXJ0IHRvIGJpbmFyeSBwcmVkaWN0aW9uIGJhc2VkIG9uIHRocmVzaG9sZAogICAgICAgIHlfcHJlZCA9ICh5X3ByZWRfcHJvYmEgPj0gdGhyZXNob2xkKS5hc3R5cGUoaW50KQogICAgICAgIAogICAgICAgICMgQ2FsY3VsYXRlIHRydWUgcG9zaXRpdmVzIGFuZCBmYWxzZSBwb3NpdGl2ZXMKICAgICAgICBUUCA9IG5wLnN1bSgoeV9wcmVkID09IDEpICYgKHlfdHJ1ZSA9PSAxKSkKICAgICAgICBGUCA9IG5wLnN1bSgoeV9wcmVkID09IDEpICYgKHlfdHJ1ZSA9PSAwKSkKICAgICAgICAKICAgICAgICAjIFRvdGFsIHNhbXBsZSBjb3VudAogICAgICAgIG4gPSBsZW4oeV90cnVlKQogICAgICAgIAogICAgICAgICMgQ2FsY3VsYXRlIG5ldCBiZW5lZml0CiAgICAgICAgaWYgVFAgKyBGUCA9PSAwOgogICAgICAgICAgICByZXR1cm4gMAogICAgICAgIGVsc2U6CiAgICAgICAgICAgIGJlbmVmaXQgPSAoVFAgLyBuKSAtIChGUCAvIG4pICogKHRocmVzaG9sZCAvICgxIC0gdGhyZXNob2xkKSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgRW5zdXJlIHJldHVybmVkIHZhbHVlIGlzIGZpbml0ZQogICAgICAgICAgICBpZiBub3QgbnAuaXNmaW5pdGUoYmVuZWZpdCk6CiAgICAgICAgICAgICAgICByZXR1cm4gMC4wCiAgICAgICAgICAgIHJldHVybiBiZW5lZml0CiAgICAKICAgIGRlZiBwbG90X2NhbGlicmF0aW9uX3YyKHNlbGYsIG1vZGVsc19kYXRhOiBEaWN0W3N0ciwgVHVwbGVbbnAubmRhcnJheSwgbnAubmRhcnJheV1dLCBzYXZlX25hbWU6IHN0ciA9ICdDYWxpYnJhdGlvbi5wZGYnLCBuX2JpbnM6IGludCA9IDUsIHRpdGxlOiBzdHIgPSAndGVzdCcpIC0+IE5vbmU6CiAgICAgICAgIiIiCiAgICAgICAgUGxvdCBjYWxpYnJhdGlvbiBjdXJ2ZXMgZm9yIGEgc2luZ2xlIGRhdGFzZXQgKG9wdGltaXplZCB2ZXJzaW9uKQogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIG1vZGVsc19kYXRhOiBEaWN0aW9uYXJ5IHdpdGggbW9kZWwgbmFtZXMgYXMga2V5cyBhbmQgKHlfdHJ1ZSwgeV9wcmVkX3Byb2JhKSB0dXBsZXMgYXMgdmFsdWVzCiAgICAgICAgICAgIHNhdmVfbmFtZTogTmFtZSBvZiB0aGUgZmlsZSB0byBzYXZlIHRoZSBwbG90CiAgICAgICAgICAgIG5fYmluczogTnVtYmVyIG9mIGJpbnMgdG8gdXNlIGZvciBjYWxpYnJhdGlvbiBjdXJ2ZQogICAgICAgICAgICB0aXRsZTogRGF0YSB0eXBlIGZvciB0aXRsZSBkaXNwbGF5ICgndHJhaW4nIG9yICd0ZXN0JykKICAgICAgICAiIiIKICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDgsIDgpKQogICAgICAgIAogICAgICAgICMgUGxvdCBjYWxpYnJhdGlvbiBjdXJ2ZXMgZm9yIGVhY2ggbW9kZWwKICAgICAgICBmb3IgbW9kZWxfbmFtZSwgKHlfdHJ1ZSwgeV9wcmVkX3Byb2JhKSBpbiBtb2RlbHNfZGF0YS5pdGVtcygpOgogICAgICAgICAgICAjIEVuc3VyZSBwcmVkaWN0ZWQgcHJvYmFiaWxpdGllcyBhcmUgd2l0aGluIDAtMSByYW5nZQogICAgICAgICAgICB5X3ByZWRfbm9ybWFsaXplZCA9ICh5X3ByZWRfcHJvYmEgLSBucC5taW4oeV9wcmVkX3Byb2JhKSkgLyAobnAubWF4KHlfcHJlZF9wcm9iYSkgLSBucC5taW4oeV9wcmVkX3Byb2JhKSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ2FsY3VsYXRlIGNhbGlicmF0aW9uIGN1cnZlCiAgICAgICAgICAgIHByb2JfdHJ1ZSwgcHJvYl9wcmVkID0gY2FsaWJyYXRpb25fY3VydmUoeV90cnVlLCB5X3ByZWRfbm9ybWFsaXplZCwgbl9iaW5zPW5fYmlucywgc3RyYXRlZ3k9J3F1YW50aWxlJykKICAgICAgICAgICAgcGx0LnBsb3QocHJvYl9wcmVkLCBwcm9iX3RydWUsICdzLScsIGxpbmV3aWR0aD0xLjUsIG1hcmtlcnNpemU9OCwgbGFiZWw9bW9kZWxfbmFtZSkKICAgICAgICAKICAgICAgICAjIEFkZCBpZGVhbCBjYWxpYnJhdGlvbiBsaW5lIGFuZCBiZWF1dGlmeSB0aGUgcGxvdAogICAgICAgIHBsdC5wbG90KFswLCAxXSwgWzAsIDFdLCAnay0tJywgbGluZXdpZHRoPTEuNSwgbGFiZWw9J1BlcmZlY3RseSBDYWxpYnJhdGVkJykKICAgICAgICBwbHQueGxhYmVsKCdNZWFuIFByZWRpY3RlZCBQcm9iYWJpbGl0eScsIGZvbnRzaXplPTEyKQogICAgICAgIHBsdC55bGFiZWwoJ1Bvc2l0aXZlIFNhbXBsZSBQcm9wb3J0aW9uJywgZm9udHNpemU9MTIpCiAgICAgICAgCiAgICAgICAgIyBTZXQgdGl0bGUgYmFzZWQgb24gZGF0YSB0eXBlCiAgICAgICAgdGl0bGUgPSBmInsnVHJhaW5pbmcnIGlmIHRpdGxlLmxvd2VyKCkgPT0gJ3RyYWluJyBlbHNlICdUZXN0aW5nJ30gU2V0IENhbGlicmF0aW9uIEN1cnZlcyIKICAgICAgICBwbHQudGl0bGUodGl0bGUsIGZvbnRzaXplPTE0KQogICAgICAgIAogICAgICAgIHBsdC5sZWdlbmQobG9jPSdiZXN0JywgZnJhbWVvbj1UcnVlLCBmYWNlY29sb3I9J3doaXRlJywgZnJhbWVhbHBoYT0wLjkpCiAgICAgICAgcGx0LmdyaWQoVHJ1ZSwgbGluZXN0eWxlPSctLScsIGFscGhhPTAuNykKICAgICAgICBwbHQuZ2NhKCkuc2V0X2ZhY2Vjb2xvcignI2Y4ZjlmYScpCiAgICAgICAgCiAgICAgICAgIyBPbmx5IHNob3cgbGVmdCBhbmQgYm90dG9tIHNwaW5lcyBhbmQgc2V0IHRoZWlyIHdpZHRoIHRvIDEuNQogICAgICAgIGF4ID0gcGx0LmdjYSgpCiAgICAgICAgYXguc3BpbmVzWyd0b3AnXS5zZXRfdmlzaWJsZShGYWxzZSkKICAgICAgICBheC5zcGluZXNbJ3JpZ2h0J10uc2V0X3Zpc2libGUoRmFsc2UpCiAgICAgICAgYXguc3BpbmVzWydib3R0b20nXS5zZXRfdmlzaWJsZShUcnVlKQogICAgICAgIGF4LnNwaW5lc1snbGVmdCddLnNldF92aXNpYmxlKFRydWUpCiAgICAgICAgYXguc3BpbmVzWydib3R0b20nXS5zZXRfbGluZXdpZHRoKDEuNSkKICAgICAgICBheC5zcGluZXNbJ2xlZnQnXS5zZXRfbGluZXdpZHRoKDEuNSkKICAgICAgICAKICAgICAgICAjIEV4cGFuZCBheGlzIHJhbmdlCiAgICAgICAgcGx0LnhsaW0oWy0wLjA1LCAxLjA1XSkKICAgICAgICBwbHQueWxpbShbLTAuMDUsIDEuMDVdKQogICAgICAgIAogICAgICAgICMgU2F2ZSBpbWFnZQogICAgICAgIHBsdC50aWdodF9sYXlvdXQoKQogICAgICAgIAogICAgICAgICMg5qC55o2u5paH5Lu25omp5bGV5ZCN5Yaz5a6a5piv5ZCm5bqU55So5Y6L57yp5ZKMRFBJ6K6+572uCiAgICAgICAgZmlsZV9leHQgPSBvcy5wYXRoLnNwbGl0ZXh0KHNhdmVfbmFtZSlbMV0ubG93ZXIoKQogICAgICAgIGlmIGZpbGVfZXh0ID09ICcucGRmJzoKICAgICAgICAgICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKHNlbGYub3V0cHV0X2Rpciwgc2F2ZV9uYW1lKSwgYmJveF9pbmNoZXM9J3RpZ2h0JykKICAgICAgICBlbGlmIGZpbGVfZXh0IGluIFsnLnRpZicsICcudGlmZiddOgogICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBzYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnLCAKICAgICAgICAgICAgICAgICAgICAgICAgZHBpPXNlbGYuZHBpLCBmb3JtYXQ9J3RpZicsIGNvbXByZXNzaW9uPSd0aWZmX2x6dycpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKHNlbGYub3V0cHV0X2Rpciwgc2F2ZV9uYW1lKSwgYmJveF9pbmNoZXM9J3RpZ2h0JywgCiAgICAgICAgICAgICAgICAgICAgICAgIGRwaT1zZWxmLmRwaSkKICAgICAgICAKICAgICAgICBwbHQuY2xvc2UoKQogICAgICAgICAgICAgCiAgICBkZWYgcGxvdF9zaGFwKHNlbGYsIG1vZGVsOiBBbnksIFg6IG5wLm5kYXJyYXksIGZlYXR1cmVfbmFtZXM6IExpc3Rbc3RyXSwgc2F2ZV9uYW1lOiBzdHIgPSAnU0hBUC5wZGYnLCAKICAgICAgICAgICAgICAgICBuX3NhbXBsZXNfdG9fcGxvdDogaW50ID0gNSkgLT4gTm9uZToKICAgICAgICAiIiIKICAgICAgICBQbG90IFNIQVAgdmFsdWVzIHdpdGggbXVsdGlwbGUgdmlzdWFsaXphdGlvbiB0eXBlcwogICAgICAgIAogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIG1vZGVsIChBbnkpOiBUcmFpbmVkIG1vZGVsCiAgICAgICAgICAgIFggKG5wLm5kYXJyYXkpOiBGZWF0dXJlIGRhdGEKICAgICAgICAgICAgZmVhdHVyZV9uYW1lcyAoTGlzdFtzdHJdKTogTGlzdCBvZiBmZWF0dXJlIG5hbWVzCiAgICAgICAgICAgIHNhdmVfbmFtZSAoc3RyKTogTmFtZSBvZiB0aGUgZmlsZSB0byBzYXZlIHRoZSBwbG90CiAgICAgICAgICAgIG5fc2FtcGxlc190b19wbG90IChpbnQpOiBOdW1iZXIgb2YgaW5kaXZpZHVhbCBzYW1wbGVzIHRvIHBsb3QgZm9yIGZvcmNlIGFuZCB3YXRlcmZhbGwgcGxvdHMKICAgICAgICAiIiIKICAgICAgICAjIENyZWF0ZSBTSEFQIGV4cGxhaW5lcgogICAgICAgIHRyeToKICAgICAgICAgICAgc2hhcC5pbml0anMoKQogICAgICAgICAgICBpbXBvcnQgbWF0cGxvdGxpYgogICAgICAgICAgICBtYXRwbG90bGliLnVzZSgnQWdnJykgICMgVXNlIG5vbi1pbnRlcmFjdGl2ZSBiYWNrZW5kIGZvciBzYXZpbmcgZmlndXJlcwogICAgICAgICAgICAKICAgICAgICAgICAgIyBGaXJzdCBjaGVjayBpZiBtb2RlbCBoYXMgZ2V0X21vZGVsIG1ldGhvZCAoY3VzdG9tIG1vZGVsIHdyYXBwZXIpCiAgICAgICAgICAgIGlmIGhhc2F0dHIobW9kZWwsICdnZXRfbW9kZWwnKToKICAgICAgICAgICAgICAgICMgR2V0IHRoZSB1bmRlcmx5aW5nIG1vZGVsCiAgICAgICAgICAgICAgICBiYXNlX21vZGVsID0gbW9kZWwuZ2V0X21vZGVsKCkKICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIoYmFzZV9tb2RlbCwgJ2ZlYXR1cmVfaW1wb3J0YW5jZXNfJyk6CiAgICAgICAgICAgICAgICAgICAgIyBUcmVlIG1vZGVsCiAgICAgICAgICAgICAgICAgICAgZXhwbGFpbmVyID0gc2hhcC5UcmVlRXhwbGFpbmVyKGJhc2VfbW9kZWwpCiAgICAgICAgICAgICAgICBlbGlmIGhhc2F0dHIoYmFzZV9tb2RlbCwgJ2NvZWZfJyk6CiAgICAgICAgICAgICAgICAgICAgIyBMaW5lYXIgbW9kZWwKICAgICAgICAgICAgICAgICAgICBleHBsYWluZXIgPSBzaGFwLkxpbmVhckV4cGxhaW5lcihiYXNlX21vZGVsLCBYKQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAjIE90aGVyIG1vZGVscyAtIHVzZSBLZXJuZWxFeHBsYWluZXIKICAgICAgICAgICAgICAgICAgICBleHBsYWluZXIgPSBzaGFwLktlcm5lbEV4cGxhaW5lcihtb2RlbC5wcmVkaWN0X3Byb2JhLCBYKQogICAgICAgICAgICBlbGlmIGhhc2F0dHIobW9kZWwsICdmZWF0dXJlX2ltcG9ydGFuY2VzXycpOgogICAgICAgICAgICAgICAgIyBUcmVlIG1vZGVsCiAgICAgICAgICAgICAgICBleHBsYWluZXIgPSBzaGFwLlRyZWVFeHBsYWluZXIobW9kZWwpCiAgICAgICAgICAgIGVsaWYgaGFzYXR0cihtb2RlbCwgJ2NvZWZfJyk6CiAgICAgICAgICAgICAgICAjIExpbmVhciBtb2RlbAogICAgICAgICAgICAgICAgZXhwbGFpbmVyID0gc2hhcC5MaW5lYXJFeHBsYWluZXIobW9kZWwsIFgpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAjIE90aGVyIG1vZGVscwogICAgICAgICAgICAgICAgZXhwbGFpbmVyID0gc2hhcC5LZXJuZWxFeHBsYWluZXIobW9kZWwucHJlZGljdCwgWCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgQ3JlYXRlIEV4cGxhbmF0aW9uIG9iamVjdCBmb3IgdGhlIG5ld2VyIFNIQVAgQVBJIGlmIHBvc3NpYmxlCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICMgRm9yIG5ld2VyIFNIQVAgdmVyc2lvbnMKICAgICAgICAgICAgICAgIHNoYXBfdmFsdWVzID0gZXhwbGFpbmVyKFgpCiAgICAgICAgICAgICAgICB1c2VfbmV3X2FwaSA9IFRydWUKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgICMgRm9yIG9sZGVyIFNIQVAgdmVyc2lvbnMKICAgICAgICAgICAgICAgIHNoYXBfdmFsdWVzID0gZXhwbGFpbmVyLnNoYXBfdmFsdWVzKFgpCiAgICAgICAgICAgICAgICB1c2VfbmV3X2FwaSA9IEZhbHNlCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICMgRm9yIGNsYXNzaWZpY2F0aW9uIHByb2JsZW1zLCBzaGFwX3ZhbHVlcyBtYXkgYmUgYSBsaXN0IGNvbnRhaW5pbmcgU0hBUCB2YWx1ZXMgZm9yIGVhY2ggY2xhc3MKICAgICAgICAgICAgICAgIGlmIGlzaW5zdGFuY2Uoc2hhcF92YWx1ZXMsIGxpc3QpOgogICAgICAgICAgICAgICAgICAgIHNoYXBfdmFsdWVzID0gc2hhcF92YWx1ZXNbMV0gICMgVGFrZSBTSEFQIHZhbHVlcyBmb3IgcG9zaXRpdmUgY2xhc3MKICAgICAgICAgICAgCiAgICAgICAgICAgICMgRW5zdXJlIGZlYXR1cmUgbmFtZXMgbGlzdCBtYXRjaGVzIHRoZSBudW1iZXIgb2YgZmVhdHVyZXMKICAgICAgICAgICAgaWYgbGVuKGZlYXR1cmVfbmFtZXMpICE9IFguc2hhcGVbMV06CiAgICAgICAgICAgICAgICBwcmludChmIldhcm5pbmc6IEZlYXR1cmUgbmFtZXMgbGlzdCBsZW5ndGggKHtsZW4oZmVhdHVyZV9uYW1lcyl9KSBkb2VzIG5vdCBtYXRjaCBudW1iZXIgb2YgZmVhdHVyZXMgKHtYLnNoYXBlWzFdfSkiKQogICAgICAgICAgICAgICAgZmVhdHVyZV9uYW1lcyA9IFtmIkZlYXR1cmUge2l9IiBmb3IgaSBpbiByYW5nZShYLnNoYXBlWzFdKV0KICAgICAgICAgICAgCiAgICAgICAgICAgICMgMS4gQmVlc3dhcm0gUGxvdCAoU3VtbWFyeSBQbG90KQogICAgICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDEwLCA2KSkKICAgICAgICAgICAgaWYgdXNlX25ld19hcGk6CiAgICAgICAgICAgICAgICBzaGFwLnBsb3RzLmJlZXN3YXJtKHNoYXBfdmFsdWVzLCBzaG93PUZhbHNlKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgc2hhcC5zdW1tYXJ5X3Bsb3Qoc2hhcF92YWx1ZXMsIFgsIGZlYXR1cmVfbmFtZXM9ZmVhdHVyZV9uYW1lcywgc2hvdz1GYWxzZSkKICAgICAgICAgICAgcGx0LnRpdGxlKCdGZWF0dXJlIEltcG9ydGFuY2UgKFNIQVApJykKICAgICAgICAgICAgCiAgICAgICAgICAgICMgU2F2ZSBiZWVzd2FybSBwbG90CiAgICAgICAgICAgIGJlZXN3YXJtX3NhdmVfbmFtZSA9IHNhdmVfbmFtZS5yZXBsYWNlKG9zLnBhdGguc3BsaXRleHQoc2F2ZV9uYW1lKVsxXSwgZidfYmVlc3dhcm17b3MucGF0aC5zcGxpdGV4dChzYXZlX25hbWUpWzFdfScpCiAgICAgICAgICAgIGZpbGVfZXh0ID0gb3MucGF0aC5zcGxpdGV4dChiZWVzd2FybV9zYXZlX25hbWUpWzFdLmxvd2VyKCkKICAgICAgICAgICAgaWYgZmlsZV9leHQgPT0gJy5wZGYnOgogICAgICAgICAgICAgICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKHNlbGYub3V0cHV0X2RpciwgYmVlc3dhcm1fc2F2ZV9uYW1lKSwgYmJveF9pbmNoZXM9J3RpZ2h0JykKICAgICAgICAgICAgZWxpZiBmaWxlX2V4dCBpbiBbJy50aWYnLCAnLnRpZmYnXToKICAgICAgICAgICAgICAgIHBsdC5zYXZlZmlnKG9zLnBhdGguam9pbihzZWxmLm91dHB1dF9kaXIsIGJlZXN3YXJtX3NhdmVfbmFtZSksIGJib3hfaW5jaGVzPSd0aWdodCcsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgZHBpPXNlbGYuZHBpLCBmb3JtYXQ9J3RpZicsIGNvbXByZXNzaW9uPSd0aWZmX2x6dycpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBiZWVzd2FybV9zYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRwaT1zZWxmLmRwaSkKICAgICAgICAgICAgcGx0LmNsb3NlKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgMi4gQmFyIFBsb3Qgd2l0aCBpbXByb3ZlZCBzYXR1cmF0aW9uCiAgICAgICAgICAgIHBsdC5maWd1cmUoZmlnc2l6ZT0oMTAsIDYpKQogICAgICAgICAgICBpZiB1c2VfbmV3X2FwaToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAjIEZpcnN0IHRyeSB0aGUgZGlyZWN0IGJhciBwbG90IGZ1bmN0aW9uIGluIG5ld2VyIHZlcnNpb25zCiAgICAgICAgICAgICAgICAgICAgc2hhcC5wbG90cy5iYXIoc2hhcF92YWx1ZXMsIHNob3c9RmFsc2UpCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgICAgICMgRmFsbGJhY2sgdG8gdXNpbmcgc3VtbWFyeSBwbG90IHdpdGggYmFyIHBsb3RfdHlwZQogICAgICAgICAgICAgICAgICAgIGlmIGhhc2F0dHIoc2hhcF92YWx1ZXMsICd2YWx1ZXMnKToKICAgICAgICAgICAgICAgICAgICAgICAgIyBFeHRyYWN0IHZhbHVlcyBmcm9tIEV4cGxhbmF0aW9uIG9iamVjdCBpZiBhdmFpbGFibGUKICAgICAgICAgICAgICAgICAgICAgICAgdmFscyA9IHNoYXBfdmFsdWVzLnZhbHVlcwogICAgICAgICAgICAgICAgICAgICAgICBpZiB2YWxzLm5kaW0gPiAyOiAgIyBNdWx0aS1jbGFzcyBjYXNlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxzID0gdmFsc1s6LCA6LCAxXSAgIyBUYWtlIHBvc2l0aXZlIGNsYXNzIHZhbHVlcwogICAgICAgICAgICAgICAgICAgICAgICAjIENhbGN1bGF0ZSBtZWFuIGFic29sdXRlIHZhbHVlIGZvciBlYWNoIGZlYXR1cmUKICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZV9pbXBvcnRhbmNlID0gbnAuYWJzKHZhbHMpLm1lYW4oMCkKICAgICAgICAgICAgICAgICAgICAgICAgIyBTb3J0IGZlYXR1cmVzIGJ5IGltcG9ydGFuY2UKICAgICAgICAgICAgICAgICAgICAgICAgc29ydGVkX2lkeCA9IG5wLmFyZ3NvcnQoZmVhdHVyZV9pbXBvcnRhbmNlKQogICAgICAgICAgICAgICAgICAgICAgICAjIENyZWF0ZSBhIGJhciBwbG90IG1hbnVhbGx5IHdpdGggYmV0dGVyIGNvbG9ycwogICAgICAgICAgICAgICAgICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDEwLCA2KSkKICAgICAgICAgICAgICAgICAgICAgICAgYmFybGlzdCA9IHBsdC5iYXJoKHJhbmdlKGxlbihzb3J0ZWRfaWR4KSksIGZlYXR1cmVfaW1wb3J0YW5jZVtzb3J0ZWRfaWR4XSkKICAgICAgICAgICAgICAgICAgICAgICAgIyBTZXQgYSBtb3JlIHNhdHVyYXRlZCBjb2xvcgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgYmFyIGluIGJhcmxpc3Q6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXIuc2V0X2NvbG9yKCcjMWY3N2I0JykgICMgQSBtb3JlIHNhdHVyYXRlZCBibHVlCiAgICAgICAgICAgICAgICAgICAgICAgIHBsdC55dGlja3MocmFuZ2UobGVuKHNvcnRlZF9pZHgpKSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtmZWF0dXJlX25hbWVzW2ldIGlmIGhhc2F0dHIoc2hhcF92YWx1ZXMsICdmZWF0dXJlX25hbWVzJykgZWxzZSBmIkZlYXR1cmUge2l9IiAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciBpIGluIHNvcnRlZF9pZHhdKQogICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICMgVXNlIHN1bW1hcnkgcGxvdCB3aXRoIGJhciBwbG90X3R5cGUgZm9yIG9sZGVyIHZlcnNpb25zCiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXAuc3VtbWFyeV9wbG90KHNoYXBfdmFsdWVzLCBYLCBmZWF0dXJlX25hbWVzPWZlYXR1cmVfbmFtZXMsIHBsb3RfdHlwZT0iYmFyIiwgc2hvdz1GYWxzZSwgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I9JyMxZjc3YjQnKSAgIyBVc2UgbW9yZSBzYXR1cmF0ZWQgY29sb3IKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICMgVXNlIGEgbW9yZSBzYXR1cmF0ZWQgY29sb3IgcGFsZXR0ZSBmb3Igb2xkZXIgQVBJCiAgICAgICAgICAgICAgICBjdXJyZW50X2NtYXAgPSBwbHQuY20uZ2V0X2NtYXAoJ0JsdWVzJykgICMgR2V0IHRoZSAnQmx1ZXMnIGNvbG9ybWFwCiAgICAgICAgICAgICAgICBzYXR1cmF0ZWRfY21hcCA9IHBsdC5jbS5jb2xvcnMuTGluZWFyU2VnbWVudGVkQ29sb3JtYXAuZnJvbV9saXN0KAogICAgICAgICAgICAgICAgICAgICdzYXR1cmF0ZWRfYmx1ZXMnLCBbY3VycmVudF9jbWFwKDAuMyksIGN1cnJlbnRfY21hcCgxLjApXSwgTj0yNTYpCiAgICAgICAgICAgICAgICBzaGFwLnN1bW1hcnlfcGxvdChzaGFwX3ZhbHVlcywgWCwgZmVhdHVyZV9uYW1lcz1mZWF0dXJlX25hbWVzLCBwbG90X3R5cGU9ImJhciIsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93PUZhbHNlLCBjbWFwPXNhdHVyYXRlZF9jbWFwKQogICAgICAgICAgICBwbHQudGl0bGUoJ0ZlYXR1cmUgSW1wb3J0YW5jZSAoU0hBUCBCYXIgUGxvdCknKQogICAgICAgICAgICAKICAgICAgICAgICAgIyBTYXZlIGJhciBwbG90CiAgICAgICAgICAgICMgRHluYW1pY2FsbHkgcmVwbGFjZSB0aGUgZmlsZSBleHRlbnNpb24gd2l0aCAnX2Jhcicgd2hpbGUgcHJlc2VydmluZyB0aGUgb3JpZ2luYWwgZXh0ZW5zaW9uCiAgICAgICAgICAgIGJhcl9zYXZlX25hbWUgPSBzYXZlX25hbWUucmVwbGFjZShvcy5wYXRoLnNwbGl0ZXh0KHNhdmVfbmFtZSlbMV0sIGYnX2Jhcntvcy5wYXRoLnNwbGl0ZXh0KHNhdmVfbmFtZSlbMV19JykKICAgICAgICAgICAgZmlsZV9leHQgPSBvcy5wYXRoLnNwbGl0ZXh0KGJhcl9zYXZlX25hbWUpWzFdLmxvd2VyKCkKICAgICAgICAgICAgaWYgZmlsZV9leHQgPT0gJy5wZGYnOgogICAgICAgICAgICAgICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKHNlbGYub3V0cHV0X2RpciwgYmFyX3NhdmVfbmFtZSksIGJib3hfaW5jaGVzPSd0aWdodCcpCiAgICAgICAgICAgIGVsaWYgZmlsZV9leHQgaW4gWycudGlmJywgJy50aWZmJ106CiAgICAgICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBiYXJfc2F2ZV9uYW1lKSwgYmJveF9pbmNoZXM9J3RpZ2h0JywgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcGk9c2VsZi5kcGksIGZvcm1hdD0ndGlmJywgY29tcHJlc3Npb249J3RpZmZfbHp3JykKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHBsdC5zYXZlZmlnKG9zLnBhdGguam9pbihzZWxmLm91dHB1dF9kaXIsIGJhcl9zYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRwaT1zZWxmLmRwaSkKICAgICAgICAgICAgcGx0LmNsb3NlKCkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICAgICMgMy4gRm9yY2UgUGxvdHMKICAgICAgICAgICAgIyBHZW5lcmF0ZSBmb3JjZSBwbG90cyBmb3Igbm9uLW5vdGVib29rIGVudmlyb25tZW50cwogICAgICAgICAgICAKICAgICAgICAgICAgIyBQcm9jZXNzIFNIQVAgdmFsdWVzIHRvIGxpbWl0IGRlY2ltYWwgcGxhY2VzIHRvIDMKICAgICAgICAgICAgZm9ybWF0dGVkX3NoYXBfdmFsdWVzID0gcHJvY2Vzc19zaGFwX2V4cGxhbmF0aW9uKHNoYXBfdmFsdWVzLCBkZWNpbWFsX3BsYWNlcz0zKQogICAgICAgICAgICAjIFByb2Nlc3MgWCB2YWx1ZXMgdG8gZW5zdXJlIGZlYXR1cmUgZGlzcGxheSB2YWx1ZXMgYWxzbyBoYXZlIG9ubHkgMyBkZWNpbWFsIHBsYWNlcwogICAgICAgICAgICBmb3JtYXR0ZWRfWCA9IG5wLnJvdW5kKFgsIDMpCiAgICAgICAgICAgIAogICAgICAgICAgICAjIEdlbmVyYXRlIGluZGl2aWR1YWwgZm9yY2UgcGxvdHMgZm9yIGVhY2ggc2FtcGxlCiAgICAgICAgICAgIGZvciBpIGluIHJhbmdlKG1pbihuX3NhbXBsZXNfdG9fcGxvdCwgWC5zaGFwZVswXSkpOgogICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICMgQ3JlYXRlIGZvcmNlIHBsb3QgZm9yIGEgc2luZ2xlIHNhbXBsZQogICAgICAgICAgICAgICAgICAgIGZvcmNlX3Bsb3RfbmFtZSA9IHNhdmVfbmFtZS5yZXBsYWNlKCcucGRmJywgZidfZm9yY2Vfc2FtcGxlX3tpKzF9LnBkZicpCiAgICAgICAgICAgICAgICAgICAgZm9yY2VfcGxvdF9wYXRoID0gb3MucGF0aC5qb2luKHNlbGYub3V0cHV0X2RpciwgZm9yY2VfcGxvdF9uYW1lKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGlmIHVzZV9uZXdfYXBpOgogICAgICAgICAgICAgICAgICAgICAgICAjIEluZGl2aWR1YWwgZm9yY2UgcGxvdCB1c2luZyBuZXcgQVBJCiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBfdmFsdWVzX2luc3RhbmNlID0gZm9ybWF0dGVkX3NoYXBfdmFsdWVzW2ldCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIENyZWF0ZSBmb3JjZSBwbG90IHdpdGggZXhwbGljaXQgZmlndXJlIHNpemUgYW5kIERQSQogICAgICAgICAgICAgICAgICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDIwLCAzKSkKICAgICAgICAgICAgICAgICAgICAgICAgc2hhcC5wbG90cy5mb3JjZShzaGFwX3ZhbHVlc19pbnN0YW5jZSwgbWF0cGxvdGxpYj1UcnVlLCBzaG93PUZhbHNlKQogICAgICAgICAgICAgICAgICAgICAgICBwbHQudGl0bGUoZidTSEFQIEZvcmNlIFBsb3QgZm9yIFNhbXBsZSB7aSsxfScpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAjIFNhdmUgZm9yY2UgcGxvdCB3aXRoIGhpZ2ggRFBJCiAgICAgICAgICAgICAgICAgICAgICAgIHBsdC5zYXZlZmlnKGZvcmNlX3Bsb3RfcGF0aCwgYmJveF9pbmNoZXM9J3RpZ2h0JywgZHBpPTMwMCkKICAgICAgICAgICAgICAgICAgICAgICAgcGx0LmNsb3NlKCkKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJXYXJuaW5nOiBGYWlsZWQgdG8gcGxvdCBmb3JjZSBwbG90IGZvciBzYW1wbGUge2krMX06IHtzdHIoZSl9IikKICAgICAgICAgICAgCiAgICAgICAgICAgICMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiAgICAgICAgICAgICMgNC4gV2F0ZXJmYWxsIFBsb3QgZm9yIGZpcnN0IG5fc2FtcGxlc190b19wbG90IHNhbXBsZXMKICAgICAgICAgICAgaWYgdXNlX25ld19hcGk6CiAgICAgICAgICAgICAgICBmb3IgaSBpbiByYW5nZShtaW4obl9zYW1wbGVzX3RvX3Bsb3QsIFguc2hhcGVbMF0pKToKICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgIHBsdC5maWd1cmUoZmlnc2l6ZT0oMTAsIDYpKQogICAgICAgICAgICAgICAgICAgICAgICBzaGFwLnBsb3RzLndhdGVyZmFsbChzaGFwX3ZhbHVlc1tpXSwgc2hvdz1GYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgcGx0LnRpdGxlKGYnU0hBUCBXYXRlcmZhbGwgUGxvdCBmb3IgU2FtcGxlIHtpKzF9JykKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgU2F2ZSB3YXRlcmZhbGwgcGxvdAogICAgICAgICAgICAgICAgICAgICAgICB3YXRlcmZhbGxfc2F2ZV9uYW1lID0gc2F2ZV9uYW1lLnJlcGxhY2UoJy5wZGYnLCBmJ193YXRlcmZhbGxfc2FtcGxlX3tpKzF9LnBkZicpCiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZXh0ID0gb3MucGF0aC5zcGxpdGV4dCh3YXRlcmZhbGxfc2F2ZV9uYW1lKVsxXS5sb3dlcigpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIGZpbGVfZXh0ID09ICcucGRmJzoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdC5zYXZlZmlnKG9zLnBhdGguam9pbihzZWxmLm91dHB1dF9kaXIsIHdhdGVyZmFsbF9zYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnKQogICAgICAgICAgICAgICAgICAgICAgICBlbGlmIGZpbGVfZXh0IGluIFsnLnRpZicsICcudGlmZiddOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKHNlbGYub3V0cHV0X2Rpciwgd2F0ZXJmYWxsX3NhdmVfbmFtZSksIGJib3hfaW5jaGVzPSd0aWdodCcsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcGk9c2VsZi5kcGksIGZvcm1hdD0ndGlmJywgY29tcHJlc3Npb249J3RpZmZfbHp3JykKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdC5zYXZlZmlnKG9zLnBhdGguam9pbihzZWxmLm91dHB1dF9kaXIsIHdhdGVyZmFsbF9zYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHBpPXNlbGYuZHBpKQogICAgICAgICAgICAgICAgICAgICAgICBwbHQuY2xvc2UoKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJXYXJuaW5nOiBGYWlsZWQgdG8gcGxvdCB3YXRlcmZhbGwgZm9yIHNhbXBsZSB7aSsxfToge3N0cihlKX0iKQogICAgICAgICAgICAKICAgICAgICAgICAgIyA1LiBGZWF0dXJlIGltcG9ydGFuY2UgaGVhdG1hcCBmb3IgbmV3IEFQSSBvciBkZXBlbmRlbmNlIHBsb3RzIGZvciBvbGQgQVBJCiAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgIGlmIHVzZV9uZXdfYXBpOgogICAgICAgICAgICAgICAgICAgICMgSGVhdG1hcAogICAgICAgICAgICAgICAgICAgIHBsdC5maWd1cmUoZmlnc2l6ZT0oMTIsIDgpKQogICAgICAgICAgICAgICAgICAgIHNoYXAucGxvdHMuaGVhdG1hcChzaGFwX3ZhbHVlcywgc2hvdz1GYWxzZSkKICAgICAgICAgICAgICAgICAgICBwbHQudGl0bGUoJ1NIQVAgRmVhdHVyZSBJbXBvcnRhbmNlIEhlYXRtYXAnKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICMgU2F2ZSBoZWF0bWFwCiAgICAgICAgICAgICAgICAgICAgaGVhdG1hcF9zYXZlX25hbWUgPSBzYXZlX25hbWUucmVwbGFjZSgnLnBkZicsICdfaGVhdG1hcC5wZGYnKQogICAgICAgICAgICAgICAgICAgIGZpbGVfZXh0ID0gb3MucGF0aC5zcGxpdGV4dChoZWF0bWFwX3NhdmVfbmFtZSlbMV0ubG93ZXIoKQogICAgICAgICAgICAgICAgICAgIGlmIGZpbGVfZXh0ID09ICcucGRmJzoKICAgICAgICAgICAgICAgICAgICAgICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKHNlbGYub3V0cHV0X2RpciwgaGVhdG1hcF9zYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnKQogICAgICAgICAgICAgICAgICAgIGVsaWYgZmlsZV9leHQgaW4gWycudGlmJywgJy50aWZmJ106CiAgICAgICAgICAgICAgICAgICAgICAgIHBsdC5zYXZlZmlnKG9zLnBhdGguam9pbihzZWxmLm91dHB1dF9kaXIsIGhlYXRtYXBfc2F2ZV9uYW1lKSwgYmJveF9pbmNoZXM9J3RpZ2h0JywgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHBpPXNlbGYuZHBpLCBmb3JtYXQ9J3RpZicsIGNvbXByZXNzaW9uPSd0aWZmX2x6dycpCiAgICAgICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICAgICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKHNlbGYub3V0cHV0X2RpciwgaGVhdG1hcF9zYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkcGk9c2VsZi5kcGkpCiAgICAgICAgICAgICAgICAgICAgcGx0LmNsb3NlKCkKICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgIyBHZXQgZmVhdHVyZSBpbXBvcnRhbmNlIHNjb3JlcwogICAgICAgICAgICAgICAgICAgIGZlYXR1cmVfaW1wb3J0YW5jZSA9IG5wLmFicyhzaGFwX3ZhbHVlcykubWVhbigwKQogICAgICAgICAgICAgICAgICAgIHRvcF9mZWF0dXJlc19pZHggPSBucC5hcmdzb3J0KGZlYXR1cmVfaW1wb3J0YW5jZSlbLTM6XVs6Oi0xXQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIGZvciBpZHggaW4gdG9wX2ZlYXR1cmVzX2lkeDoKICAgICAgICAgICAgICAgICAgICAgICAgcGx0LmZpZ3VyZShmaWdzaXplPSgxMCwgNikpCiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXAuZGVwZW5kZW5jZV9wbG90KGlkeCwgc2hhcF92YWx1ZXMsIFgsIGZlYXR1cmVfbmFtZXM9ZmVhdHVyZV9uYW1lcywgc2hvdz1GYWxzZSkKICAgICAgICAgICAgICAgICAgICAgICAgcGx0LnRpdGxlKGYnU0hBUCBEZXBlbmRlbmNlIFBsb3QgZm9yIHtmZWF0dXJlX25hbWVzW2lkeF19JykKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICMgU2F2ZSBkZXBlbmRlbmNlIHBsb3QKICAgICAgICAgICAgICAgICAgICAgICAgZGVwX3NhdmVfbmFtZSA9IHNhdmVfbmFtZS5yZXBsYWNlKCcucGRmJywgZidfZGVwZW5kZW5jZV97ZmVhdHVyZV9uYW1lc1tpZHhdfS5wZGYnKQogICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2V4dCA9IG9zLnBhdGguc3BsaXRleHQoZGVwX3NhdmVfbmFtZSlbMV0ubG93ZXIoKQogICAgICAgICAgICAgICAgICAgICAgICBpZiBmaWxlX2V4dCA9PSAnLnBkZic6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBkZXBfc2F2ZV9uYW1lKSwgYmJveF9pbmNoZXM9J3RpZ2h0JykKICAgICAgICAgICAgICAgICAgICAgICAgZWxpZiBmaWxlX2V4dCBpbiBbJy50aWYnLCAnLnRpZmYnXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdC5zYXZlZmlnKG9zLnBhdGguam9pbihzZWxmLm91dHB1dF9kaXIsIGRlcF9zYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZHBpPXNlbGYuZHBpLCBmb3JtYXQ9J3RpZicsIGNvbXByZXNzaW9uPSd0aWZmX2x6dycpCiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBkZXBfc2F2ZV9uYW1lKSwgYmJveF9pbmNoZXM9J3RpZ2h0JywgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRwaT1zZWxmLmRwaSkKICAgICAgICAgICAgICAgICAgICAgICAgcGx0LmNsb3NlKCkKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgICAgICAgICAgcHJpbnQoZiJXYXJuaW5nOiBGYWlsZWQgdG8gcGxvdCBhZGRpdGlvbmFsIHZpc3VhbGl6YXRpb25zOiB7c3RyKGUpfSIpCiAgICAgICAgICAgIAogICAgICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToKICAgICAgICAgICAgcHJpbnQoZiJXYXJuaW5nOiBGYWlsZWQgdG8gcGxvdCBTSEFQIHZhbHVlczoge3N0cihlKX0iKQogICAgCiAgICBkZWYgcGxvdF9wcl9jdXJ2ZShzZWxmLCBtb2RlbHNfZGF0YTogRGljdFtzdHIsIFR1cGxlW25wLm5kYXJyYXksIG5wLm5kYXJyYXldXSwgCiAgICAgICAgICAgICAgICAgIHNhdmVfbmFtZTogc3RyID0gJ1BSX2N1cnZlLnBkZicsIAogICAgICAgICAgICAgICAgICB0aXRsZTogc3RyID0gJ2V2YWx1YXRpb24nKSAtPiBOb25lOgoKICAgICAgICAiIiIKICAgICAgICBQbG90IFByZWNpc2lvbi1SZWNhbGwgY3VydmUgZm9yIG11bHRpcGxlIG1vZGVscwogICAgICAgIEFyZ3M6CiAgICAgICAgICAgIG1vZGVsc19kYXRhOiBEaWN0aW9uYXJ5IHdpdGggbW9kZWwgbmFtZXMgYXMga2V5cyBhbmQgKHlfdHJ1ZSwgeV9wcmVkX3Byb2JhKSB0dXBsZXMgYXMgdmFsdWVzCiAgICAgICAgICAgIHNhdmVfbmFtZTogTmFtZSBvZiB0aGUgZmlsZSB0byBzYXZlIHRoZSBwbG90CiAgICAgICAgICAgIHRpdGxlOiBEYXRhIHR5cGUgZm9yIHRpdGxlIGRpc3BsYXkgKCd0cmFpbicsICd0ZXN0Jywgb3IgJ2V2YWx1YXRpb24nKQoKICAgICAgICAiIiIKICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDYsIDYpKQogICAgICAgICMgUGxvdCBQUiBjdXJ2ZXMgZm9yIGVhY2ggbW9kZWwKICAgICAgICBmb3IgbW9kZWxfbmFtZSwgKHlfdHJ1ZSwgeV9wcmVkX3Byb2JhKSBpbiBtb2RlbHNfZGF0YS5pdGVtcygpOgogICAgICAgICAgICBwcmVjaXNpb24sIHJlY2FsbCwgXyA9IHByZWNpc2lvbl9yZWNhbGxfY3VydmUoeV90cnVlLCB5X3ByZWRfcHJvYmEpCiAgICAgICAgICAgICMgQ2FsY3VsYXRlIGF2ZXJhZ2UgcHJlY2lzaW9uIHNjb3JlCiAgICAgICAgICAgIGFwID0gbnAudHJhcHoocHJlY2lzaW9uLCByZWNhbGwpCiAgICAgICAgICAgICMg5YWz6ZSu5L+u5pS577ya57uY5Yi25pe25Lqk5o2ieOWSjHnovbTvvIzkvb/lm77lvaLku47lt6bkuIvliLDlj7PkuIoKICAgICAgICAgICAgcGx0LnBsb3QoMSAtIHByZWNpc2lvbiwgcmVjYWxsLCBsaW5ld2lkdGg9MiwgbGFiZWw9Zid7bW9kZWxfbmFtZX0gKEFQID0ge2FwOi4zZn0pJykKICAgICAgICAKICAgICAgICAjIEJlYXV0aWZ5IHRoZSBwbG90CiAgICAgICAgcGx0LnhsYWJlbCgnMSAtIFByZWNpc2lvbicpICAjIOS/ruaUuVjovbTmoIfnrb4KCiAgICAgICAgcGx0LnlsYWJlbCgnUmVjYWxsJykKICAgICAgICBwbHQudGl0bGUoZidNb2RpZmllZCBQcmVjaXNpb24tUmVjYWxsIEN1cnZlICh7dGl0bGUuY2FwaXRhbGl6ZSgpfSknKQogICAgICAgIHBsdC5sZWdlbmQobG9jPSdiZXN0JykKICAgICAgICBwbHQuZ3JpZChUcnVlLCBsaW5lc3R5bGU9Jy0tJywgYWxwaGE9MC43KQogICAgICAgICMgU2V0IGF4aXMgbGltaXRzIGZvciBsZWZ0LXRvLXJpZ2h0LCBib3R0b20tdG8tdG9wIGRpcmVjdGlvbgogICAgICAgIHBsdC54bGltKFstMC4wMiwgMS4wMl0pCiAgICAgICAgcGx0LnlsaW0oWy0wLjAyLCAxLjAyXSkKCiAgICAgICAgIyBPbmx5IHNob3cgbGVmdCBhbmQgYm90dG9tIHNwaW5lcyBhbmQgc2V0IHRoZWlyIHdpZHRoIHRvIDEuNQogICAgICAgIGF4ID0gcGx0LmdjYSgpCiAgICAgICAgYXguc3BpbmVzWyd0b3AnXS5zZXRfdmlzaWJsZShGYWxzZSkKICAgICAgICBheC5zcGluZXNbJ3JpZ2h0J10uc2V0X3Zpc2libGUoRmFsc2UpCiAgICAgICAgYXguc3BpbmVzWydib3R0b20nXS5zZXRfdmlzaWJsZShUcnVlKQogICAgICAgIGF4LnNwaW5lc1snbGVmdCddLnNldF92aXNpYmxlKFRydWUpCiAgICAgICAgYXguc3BpbmVzWydib3R0b20nXS5zZXRfbGluZXdpZHRoKDEuNSkKICAgICAgICBheC5zcGluZXNbJ2xlZnQnXS5zZXRfbGluZXdpZHRoKDEuNSkKCiAgICAgICAgcGx0LnRpZ2h0X2xheW91dCgpCiAgICAgICAgCiAgICAgICAgIyDmoLnmja7mlofku7bmianlsZXlkI3lhrPlrprmmK/lkKblupTnlKjljovnvKnlkoxEUEnorr7nva4KICAgICAgICBmaWxlX2V4dCA9IG9zLnBhdGguc3BsaXRleHQoc2F2ZV9uYW1lKVsxXS5sb3dlcigpCiAgICAgICAgaWYgZmlsZV9leHQgPT0gJy5wZGYnOgogICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBzYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnKQogICAgICAgIGVsaWYgZmlsZV9leHQgaW4gWycudGlmJywgJy50aWZmJ106CiAgICAgICAgICAgIHBsdC5zYXZlZmlnKG9zLnBhdGguam9pbihzZWxmLm91dHB1dF9kaXIsIHNhdmVfbmFtZSksIGJib3hfaW5jaGVzPSd0aWdodCcsIAogICAgICAgICAgICAgICAgICAgICAgICBkcGk9c2VsZi5kcGksIGZvcm1hdD0ndGlmJywgY29tcHJlc3Npb249J3RpZmZfbHp3JykKICAgICAgICBlbHNlOgogICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4oc2VsZi5vdXRwdXRfZGlyLCBzYXZlX25hbWUpLCBiYm94X2luY2hlcz0ndGlnaHQnLCAKICAgICAgICAgICAgICAgICAgICAgICAgZHBpPXNlbGYuZHBpKQogICAgICAgIAogICAgICAgIHBsdC5jbG9zZSgp').decode())
