
import base64
exec(base64.b64decode(b'IiIiDQpQeXRob24gU3RlcHdpc2UgUmVncmVzc2lvbiBGZWF0dXJlIFNlbGVjdG9yDQoNClVzZXMgZm9yd2FyZCwgYmFja3dhcmQsIG9yIHN0ZXB3aXNlIChiaWRpcmVjdGlvbmFsKSBsb2dpc3RpYyByZWdyZXNzaW9uIGZvciBmZWF0dXJlIHNlbGVjdGlvbiwNCmltcGxlbWVudGVkIHB1cmVseSBpbiBQeXRob24gd2l0aG91dCBSIGRlcGVuZGVuY2llcy4NCiIiIg0KaW1wb3J0IG9zDQppbXBvcnQgcGFuZGFzIGFzIHBkDQppbXBvcnQgbnVtcHkgYXMgbnANCmltcG9ydCBtYXRwbG90bGliLnB5cGxvdCBhcyBwbHQNCmZyb20gdHlwaW5nIGltcG9ydCBMaXN0LCBPcHRpb25hbCwgVHVwbGUsIERpY3QsIFVuaW9uDQpmcm9tIHBhdGhsaWIgaW1wb3J0IFBhdGgNCmltcG9ydCBzdGF0c21vZGVscy5hcGkgYXMgc20NCmZyb20gc3RhdHNtb2RlbHMuZGlzY3JldGUuZGlzY3JldGVfbW9kZWwgaW1wb3J0IExvZ2l0DQppbXBvcnQgd2FybmluZ3MNCg0KZnJvbSBoYWJpdC51dGlscy5wcm9ncmVzc191dGlscyBpbXBvcnQgQ3VzdG9tVHFkbQ0KZnJvbSAuc2VsZWN0b3JfcmVnaXN0cnkgaW1wb3J0IHJlZ2lzdGVyX3NlbGVjdG9yDQoNCmRlZiBkZXRlY3RfZmlsZV90eXBlKGlucHV0X3BhdGg6IHN0cikgLT4gT3B0aW9uYWxbc3RyXToNCiAgICAiIiINCiAgICBBdXRvbWF0aWNhbGx5IGRldGVjdCBmaWxlIHR5cGUNCiAgICANCiAgICBBcmdzOg0KICAgICAgICBpbnB1dF9wYXRoOiBJbnB1dCBmaWxlIHBhdGgNCiAgICAgICAgDQogICAgUmV0dXJuczoNCiAgICAgICAgT3B0aW9uYWxbc3RyXTogRGV0ZWN0ZWQgZmlsZSB0eXBlLCByZXR1cm5zIE5vbmUgaWYgY2Fubm90IGRldGVjdA0KICAgICIiIg0KICAgIGZpbGVfZXh0ID0gUGF0aChpbnB1dF9wYXRoKS5zdWZmaXgubG93ZXIoKQ0KICAgIGZpbGVfdHlwZXMgPSB7DQogICAgICAgICcuY3N2JzogJ2NzdicsDQogICAgICAgICcueGxzeCc6ICdleGNlbCcsDQogICAgICAgICcueGxzJzogJ2V4Y2VsJywNCiAgICAgICAgJy5wYXJxdWV0JzogJ3BhcnF1ZXQnLA0KICAgICAgICAnLmpzb24nOiAnanNvbicsDQogICAgICAgICcucGtsJzogJ3BpY2tsZScsDQogICAgICAgICcucGlja2xlJzogJ3BpY2tsZScNCiAgICB9DQogICAgDQogICAgaWYgZmlsZV9leHQgaW4gZmlsZV90eXBlczoNCiAgICAgICAgcmV0dXJuIGZpbGVfdHlwZXNbZmlsZV9leHRdDQogICAgDQogICAgdHJ5Og0KICAgICAgICB3aXRoIG9wZW4oaW5wdXRfcGF0aCwgJ3InLCBlbmNvZGluZz0ndXRmLTgnKSBhcyBmOg0KICAgICAgICAgICAgZmlyc3RfbGluZSA9IGYucmVhZGxpbmUoKS5zdHJpcCgpDQogICAgICAgICAgICBpZiAnLCcgaW4gZmlyc3RfbGluZSBhbmQgbGVuKGZpcnN0X2xpbmUuc3BsaXQoJywnKSkgPiAxOg0KICAgICAgICAgICAgICAgIHJldHVybiAnY3N2Jw0KICAgICAgICAgICAgZWxpZiBmaXJzdF9saW5lLnN0YXJ0c3dpdGgoJ3snKSBvciBmaXJzdF9saW5lLnN0YXJ0c3dpdGgoJ1snKToNCiAgICAgICAgICAgICAgICByZXR1cm4gJ2pzb24nDQogICAgZXhjZXB0Og0KICAgICAgICBwYXNzDQogICAgDQogICAgcmV0dXJuIE5vbmUNCg0KZGVmIGxvYWRfZGF0YShpbnB1dF9kYXRhOiBVbmlvbltzdHIsIHBkLkRhdGFGcmFtZV0sIA0KICAgICAgICAgICAgICB0YXJnZXRfY29sdW1uOiBPcHRpb25hbFtzdHJdID0gTm9uZSwNCiAgICAgICAgICAgICAgZmlsZV90eXBlOiBPcHRpb25hbFtzdHJdID0gTm9uZSwNCiAgICAgICAgICAgICAgY29sdW1uczogT3B0aW9uYWxbVW5pb25bc3RyLCBMaXN0W3N0cl1dXSA9IE5vbmUpIC0+IFR1cGxlW3BkLkRhdGFGcmFtZSwgcGQuU2VyaWVzXToNCiAgICAiIiINCiAgICBMb2FkIGRhdGEgZnJvbSB2YXJpb3VzIGZvcm1hdHMNCiAgICANCiAgICBBcmdzOg0KICAgICAgICBpbnB1dF9kYXRhOiBJbnB1dCBkYXRhIHBhdGggb3IgRGF0YUZyYW1lIG9iamVjdA0KICAgICAgICB0YXJnZXRfY29sdW1uOiBUYXJnZXQgdmFyaWFibGUgY29sdW1uIG5hbWUNCiAgICAgICAgZmlsZV90eXBlOiBGaWxlIHR5cGUNCiAgICAgICAgY29sdW1uczogRmVhdHVyZSBjb2x1bW4gc2VsZWN0aW9uDQogICAgICAgIA0KICAgIFJldHVybnM6DQogICAgICAgIFR1cGxlW3BkLkRhdGFGcmFtZSwgcGQuU2VyaWVzXTogRmVhdHVyZSBkYXRhIGFuZCB0YXJnZXQgdmFyaWFibGUNCiAgICAiIiINCiAgICBpZiBpc2luc3RhbmNlKGlucHV0X2RhdGEsIHBkLkRhdGFGcmFtZSk6DQogICAgICAgIGRhdGEgPSBpbnB1dF9kYXRhDQogICAgZWxzZToNCiAgICAgICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKGlucHV0X2RhdGEpOg0KICAgICAgICAgICAgcmFpc2UgRmlsZU5vdEZvdW5kRXJyb3IoZiJFcnJvcjogRmlsZSB7aW5wdXRfZGF0YX0gZG9lcyBub3QgZXhpc3QiKQ0KICAgICAgICANCiAgICAgICAgaWYgZmlsZV90eXBlIGlzIE5vbmU6DQogICAgICAgICAgICBmaWxlX3R5cGUgPSBkZXRlY3RfZmlsZV90eXBlKGlucHV0X2RhdGEpDQogICAgICAgICAgICBpZiBmaWxlX3R5cGUgaXMgTm9uZToNCiAgICAgICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGYiQ2Fubm90IGRldGVjdCBmaWxlIHR5cGU6IHtpbnB1dF9kYXRhfSIpDQogICAgICAgICAgICBwcmludChmIkF1dG9tYXRpY2FsbHkgZGV0ZWN0ZWQgZmlsZSB0eXBlOiB7ZmlsZV90eXBlfSIpDQogICAgICAgIA0KICAgICAgICBsb2FkZXJzID0gew0KICAgICAgICAgICAgJ2Nzdic6IHBkLnJlYWRfY3N2LA0KICAgICAgICAgICAgJ2V4Y2VsJzogcGQucmVhZF9leGNlbCwNCiAgICAgICAgICAgICdwYXJxdWV0JzogcGQucmVhZF9wYXJxdWV0LA0KICAgICAgICAgICAgJ2pzb24nOiBwZC5yZWFkX2pzb24sDQogICAgICAgICAgICAncGlja2xlJzogcGQucmVhZF9waWNrbGUNCiAgICAgICAgfQ0KICAgICAgICANCiAgICAgICAgaWYgZmlsZV90eXBlLmxvd2VyKCkgbm90IGluIGxvYWRlcnM6DQogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKGYiVW5zdXBwb3J0ZWQgZmlsZSB0eXBlOiB7ZmlsZV90eXBlfSIpDQogICAgICAgIA0KICAgICAgICB0cnk6DQogICAgICAgICAgICBkYXRhID0gbG9hZGVyc1tmaWxlX3R5cGUubG93ZXIoKV0oaW5wdXRfZGF0YSkNCiAgICAgICAgICAgIGlmIGRhdGEuZW1wdHk6DQogICAgICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmIkxvYWRlZCBkYXRhIGlzIGVtcHR5OiB7aW5wdXRfZGF0YX0iKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICByYWlzZSBFeGNlcHRpb24oZiJFcnJvciBsb2FkaW5nIGRhdGE6IHtlfSIpDQogICAgDQogICAgIyBIYW5kbGUgY29sdW1uIHNlbGVjdGlvbg0KICAgIGlmIHRhcmdldF9jb2x1bW4gaXMgTm9uZToNCiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiVGFyZ2V0IGNvbHVtbiBuYW1lIG11c3QgYmUgc3BlY2lmaWVkIikNCiAgICANCiAgICBpZiBjb2x1bW5zIGlzIG5vdCBOb25lOg0KICAgICAgICBpZiBpc2luc3RhbmNlKGNvbHVtbnMsIHN0cik6DQogICAgICAgICAgICBpZiAnOicgaW4gY29sdW1uczoNCiAgICAgICAgICAgICAgICBzdGFydCwgZW5kID0gY29sdW1ucy5zcGxpdCgnOicpDQogICAgICAgICAgICAgICAgc3RhcnQgPSBpbnQoc3RhcnQpIGlmIHN0YXJ0IGVsc2UgMA0KICAgICAgICAgICAgICAgIGVuZCA9IGludChlbmQpIGlmIGVuZCBlbHNlIE5vbmUNCiAgICAgICAgICAgICAgICAjIEdldCBhbGwgY29sdW1uIG5hbWVzDQogICAgICAgICAgICAgICAgYWxsX2NvbHMgPSBkYXRhLmNvbHVtbnMudG9saXN0KCkNCiAgICAgICAgICAgICAgICAjIFRhcmdldCBjb2x1bW4gaW5kZXgNCiAgICAgICAgICAgICAgICB0YXJnZXRfaWR4ID0gYWxsX2NvbHMuaW5kZXgodGFyZ2V0X2NvbHVtbikNCiAgICAgICAgICAgICAgICAjIEZlYXR1cmUgY29sdW1ucyAoZXhjbHVkaW5nIHRhcmdldCBjb2x1bW4pDQogICAgICAgICAgICAgICAgWF9jb2xzID0gYWxsX2NvbHNbc3RhcnQ6ZW5kXQ0KICAgICAgICAgICAgICAgIGlmIHRhcmdldF9jb2x1bW4gaW4gWF9jb2xzOg0KICAgICAgICAgICAgICAgICAgICBYX2NvbHMucmVtb3ZlKHRhcmdldF9jb2x1bW4pDQogICAgICAgICAgICAgICAgWCA9IGRhdGFbWF9jb2xzXQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICBjb2x1bW5zX2xpc3QgPSBbY29sLnN0cmlwKCkgZm9yIGNvbCBpbiBjb2x1bW5zLnNwbGl0KCcsJyldDQogICAgICAgICAgICAgICAgWCA9IGRhdGFbY29sdW1uc19saXN0XQ0KICAgICAgICBlbGlmIGlzaW5zdGFuY2UoY29sdW1ucywgbGlzdCk6DQogICAgICAgICAgICBYID0gZGF0YVtjb2x1bW5zXQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgcmFpc2UgVmFsdWVFcnJvcigiY29sdW1ucyBwYXJhbWV0ZXIgbXVzdCBiZSBhIGxpc3Qgb2YgY29sdW1uIG5hbWVzIG9yIGEgY29sdW1uIHJhbmdlIHN0cmluZyIpDQogICAgZWxzZToNCiAgICAgICAgIyBVc2UgYWxsIGNvbHVtbnMgZXhjZXB0IHRhcmdldCBjb2x1bW4gYXMgZmVhdHVyZXMNCiAgICAgICAgWCA9IGRhdGEuZHJvcChjb2x1bW5zPVt0YXJnZXRfY29sdW1uXSkNCiAgICANCiAgICB5ID0gZGF0YVt0YXJnZXRfY29sdW1uXQ0KICAgIA0KICAgIHJldHVybiBYLCB5DQoNCmRlZiBjYWxjdWxhdGVfb2Rkc19yYXRpb19hbmRfY2kobW9kZWw6ICJzdGF0c21vZGVscy5kaXNjcmV0ZS5kaXNjcmV0ZV9tb2RlbC5Mb2dpdFJlc3VsdHMiKSAtPiBwZC5EYXRhRnJhbWU6DQogICAgIiIiDQogICAgQ2FsY3VsYXRlIG9kZHMgcmF0aW8gYW5kIDk1JSBjb25maWRlbmNlIGludGVydmFsIGZvciBsb2dpc3RpYyByZWdyZXNzaW9uIG1vZGVsDQogICAgDQogICAgQXJnczoNCiAgICAgICAgbW9kZWw6IEZpdHRlZCBzdGF0c21vZGVscyBsb2dpc3RpYyByZWdyZXNzaW9uIG1vZGVsDQogICAgICAgIA0KICAgIFJldHVybnM6DQogICAgICAgIHBkLkRhdGFGcmFtZTogRGF0YUZyYW1lIHdpdGggb2RkcyByYXRpbyBhbmQgY29uZmlkZW5jZSBpbnRlcnZhbHMNCiAgICAiIiINCiAgICBwYXJhbXMgPSBtb2RlbC5wYXJhbXMNCiAgICBjb25mX2ludCA9IG1vZGVsLmNvbmZfaW50KCkNCiAgICANCiAgICAjIENhbGN1bGF0ZSBvZGRzIHJhdGlvIGFuZCBjb25maWRlbmNlIGludGVydmFscw0KICAgIG9kZHNfcmF0aW8gPSBucC5leHAocGFyYW1zKQ0KICAgIGNvbmZfaW50X2V4cG9uZW50aWF0ZWQgPSBucC5leHAoY29uZl9pbnQpDQogICAgDQogICAgIyBDcmVhdGUgcmVzdWx0cyBkYXRhZnJhbWUNCiAgICByZXN1bHRzID0gcGQuRGF0YUZyYW1lKHsNCiAgICAgICAgJ09SJzogb2Rkc19yYXRpbywNCiAgICAgICAgJzIuNSUgQ0knOiBjb25mX2ludF9leHBvbmVudGlhdGVkLmlsb2NbOiwgMF0sDQogICAgICAgICc5Ny41JSBDSSc6IGNvbmZfaW50X2V4cG9uZW50aWF0ZWQuaWxvY1s6LCAxXSwNCiAgICAgICAgJ3BfdmFsdWUnOiBtb2RlbC5wdmFsdWVzDQogICAgfSkNCiAgICANCiAgICByZXR1cm4gcmVzdWx0cw0KDQpkZWYgZm9yd2FyZF9zZWxlY3Rpb24oWDogcGQuRGF0YUZyYW1lLCANCiAgICAgICAgICAgICAgICAgICAgIHk6IHBkLlNlcmllcywgDQogICAgICAgICAgICAgICAgICAgICB0aHJlc2hvbGRfaW46IGZsb2F0ID0gMC4wNSwNCiAgICAgICAgICAgICAgICAgICAgIHZlcmJvc2U6IGJvb2wgPSBGYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgIGNyaXRlcmlvbjogc3RyID0gJ2FpYycpIC0+IExpc3Rbc3RyXToNCiAgICAiIiINCiAgICBGb3J3YXJkIHN0ZXB3aXNlIGZlYXR1cmUgc2VsZWN0aW9uDQogICAgDQogICAgQXJnczoNCiAgICAgICAgWDogcGQuRGF0YUZyYW1lLCBGZWF0dXJlIG1hdHJpeA0KICAgICAgICB5OiBwZC5TZXJpZXMsIFRhcmdldCB2YXJpYWJsZQ0KICAgICAgICB0aHJlc2hvbGRfaW46IGZsb2F0LCBwLXZhbHVlIHRocmVzaG9sZCBmb3IgaW5jbHVzaW9uIChvbmx5IHVzZWQgd2hlbiBjcml0ZXJpb249J3B2YWx1ZScpDQogICAgICAgIHZlcmJvc2U6IGJvb2wsIFdoZXRoZXIgdG8gcHJpbnQgcHJvZ3Jlc3MNCiAgICAgICAgY3JpdGVyaW9uOiBzdHIsIENyaXRlcmlvbiBmb3Igc2VsZWN0aW9uICgnYWljJywgJ2JpYycsIG9yICdwdmFsdWUnKQ0KICAgICAgICANCiAgICBSZXR1cm5zOg0KICAgICAgICBMaXN0W3N0cl06IExpc3Qgb2Ygc2VsZWN0ZWQgZmVhdHVyZSBuYW1lcw0KICAgICIiIg0KICAgIGluaXRpYWxfZmVhdHVyZXMgPSBbXQ0KICAgIHJlbWFpbmluZ19mZWF0dXJlcyA9IGxpc3QoWC5jb2x1bW5zKQ0KICAgIA0KICAgIGJlc3RfY3JpdGVyaW9uID0gbnAuaW5mIGlmIGNyaXRlcmlvbiBpbiBbJ2FpYycsICdiaWMnXSBlbHNlIDANCiAgICB3aGlsZSByZW1haW5pbmdfZmVhdHVyZXM6DQogICAgICAgIGJlc3RfbmV3X2NyaXRlcmlvbiA9IG5wLmluZiBpZiBjcml0ZXJpb24gaW4gWydhaWMnLCAnYmljJ10gZWxzZSAwDQogICAgICAgIGJlc3RfZmVhdHVyZSA9IE5vbmUNCiAgICAgICAgDQogICAgICAgIHByb2dyZXNzX2JhciA9IE5vbmUNCiAgICAgICAgaWYgdmVyYm9zZToNCiAgICAgICAgICAgIHByb2dyZXNzX2JhciA9IEN1c3RvbVRxZG0odG90YWw9bGVuKHJlbWFpbmluZ19mZWF0dXJlcyksIGRlc2M9IkZvcndhcmQgc2VsZWN0aW9uIikNCiAgICAgICAgDQogICAgICAgIGZvciBmZWF0dXJlIGluIHJlbWFpbmluZ19mZWF0dXJlczoNCiAgICAgICAgICAgIG1vZGVsX2ZlYXR1cmVzID0gaW5pdGlhbF9mZWF0dXJlcyArIFtmZWF0dXJlXQ0KICAgICAgICAgICAgWF9zdWJzZXQgPSBYW21vZGVsX2ZlYXR1cmVzXQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAjIEFkZCBjb25zdGFudCAoaW50ZXJjZXB0KQ0KICAgICAgICAgICAgWF93aXRoX2NvbnN0ID0gc20uYWRkX2NvbnN0YW50KFhfc3Vic2V0KQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAjIEhhbmRsZSBwZXJmZWN0IHNlcGFyYXRpb24NCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBtb2RlbCA9IExvZ2l0KHksIFhfd2l0aF9jb25zdCkuZml0KGRpc3A9MCkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZiBjcml0ZXJpb24gPT0gJ2FpYyc6DQogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfY3JpdGVyaW9uID0gbW9kZWwuYWljDQogICAgICAgICAgICAgICAgICAgICMgRm9yIEFJQywgbG93ZXIgaXMgYmV0dGVyDQogICAgICAgICAgICAgICAgICAgIGlmIGN1cnJlbnRfY3JpdGVyaW9uIDwgYmVzdF9uZXdfY3JpdGVyaW9uOg0KICAgICAgICAgICAgICAgICAgICAgICAgYmVzdF9uZXdfY3JpdGVyaW9uID0gY3VycmVudF9jcml0ZXJpb24NCiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RfZmVhdHVyZSA9IGZlYXR1cmUNCiAgICAgICAgICAgICAgICBlbGlmIGNyaXRlcmlvbiA9PSAnYmljJzoNCiAgICAgICAgICAgICAgICAgICAgY3VycmVudF9jcml0ZXJpb24gPSBtb2RlbC5iaWMNCiAgICAgICAgICAgICAgICAgICAgIyBGb3IgQklDLCBsb3dlciBpcyBiZXR0ZXINCiAgICAgICAgICAgICAgICAgICAgaWYgY3VycmVudF9jcml0ZXJpb24gPCBiZXN0X25ld19jcml0ZXJpb246DQogICAgICAgICAgICAgICAgICAgICAgICBiZXN0X25ld19jcml0ZXJpb24gPSBjdXJyZW50X2NyaXRlcmlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgYmVzdF9mZWF0dXJlID0gZmVhdHVyZQ0KICAgICAgICAgICAgICAgIGVsc2U6ICAjIHB2YWx1ZQ0KICAgICAgICAgICAgICAgICAgICAjIEZvciBwLXZhbHVlIGNyaXRlcmlvbiwgd2UgYWRkIHRoZSBmZWF0dXJlIHdpdGggbG93ZXN0IHAtdmFsdWUNCiAgICAgICAgICAgICAgICAgICAgcHZhbHVlID0gbW9kZWwucHZhbHVlc1tmZWF0dXJlXQ0KICAgICAgICAgICAgICAgICAgICAjIE9ubHkgY29uc2lkZXIgaWYgcC12YWx1ZSBpcyBiZWxvdyB0aHJlc2hvbGQNCiAgICAgICAgICAgICAgICAgICAgaWYgcHZhbHVlIDwgdGhyZXNob2xkX2luIGFuZCBwdmFsdWUgPiBiZXN0X25ld19jcml0ZXJpb246DQogICAgICAgICAgICAgICAgICAgICAgICBiZXN0X25ld19jcml0ZXJpb24gPSBwdmFsdWUNCiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RfZmVhdHVyZSA9IGZlYXR1cmUNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICAgICAgICAgIGlmIHZlcmJvc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiRXJyb3IgZml0dGluZyBtb2RlbCB3aXRoIGZlYXR1cmUge2ZlYXR1cmV9OiB7c3RyKGUpfSIpDQogICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgIGlmIHByb2dyZXNzX2JhcjoNCiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NfYmFyLnVwZGF0ZSgxKQ0KICAgICAgICANCiAgICAgICAgIyBJZiB1c2luZyBBSUMvQklDLCB3ZSBhZGQgZmVhdHVyZXMgdGhhdCBpbXByb3ZlIGNyaXRlcmlvbg0KICAgICAgICBpZiBjcml0ZXJpb24gaW4gWydhaWMnLCAnYmljJ106DQogICAgICAgICAgICBpZiBiZXN0X2ZlYXR1cmUgaXMgbm90IE5vbmUgYW5kIGJlc3RfbmV3X2NyaXRlcmlvbiA8IGJlc3RfY3JpdGVyaW9uOg0KICAgICAgICAgICAgICAgIGJlc3RfY3JpdGVyaW9uID0gYmVzdF9uZXdfY3JpdGVyaW9uDQogICAgICAgICAgICAgICAgaW5pdGlhbF9mZWF0dXJlcy5hcHBlbmQoYmVzdF9mZWF0dXJlKQ0KICAgICAgICAgICAgICAgIHJlbWFpbmluZ19mZWF0dXJlcy5yZW1vdmUoYmVzdF9mZWF0dXJlKQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIGlmIHZlcmJvc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiQWRkZWQge2Jlc3RfZmVhdHVyZX0gKHtjcml0ZXJpb24udXBwZXIoKX06IHtiZXN0X2NyaXRlcmlvbn0pIikNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgIyBObyBpbXByb3ZlbWVudCwgc3RvcA0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICMgSWYgdXNpbmcgcC12YWx1ZSwgd2UgYWRkIHRoZSBtb3N0IHNpZ25pZmljYW50IGZlYXR1cmUgYmVsb3cgdGhyZXNob2xkDQogICAgICAgIGVsc2U6ICAjIHB2YWx1ZQ0KICAgICAgICAgICAgaWYgYmVzdF9mZWF0dXJlIGlzIG5vdCBOb25lOg0KICAgICAgICAgICAgICAgIGluaXRpYWxfZmVhdHVyZXMuYXBwZW5kKGJlc3RfZmVhdHVyZSkNCiAgICAgICAgICAgICAgICByZW1haW5pbmdfZmVhdHVyZXMucmVtb3ZlKGJlc3RfZmVhdHVyZSkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZiB2ZXJib3NlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIkFkZGVkIHtiZXN0X2ZlYXR1cmV9IChwLXZhbHVlOiB7YmVzdF9uZXdfY3JpdGVyaW9ufSkiKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAjIE5vIGZlYXR1cmUgd2l0aCBwLXZhbHVlIGJlbG93IHRocmVzaG9sZCwgc3RvcA0KICAgICAgICAgICAgICAgIGJyZWFrDQogICAgICAgICAgICANCiAgICByZXR1cm4gaW5pdGlhbF9mZWF0dXJlcw0KDQpkZWYgYmFja3dhcmRfZWxpbWluYXRpb24oWDogcGQuRGF0YUZyYW1lLCANCiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHBkLlNlcmllcywgDQogICAgICAgICAgICAgICAgICAgICAgICB0aHJlc2hvbGRfb3V0OiBmbG9hdCA9IDAuMDUsDQogICAgICAgICAgICAgICAgICAgICAgICB2ZXJib3NlOiBib29sID0gRmFsc2UsDQogICAgICAgICAgICAgICAgICAgICAgICBjcml0ZXJpb246IHN0ciA9ICdhaWMnKSAtPiBMaXN0W3N0cl06DQogICAgIiIiDQogICAgQmFja3dhcmQgc3RlcHdpc2UgZmVhdHVyZSBlbGltaW5hdGlvbg0KICAgIA0KICAgIEFyZ3M6DQogICAgICAgIFg6IHBkLkRhdGFGcmFtZSwgRmVhdHVyZSBtYXRyaXgNCiAgICAgICAgeTogcGQuU2VyaWVzLCBUYXJnZXQgdmFyaWFibGUNCiAgICAgICAgdGhyZXNob2xkX291dDogZmxvYXQsIHAtdmFsdWUgdGhyZXNob2xkIGZvciByZW1vdmFsIChvbmx5IHVzZWQgd2hlbiBjcml0ZXJpb249J3B2YWx1ZScpDQogICAgICAgIHZlcmJvc2U6IGJvb2wsIFdoZXRoZXIgdG8gcHJpbnQgcHJvZ3Jlc3MNCiAgICAgICAgY3JpdGVyaW9uOiBzdHIsIENyaXRlcmlvbiBmb3Igc2VsZWN0aW9uICgnYWljJywgJ2JpYycsIG9yICdwdmFsdWUnKQ0KICAgICAgICANCiAgICBSZXR1cm5zOg0KICAgICAgICBMaXN0W3N0cl06IExpc3Qgb2Ygc2VsZWN0ZWQgZmVhdHVyZSBuYW1lcw0KICAgICIiIg0KICAgIGluaXRpYWxfZmVhdHVyZXMgPSBsaXN0KFguY29sdW1ucykNCiAgICANCiAgICAjIEFkZCBjb25zdGFudCAoaW50ZXJjZXB0KQ0KICAgIFhfd2l0aF9jb25zdCA9IHNtLmFkZF9jb25zdGFudChYKQ0KICAgIA0KICAgICMgVHJ5IHRvIGZpdCBmdWxsIG1vZGVsIGZpcnN0DQogICAgdHJ5Og0KICAgICAgICBmdWxsX21vZGVsID0gTG9naXQoeSwgWF93aXRoX2NvbnN0KS5maXQoZGlzcD0wKQ0KICAgICAgICBpZiBjcml0ZXJpb24gPT0gJ2FpYyc6DQogICAgICAgICAgICBiZXN0X2NyaXRlcmlvbiA9IGZ1bGxfbW9kZWwuYWljDQogICAgICAgIGVsaWYgY3JpdGVyaW9uID09ICdiaWMnOg0KICAgICAgICAgICAgYmVzdF9jcml0ZXJpb24gPSBmdWxsX21vZGVsLmJpYw0KICAgICAgICBlbHNlOiAgIyBwdmFsdWUNCiAgICAgICAgICAgIGJlc3RfY3JpdGVyaW9uID0gMCAgIyBOb3QgdXNlZCBmb3IgcHZhbHVlIGNyaXRlcmlvbg0KICAgIGV4Y2VwdCBucC5saW5hbGcuTGluQWxnRXJyb3I6DQogICAgICAgIHdhcm5pbmdzLndhcm4oIlNpbmd1bGFyIG1hdHJpeCBlcnJvciBpbiBmdWxsIG1vZGVsLiBVc2luZyBmb3J3YXJkIHNlbGVjdGlvbiBpbnN0ZWFkLiIpDQogICAgICAgIHJldHVybiBmb3J3YXJkX3NlbGVjdGlvbihYLCB5LCB0aHJlc2hvbGRfb3V0LCB2ZXJib3NlLCBjcml0ZXJpb24pDQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOg0KICAgICAgICB3YXJuaW5ncy53YXJuKGYiRXJyb3IgZml0dGluZyBmdWxsIG1vZGVsOiB7c3RyKGUpfS4gVXNpbmcgZm9yd2FyZCBzZWxlY3Rpb24gaW5zdGVhZC4iKQ0KICAgICAgICByZXR1cm4gZm9yd2FyZF9zZWxlY3Rpb24oWCwgeSwgdGhyZXNob2xkX291dCwgdmVyYm9zZSwgY3JpdGVyaW9uKQ0KICAgIA0KICAgIHdoaWxlIGxlbihpbml0aWFsX2ZlYXR1cmVzKSA+IDA6DQogICAgICAgIGlmIGNyaXRlcmlvbiBpbiBbJ2FpYycsICdiaWMnXToNCiAgICAgICAgICAgIGJlc3RfbmV3X2NyaXRlcmlvbiA9IG5wLmluZg0KICAgICAgICAgICAgd29yc3RfZmVhdHVyZSA9IE5vbmUNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBUcnkgcmVtb3ZpbmcgZWFjaCBmZWF0dXJlDQogICAgICAgICAgICBkZXNjID0gZiJCYWNrd2FyZCBlbGltaW5hdGlvbiAoe2NyaXRlcmlvbi51cHBlcigpfSkiDQogICAgICAgICAgICBwcm9ncmVzc19iYXIgPSBOb25lDQogICAgICAgICAgICBpZiB2ZXJib3NlOg0KICAgICAgICAgICAgICAgIHByb2dyZXNzX2JhciA9IEN1c3RvbVRxZG0odG90YWw9bGVuKGluaXRpYWxfZmVhdHVyZXMpLCBkZXNjPWRlc2MpDQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvciBmZWF0dXJlIGluIGluaXRpYWxfZmVhdHVyZXM6DQogICAgICAgICAgICAgICAgbW9kZWxfZmVhdHVyZXMgPSBbZiBmb3IgZiBpbiBpbml0aWFsX2ZlYXR1cmVzIGlmIGYgIT0gZmVhdHVyZV0NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjIFNraXAgaWYgZW1wdHkNCiAgICAgICAgICAgICAgICBpZiBub3QgbW9kZWxfZmVhdHVyZXM6DQogICAgICAgICAgICAgICAgICAgIGlmIHByb2dyZXNzX2JhcjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzX2Jhci51cGRhdGUoMSkNCiAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgWF9zdWJzZXQgPSBYW21vZGVsX2ZlYXR1cmVzXQ0KICAgICAgICAgICAgICAgIFhfd2l0aF9jb25zdCA9IHNtLmFkZF9jb25zdGFudChYX3N1YnNldCkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIG1vZGVsID0gTG9naXQoeSwgWF93aXRoX2NvbnN0KS5maXQoZGlzcD0wKQ0KICAgICAgICAgICAgICAgICAgICBpZiBjcml0ZXJpb24gPT0gJ2FpYyc6DQogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2NyaXRlcmlvbiA9IG1vZGVsLmFpYw0KICAgICAgICAgICAgICAgICAgICBlbHNlOiAgIyBiaWMNCiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfY3JpdGVyaW9uID0gbW9kZWwuYmljDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAjIElmIHJlbW92aW5nIGltcHJvdmVzIGNyaXRlcmlvbg0KICAgICAgICAgICAgICAgICAgICBpZiBjdXJyZW50X2NyaXRlcmlvbiA8IGJlc3RfbmV3X2NyaXRlcmlvbjoNCiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RfbmV3X2NyaXRlcmlvbiA9IGN1cnJlbnRfY3JpdGVyaW9uDQogICAgICAgICAgICAgICAgICAgICAgICB3b3JzdF9mZWF0dXJlID0gZmVhdHVyZQ0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgcGFzcw0KICAgICAgICAgICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICAgICAgICAgIGlmIHByb2dyZXNzX2JhcjoNCiAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzX2Jhci51cGRhdGUoMSkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBJZiByZW1vdmluZyBhIGZlYXR1cmUgaW1wcm92ZXMgY3JpdGVyaW9uDQogICAgICAgICAgICBpZiB3b3JzdF9mZWF0dXJlIGlzIG5vdCBOb25lIGFuZCBiZXN0X25ld19jcml0ZXJpb24gPCBiZXN0X2NyaXRlcmlvbjoNCiAgICAgICAgICAgICAgICBiZXN0X2NyaXRlcmlvbiA9IGJlc3RfbmV3X2NyaXRlcmlvbg0KICAgICAgICAgICAgICAgIGluaXRpYWxfZmVhdHVyZXMucmVtb3ZlKHdvcnN0X2ZlYXR1cmUpDQogICAgICAgICAgICAgICAgaWYgdmVyYm9zZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJSZW1vdmVkIHt3b3JzdF9mZWF0dXJlfSAoe2NyaXRlcmlvbi51cHBlcigpfToge2Jlc3RfY3JpdGVyaW9ufSkiKQ0KICAgICAgICAgICAgZWxzZToNCiAgICAgICAgICAgICAgICAjIE5vIGltcHJvdmVtZW50LCBzdG9wDQogICAgICAgICAgICAgICAgYnJlYWsNCiAgICAgICAgICAgICAgICANCiAgICAgICAgZWxzZTogICMgcHZhbHVlIGNyaXRlcmlvbg0KICAgICAgICAgICAgIyBHZXQgZnVsbCBtb2RlbCByZXN1bHRzDQogICAgICAgICAgICBtb2RlbCA9IExvZ2l0KHksIHNtLmFkZF9jb25zdGFudChYW2luaXRpYWxfZmVhdHVyZXNdKSkuZml0KGRpc3A9MCkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBGaW5kIGZlYXR1cmUgd2l0aCBoaWdoZXN0IHAtdmFsdWUNCiAgICAgICAgICAgIGJlc3RfcHZhbHVlID0gMA0KICAgICAgICAgICAgd29yc3RfZmVhdHVyZSA9IE5vbmUNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgcHJvZ3Jlc3NfYmFyID0gTm9uZQ0KICAgICAgICAgICAgaWYgdmVyYm9zZToNCiAgICAgICAgICAgICAgICBwcm9ncmVzc19iYXIgPSBDdXN0b21UcWRtKHRvdGFsPWxlbihpbml0aWFsX2ZlYXR1cmVzKSwgZGVzYz0iQmFja3dhcmQgZWxpbWluYXRpb24gKHAtdmFsdWUpIikNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZm9yIGZlYXR1cmUgaW4gaW5pdGlhbF9mZWF0dXJlczoNCiAgICAgICAgICAgICAgICBwdmFsdWUgPSBtb2RlbC5wdmFsdWVzLmdldChmZWF0dXJlLCAwKQ0KICAgICAgICAgICAgICAgIGlmIHB2YWx1ZSA+IGJlc3RfcHZhbHVlOg0KICAgICAgICAgICAgICAgICAgICBiZXN0X3B2YWx1ZSA9IHB2YWx1ZQ0KICAgICAgICAgICAgICAgICAgICB3b3JzdF9mZWF0dXJlID0gZmVhdHVyZQ0KICAgICAgICAgICAgICAgIGlmIHByb2dyZXNzX2JhcjoNCiAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NfYmFyLnVwZGF0ZSgxKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAjIElmIHRoZSB3b3JzdCBmZWF0dXJlJ3MgcC12YWx1ZSBpcyBhYm92ZSB0aGUgdGhyZXNob2xkLCByZW1vdmUgaXQNCiAgICAgICAgICAgIGlmIHdvcnN0X2ZlYXR1cmUgaXMgbm90IE5vbmUgYW5kIGJlc3RfcHZhbHVlID4gdGhyZXNob2xkX291dDoNCiAgICAgICAgICAgICAgICBpbml0aWFsX2ZlYXR1cmVzLnJlbW92ZSh3b3JzdF9mZWF0dXJlKQ0KICAgICAgICAgICAgICAgIGlmIHZlcmJvc2U6DQogICAgICAgICAgICAgICAgICAgIHByaW50KGYiUmVtb3ZlZCB7d29yc3RfZmVhdHVyZX0gKHAtdmFsdWU6IHtiZXN0X3B2YWx1ZX0pIikNCiAgICAgICAgICAgIGVsc2U6DQogICAgICAgICAgICAgICAgIyBObyBmZWF0dXJlIHdpdGggcC12YWx1ZSBhYm92ZSB0aHJlc2hvbGQsIHN0b3ANCiAgICAgICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgDQogICAgcmV0dXJuIGluaXRpYWxfZmVhdHVyZXMNCg0KZGVmIHN0ZXB3aXNlX3NlbGVjdGlvbihYOiBwZC5EYXRhRnJhbWUsIA0KICAgICAgICAgICAgICAgICAgICAgIHk6IHBkLlNlcmllcywgDQogICAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkX2luOiBmbG9hdCA9IDAuMDUsDQogICAgICAgICAgICAgICAgICAgICAgdGhyZXNob2xkX291dDogZmxvYXQgPSAwLjA1LA0KICAgICAgICAgICAgICAgICAgICAgIHZlcmJvc2U6IGJvb2wgPSBGYWxzZSwNCiAgICAgICAgICAgICAgICAgICAgICBjcml0ZXJpb246IHN0ciA9ICdhaWMnKSAtPiBMaXN0W3N0cl06DQogICAgIiIiDQogICAgQmlkaXJlY3Rpb25hbCBzdGVwd2lzZSBmZWF0dXJlIHNlbGVjdGlvbiAoYm90aCBmb3J3YXJkIGFuZCBiYWNrd2FyZCkNCiAgICANCiAgICBBcmdzOg0KICAgICAgICBYOiBwZC5EYXRhRnJhbWUsIEZlYXR1cmUgbWF0cml4DQogICAgICAgIHk6IHBkLlNlcmllcywgVGFyZ2V0IHZhcmlhYmxlDQogICAgICAgIHRocmVzaG9sZF9pbjogZmxvYXQsIHAtdmFsdWUgdGhyZXNob2xkIGZvciBpbmNsdXNpb24gKG9ubHkgdXNlZCB3aGVuIGNyaXRlcmlvbj0ncHZhbHVlJykNCiAgICAgICAgdGhyZXNob2xkX291dDogZmxvYXQsIHAtdmFsdWUgdGhyZXNob2xkIGZvciByZW1vdmFsIChvbmx5IHVzZWQgd2hlbiBjcml0ZXJpb249J3B2YWx1ZScpDQogICAgICAgIHZlcmJvc2U6IGJvb2wsIFdoZXRoZXIgdG8gcHJpbnQgcHJvZ3Jlc3MNCiAgICAgICAgY3JpdGVyaW9uOiBzdHIsIENyaXRlcmlvbiBmb3Igc2VsZWN0aW9uICgnYWljJywgJ2JpYycsIG9yICdwdmFsdWUnKQ0KICAgICAgICANCiAgICBSZXR1cm5zOg0KICAgICAgICBMaXN0W3N0cl06IExpc3Qgb2Ygc2VsZWN0ZWQgZmVhdHVyZSBuYW1lcw0KICAgICIiIg0KICAgIGluaXRpYWxfZmVhdHVyZXMgPSBbXQ0KICAgIHJlbWFpbmluZ19mZWF0dXJlcyA9IGxpc3QoWC5jb2x1bW5zKQ0KICAgIA0KICAgICMgSW5pdGlhbGl6ZQ0KICAgIGJlc3RfY3JpdGVyaW9uID0gbnAuaW5mIGlmIGNyaXRlcmlvbiBpbiBbJ2FpYycsICdiaWMnXSBlbHNlIDAgICMgTm90IHVzZWQgZm9yIHAtdmFsdWUNCiAgICANCiAgICBwcm9ncmVzc19iYXIgPSBOb25lDQogICAgaWYgdmVyYm9zZToNCiAgICAgICAgZGVzYyA9IGYiRmVhdHVyZSBzZWxlY3Rpb24iIGlmIGNyaXRlcmlvbiA9PSAncHZhbHVlJyBlbHNlIGYiRmVhdHVyZSBzZWxlY3Rpb24gKHtjcml0ZXJpb24udXBwZXIoKX0pIg0KICAgICAgICBwcm9ncmVzc19iYXIgPSBDdXN0b21UcWRtKHRvdGFsPWxlbihyZW1haW5pbmdfZmVhdHVyZXMpLCBkZXNjPWRlc2MpDQogICAgDQogICAgd2hpbGUgVHJ1ZToNCiAgICAgICAgY2hhbmdlZCA9IEZhbHNlDQogICAgICAgIA0KICAgICAgICAjIEZvcndhcmQgc3RlcA0KICAgICAgICBpZiBjcml0ZXJpb24gaW4gWydhaWMnLCAnYmljJ106DQogICAgICAgICAgICBiZXN0X25ld19jcml0ZXJpb24gPSBucC5pbmYNCiAgICAgICAgICAgIGJlc3RfZmVhdHVyZV90b19hZGQgPSBOb25lDQogICAgICAgICAgICANCiAgICAgICAgICAgIGZvciBmZWF0dXJlIGluIHJlbWFpbmluZ19mZWF0dXJlczoNCiAgICAgICAgICAgICAgICBtb2RlbF9mZWF0dXJlcyA9IGluaXRpYWxfZmVhdHVyZXMgKyBbZmVhdHVyZV0NCiAgICAgICAgICAgICAgICBYX3N1YnNldCA9IFhbbW9kZWxfZmVhdHVyZXNdDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgIyBBZGQgY29uc3RhbnQgKGludGVyY2VwdCkNCiAgICAgICAgICAgICAgICBYX3dpdGhfY29uc3QgPSBzbS5hZGRfY29uc3RhbnQoWF9zdWJzZXQpDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IExvZ2l0KHksIFhfd2l0aF9jb25zdCkuZml0KGRpc3A9MCkNCiAgICAgICAgICAgICAgICAgICAgaWYgY3JpdGVyaW9uID09ICdhaWMnOg0KICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudF9jcml0ZXJpb24gPSBtb2RlbC5haWMNCiAgICAgICAgICAgICAgICAgICAgZWxzZTogICMgYmljDQogICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2NyaXRlcmlvbiA9IG1vZGVsLmJpYw0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgaWYgY3VycmVudF9jcml0ZXJpb24gPCBiZXN0X25ld19jcml0ZXJpb246DQogICAgICAgICAgICAgICAgICAgICAgICBiZXN0X25ld19jcml0ZXJpb24gPSBjdXJyZW50X2NyaXRlcmlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgYmVzdF9mZWF0dXJlX3RvX2FkZCA9IGZlYXR1cmUNCiAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgICAgICBpZiBwcm9ncmVzc19iYXI6DQogICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc19iYXIudXBkYXRlKDEpDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgQWRkIHRoZSBiZXN0IGZlYXR1cmUgaWYgaXQgaW1wcm92ZXMgY3JpdGVyaW9uDQogICAgICAgICAgICBpZiBiZXN0X2ZlYXR1cmVfdG9fYWRkIGlzIG5vdCBOb25lIGFuZCBiZXN0X25ld19jcml0ZXJpb24gPCBiZXN0X2NyaXRlcmlvbjoNCiAgICAgICAgICAgICAgICBiZXN0X2NyaXRlcmlvbiA9IGJlc3RfbmV3X2NyaXRlcmlvbg0KICAgICAgICAgICAgICAgIGluaXRpYWxfZmVhdHVyZXMuYXBwZW5kKGJlc3RfZmVhdHVyZV90b19hZGQpDQogICAgICAgICAgICAgICAgcmVtYWluaW5nX2ZlYXR1cmVzLnJlbW92ZShiZXN0X2ZlYXR1cmVfdG9fYWRkKQ0KICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgaWYgdmVyYm9zZToNCiAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJBZGRlZCB7YmVzdF9mZWF0dXJlX3RvX2FkZH0gKHtjcml0ZXJpb24udXBwZXIoKX06IHtiZXN0X2NyaXRlcmlvbn0pIikNCiAgICAgICAgDQogICAgICAgIGVsc2U6ICAjIHB2YWx1ZSBjcml0ZXJpb24NCiAgICAgICAgICAgIGJlc3RfcHZhbHVlID0gdGhyZXNob2xkX2luICAjIEluaXRpYWxpemUgd2l0aCB0aHJlc2hvbGQNCiAgICAgICAgICAgIGJlc3RfZmVhdHVyZV90b19hZGQgPSBOb25lDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgR2V0IG1vZGVsIHdpdGggY3VycmVudCBmZWF0dXJlcyANCiAgICAgICAgICAgIGlmIGluaXRpYWxfZmVhdHVyZXM6DQogICAgICAgICAgICAgICAgWF9jdXJyZW50ID0gWFtpbml0aWFsX2ZlYXR1cmVzXQ0KICAgICAgICAgICAgICAgIFhfY3VycmVudCA9IHNtLmFkZF9jb25zdGFudChYX2N1cnJlbnQpDQogICAgICAgICAgICAgICAgY3VycmVudF9tb2RlbCA9IExvZ2l0KHksIFhfY3VycmVudCkuZml0KGRpc3A9MCkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZm9yIGZlYXR1cmUgaW4gcmVtYWluaW5nX2ZlYXR1cmVzOg0KICAgICAgICAgICAgICAgIG1vZGVsX2ZlYXR1cmVzID0gaW5pdGlhbF9mZWF0dXJlcyArIFtmZWF0dXJlXQ0KICAgICAgICAgICAgICAgIFhfc3Vic2V0ID0gWFttb2RlbF9mZWF0dXJlc10NCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjIEFkZCBjb25zdGFudCAoaW50ZXJjZXB0KQ0KICAgICAgICAgICAgICAgIFhfd2l0aF9jb25zdCA9IHNtLmFkZF9jb25zdGFudChYX3N1YnNldCkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICB0cnk6DQogICAgICAgICAgICAgICAgICAgIG1vZGVsID0gTG9naXQoeSwgWF93aXRoX2NvbnN0KS5maXQoZGlzcD0wKQ0KICAgICAgICAgICAgICAgICAgICBwdmFsdWUgPSBtb2RlbC5wdmFsdWVzW2ZlYXR1cmVdDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAjIElmIHAtdmFsdWUgaXMgYmVsb3cgdGhyZXNob2xkIGFuZCBiZXR0ZXIgdGhhbiBjdXJyZW50IGJlc3QNCiAgICAgICAgICAgICAgICAgICAgaWYgcHZhbHVlIDwgYmVzdF9wdmFsdWU6DQogICAgICAgICAgICAgICAgICAgICAgICBiZXN0X3B2YWx1ZSA9IHB2YWx1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgYmVzdF9mZWF0dXJlX3RvX2FkZCA9IGZlYXR1cmUNCiAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgICAgICAgICBmaW5hbGx5Og0KICAgICAgICAgICAgICAgICAgICBpZiBwcm9ncmVzc19iYXI6DQogICAgICAgICAgICAgICAgICAgICAgICBwcm9ncmVzc19iYXIudXBkYXRlKDEpDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgQWRkIHRoZSBiZXN0IGZlYXR1cmUgaWYgaXQncyBzaWduaWZpY2FudA0KICAgICAgICAgICAgaWYgYmVzdF9mZWF0dXJlX3RvX2FkZCBpcyBub3QgTm9uZSBhbmQgYmVzdF9wdmFsdWUgPCB0aHJlc2hvbGRfaW46DQogICAgICAgICAgICAgICAgaW5pdGlhbF9mZWF0dXJlcy5hcHBlbmQoYmVzdF9mZWF0dXJlX3RvX2FkZCkNCiAgICAgICAgICAgICAgICByZW1haW5pbmdfZmVhdHVyZXMucmVtb3ZlKGJlc3RfZmVhdHVyZV90b19hZGQpDQogICAgICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBpZiB2ZXJib3NlOg0KICAgICAgICAgICAgICAgICAgICBwcmludChmIkFkZGVkIHtiZXN0X2ZlYXR1cmVfdG9fYWRkfSAocC12YWx1ZToge2Jlc3RfcHZhbHVlfSkiKQ0KICAgICAgICANCiAgICAgICAgIyBCYWNrd2FyZCBzdGVwIChpZiB3ZSBoYXZlIGZlYXR1cmVzIHRvIHJlbW92ZSkNCiAgICAgICAgaWYgbGVuKGluaXRpYWxfZmVhdHVyZXMpID4gMDoNCiAgICAgICAgICAgIGlmIGNyaXRlcmlvbiBpbiBbJ2FpYycsICdiaWMnXToNCiAgICAgICAgICAgICAgICB3b3JzdF9jcml0ZXJpb24gPSBucC5pbmYNCiAgICAgICAgICAgICAgICB3b3JzdF9mZWF0dXJlID0gTm9uZQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICMgVHJ5IHdpdGhvdXQgZWFjaCBmZWF0dXJlDQogICAgICAgICAgICAgICAgZm9yIGZlYXR1cmUgaW4gaW5pdGlhbF9mZWF0dXJlczoNCiAgICAgICAgICAgICAgICAgICAgbW9kZWxfZmVhdHVyZXMgPSBbZiBmb3IgZiBpbiBpbml0aWFsX2ZlYXR1cmVzIGlmIGYgIT0gZmVhdHVyZV0NCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICMgU2tpcCBpZiBlbXB0eQ0KICAgICAgICAgICAgICAgICAgICBpZiBub3QgbW9kZWxfZmVhdHVyZXM6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBwcm9ncmVzc19iYXI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NfYmFyLnVwZGF0ZSgxKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBYX3N1YnNldCA9IFhbbW9kZWxfZmVhdHVyZXNdDQogICAgICAgICAgICAgICAgICAgIFhfd2l0aF9jb25zdCA9IHNtLmFkZF9jb25zdGFudChYX3N1YnNldCkNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsID0gTG9naXQoeSwgWF93aXRoX2NvbnN0KS5maXQoZGlzcD0wKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgY3JpdGVyaW9uID09ICdhaWMnOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRfY3JpdGVyaW9uID0gbW9kZWwuYWljDQogICAgICAgICAgICAgICAgICAgICAgICBlbHNlOiAgIyBiaWMNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50X2NyaXRlcmlvbiA9IG1vZGVsLmJpYw0KICAgICAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICAgICAjIElmIHJlbW92aW5nIGltcHJvdmVzIGNyaXRlcmlvbg0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgY3VycmVudF9jcml0ZXJpb24gPCB3b3JzdF9jcml0ZXJpb246DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd29yc3RfY3JpdGVyaW9uID0gY3VycmVudF9jcml0ZXJpb24NCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3b3JzdF9mZWF0dXJlID0gZmVhdHVyZQ0KICAgICAgICAgICAgICAgICAgICBleGNlcHQ6DQogICAgICAgICAgICAgICAgICAgICAgICBwYXNzDQogICAgICAgICAgICAgICAgICAgIGZpbmFsbHk6DQogICAgICAgICAgICAgICAgICAgICAgICBpZiBwcm9ncmVzc19iYXI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NfYmFyLnVwZGF0ZSgxKQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICMgSWYgcmVtb3ZpbmcgYSBmZWF0dXJlIGltcHJvdmVzIGNyaXRlcmlvbg0KICAgICAgICAgICAgICAgIGlmIHdvcnN0X2ZlYXR1cmUgaXMgbm90IE5vbmUgYW5kIHdvcnN0X2NyaXRlcmlvbiA8IGJlc3RfY3JpdGVyaW9uOg0KICAgICAgICAgICAgICAgICAgICBiZXN0X2NyaXRlcmlvbiA9IHdvcnN0X2NyaXRlcmlvbg0KICAgICAgICAgICAgICAgICAgICBpbml0aWFsX2ZlYXR1cmVzLnJlbW92ZSh3b3JzdF9mZWF0dXJlKQ0KICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdfZmVhdHVyZXMuYXBwZW5kKHdvcnN0X2ZlYXR1cmUpDQogICAgICAgICAgICAgICAgICAgIGNoYW5nZWQgPSBUcnVlDQogICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICBpZiB2ZXJib3NlOg0KICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoZiJSZW1vdmVkIHt3b3JzdF9mZWF0dXJlfSAoe2NyaXRlcmlvbi51cHBlcigpfToge2Jlc3RfY3JpdGVyaW9ufSkiKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICBlbHNlOiAgIyBwdmFsdWUgY3JpdGVyaW9uDQogICAgICAgICAgICAgICAgIyBHZXQgZnVsbCBtb2RlbCByZXN1bHRzDQogICAgICAgICAgICAgICAgWF9jdXJyZW50ID0gWFtpbml0aWFsX2ZlYXR1cmVzXQ0KICAgICAgICAgICAgICAgIFhfY3VycmVudCA9IHNtLmFkZF9jb25zdGFudChYX2N1cnJlbnQpDQogICAgICAgICAgICAgICAgdHJ5Og0KICAgICAgICAgICAgICAgICAgICBtb2RlbCA9IExvZ2l0KHksIFhfY3VycmVudCkuZml0KGRpc3A9MCkNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgICMgRmluZCBmZWF0dXJlIHdpdGggaGlnaGVzdCBwLXZhbHVlDQogICAgICAgICAgICAgICAgICAgIHdvcnN0X3B2YWx1ZSA9IDANCiAgICAgICAgICAgICAgICAgICAgd29yc3RfZmVhdHVyZSA9IE5vbmUNCiAgICAgICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgICAgIGZvciBmZWF0dXJlIGluIGluaXRpYWxfZmVhdHVyZXM6DQogICAgICAgICAgICAgICAgICAgICAgICBwdmFsdWUgPSBtb2RlbC5wdmFsdWVzLmdldChmZWF0dXJlLCAwKQ0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgcHZhbHVlID4gd29yc3RfcHZhbHVlOg0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcnN0X3B2YWx1ZSA9IHB2YWx1ZQ0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdvcnN0X2ZlYXR1cmUgPSBmZWF0dXJlDQogICAgICAgICAgICAgICAgICAgICAgICBpZiBwcm9ncmVzc19iYXI6DQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvZ3Jlc3NfYmFyLnVwZGF0ZSgxKQ0KICAgICAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAgICAgIyBJZiB0aGUgd29yc3QgZmVhdHVyZSdzIHAtdmFsdWUgaXMgYWJvdmUgdGhlIHRocmVzaG9sZCwgcmVtb3ZlIGl0DQogICAgICAgICAgICAgICAgICAgIGlmIHdvcnN0X2ZlYXR1cmUgaXMgbm90IE5vbmUgYW5kIHdvcnN0X3B2YWx1ZSA+IHRocmVzaG9sZF9vdXQ6DQogICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsX2ZlYXR1cmVzLnJlbW92ZSh3b3JzdF9mZWF0dXJlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgcmVtYWluaW5nX2ZlYXR1cmVzLmFwcGVuZCh3b3JzdF9mZWF0dXJlKQ0KICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlZCA9IFRydWUNCiAgICAgICAgICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgdmVyYm9zZToNCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmludChmIlJlbW92ZWQge3dvcnN0X2ZlYXR1cmV9IChwLXZhbHVlOiB7d29yc3RfcHZhbHVlfSkiKQ0KICAgICAgICAgICAgICAgIGV4Y2VwdDoNCiAgICAgICAgICAgICAgICAgICAgIyBJZiBtb2RlbCBmaXR0aW5nIGZhaWxzLCBkb24ndCByZW1vdmUgYW55IGZlYXR1cmVzDQogICAgICAgICAgICAgICAgICAgIHBhc3MNCiAgICAgICAgDQogICAgICAgICMgSWYgbm8gY2hhbmdlcyB3ZXJlIG1hZGUgaW4gdGhpcyBpdGVyYXRpb24sIHN0b3ANCiAgICAgICAgaWYgbm90IGNoYW5nZWQ6DQogICAgICAgICAgICBicmVhaw0KICAgICAgICAgICAgDQogICAgcmV0dXJuIGluaXRpYWxfZmVhdHVyZXMNCg0KQHJlZ2lzdGVyX3NlbGVjdG9yKCdzdGVwd2lzZScpDQpkZWYgcHl0aG9uX3N0ZXB3aXNlX3NlbGVjdG9yKFg6IHBkLkRhdGFGcmFtZSwgDQogICAgICAgICAgICAgICAgICAgICAgICAgICB5OiBwZC5TZXJpZXMsDQogICAgICAgICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb246IHN0ciA9ICdiYWNrd2FyZCcsDQogICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJlc2hvbGRfaW46IGZsb2F0ID0gMC4wNSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocmVzaG9sZF9vdXQ6IGZsb2F0ID0gMC4wNSwNCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyaXRlcmlvbjogc3RyID0gJ2FpYycsDQogICAgICAgICAgICAgICAgICAgICAgICAgICB2ZXJib3NlOiBib29sID0gRmFsc2UsDQogICAgICAgICAgICAgICAgICAgICAgICAgICBvdXRkaXI6IHN0ciA9IE5vbmUpIC0+IExpc3Rbc3RyXToNCiAgICAiIiINCiAgICBSdW4gc3RlcHdpc2UgcmVncmVzc2lvbiBmZWF0dXJlIHNlbGVjdGlvbiB1c2luZyBwdXJlIFB5dGhvbg0KICAgIA0KICAgIEFyZ3M6DQogICAgICAgIFg6IHBkLkRhdGFGcmFtZSwgRmVhdHVyZSBtYXRyaXgNCiAgICAgICAgeTogcGQuU2VyaWVzLCBUYXJnZXQgdmFyaWFibGUNCiAgICAgICAgZGlyZWN0aW9uOiBzdHIsIERpcmVjdGlvbiBvZiBzdGVwd2lzZSBzZWxlY3Rpb24gKCdmb3J3YXJkJywgJ2JhY2t3YXJkJywgb3IgJ2JvdGgnKQ0KICAgICAgICB0aHJlc2hvbGRfaW46IGZsb2F0LCBwLXZhbHVlIHRocmVzaG9sZCBmb3IgaW5jbHVzaW9uIChvbmx5IHVzZWQgd2hlbiBjcml0ZXJpb249J3B2YWx1ZScpDQogICAgICAgIHRocmVzaG9sZF9vdXQ6IGZsb2F0LCBwLXZhbHVlIHRocmVzaG9sZCBmb3IgcmVtb3ZhbCAob25seSB1c2VkIHdoZW4gY3JpdGVyaW9uPSdwdmFsdWUnKQ0KICAgICAgICBjcml0ZXJpb246IHN0ciwgQ3JpdGVyaW9uIGZvciBmZWF0dXJlIHNlbGVjdGlvbiAoJ2FpYycsICdiaWMnLCBvciAncHZhbHVlJykNCiAgICAgICAgdmVyYm9zZTogYm9vbCwgV2hldGhlciB0byBwcmludCBwcm9ncmVzcw0KICAgICAgICBvdXRkaXI6IHN0ciwgT3V0cHV0IGRpcmVjdG9yeSBmb3IgcmVzdWx0cw0KICAgICAgICANCiAgICBSZXR1cm5zOg0KICAgICAgICBMaXN0W3N0cl06IExpc3Qgb2Ygc2VsZWN0ZWQgZmVhdHVyZSBuYW1lcw0KICAgICIiIg0KICAgICMgQ2hlY2sgZGlyZWN0aW9uDQogICAgaWYgZGlyZWN0aW9uIG5vdCBpbiBbJ2ZvcndhcmQnLCAnYmFja3dhcmQnLCAnYm90aCddOg0KICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJkaXJlY3Rpb24gbXVzdCBiZSBvbmUgb2Y6ICdmb3J3YXJkJywgJ2JhY2t3YXJkJywgJ2JvdGgnIikNCiAgICANCiAgICAjIENoZWNrIGNyaXRlcmlvbg0KICAgIGlmIGNyaXRlcmlvbiBub3QgaW4gWydhaWMnLCAnYmljJywgJ3B2YWx1ZSddOg0KICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJjcml0ZXJpb24gbXVzdCBiZSBvbmUgb2Y6ICdhaWMnLCAnYmljJywgJ3B2YWx1ZSciKQ0KICAgIA0KICAgICMgQ3JlYXRlIG91dHB1dCBkaXJlY3RvcnkgaWYgaXQgZG9lc24ndCBleGlzdA0KICAgIGlmIG91dGRpciBpcyBub3QgTm9uZToNCiAgICAgICAgb3MubWFrZWRpcnMob3V0ZGlyLCBleGlzdF9vaz1UcnVlKQ0KICAgIA0KICAgICMgUnVuIGFwcHJvcHJpYXRlIHNlbGVjdGlvbiBtZXRob2QNCiAgICBpZiBkaXJlY3Rpb24gPT0gJ2ZvcndhcmQnOg0KICAgICAgICBzZWxlY3RlZF9mZWF0dXJlcyA9IGZvcndhcmRfc2VsZWN0aW9uKFgsIHksIHRocmVzaG9sZF9pbiwgdmVyYm9zZSwgY3JpdGVyaW9uKQ0KICAgIGVsaWYgZGlyZWN0aW9uID09ICdiYWNrd2FyZCc6DQogICAgICAgIHNlbGVjdGVkX2ZlYXR1cmVzID0gYmFja3dhcmRfZWxpbWluYXRpb24oWCwgeSwgdGhyZXNob2xkX291dCwgdmVyYm9zZSwgY3JpdGVyaW9uKQ0KICAgIGVsc2U6ICAjICdib3RoJw0KICAgICAgICBzZWxlY3RlZF9mZWF0dXJlcyA9IHN0ZXB3aXNlX3NlbGVjdGlvbihYLCB5LCB0aHJlc2hvbGRfaW4sIHRocmVzaG9sZF9vdXQsIHZlcmJvc2UsIGNyaXRlcmlvbikNCiAgICANCiAgICAjIElmIHdlIGhhdmUgZmVhdHVyZXMsIGNhbGN1bGF0ZSBhbmQgc2F2ZSB0aGUgZmluYWwgbW9kZWwgcmVzdWx0cw0KICAgIGlmIHNlbGVjdGVkX2ZlYXR1cmVzIGFuZCBvdXRkaXI6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgIFhfc2VsZWN0ZWQgPSBYW3NlbGVjdGVkX2ZlYXR1cmVzXQ0KICAgICAgICAgICAgWF93aXRoX2NvbnN0ID0gc20uYWRkX2NvbnN0YW50KFhfc2VsZWN0ZWQpDQogICAgICAgICAgICBmaW5hbF9tb2RlbCA9IExvZ2l0KHksIFhfd2l0aF9jb25zdCkuZml0KGRpc3A9MCkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBDYWxjdWxhdGUgb2RkcyByYXRpbyBhbmQgY29uZmlkZW5jZSBpbnRlcnZhbHMNCiAgICAgICAgICAgIHJlc3VsdHNfZGYgPSBjYWxjdWxhdGVfb2Rkc19yYXRpb19hbmRfY2koZmluYWxfbW9kZWwpDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgU2F2ZSByZXN1bHRzDQogICAgICAgICAgICByZXN1bHRzX2RmLnRvX2Nzdihvcy5wYXRoLmpvaW4ob3V0ZGlyLCAnc3RlcHdpc2VfcmVzdWx0cy5jc3YnKSkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBQbG90IGNvZWZmaWNpZW50cyB3aXRoIGVycm9yIGJhcnMgaWYgdGhlcmUgYXJlIGZlYXR1cmVzDQogICAgICAgICAgICBpZiBsZW4oc2VsZWN0ZWRfZmVhdHVyZXMpID4gMDoNCiAgICAgICAgICAgICAgICBwbHQuZmlndXJlKGZpZ3NpemU9KDEwLCA4KSkNCiAgICAgICAgICAgICAgICByZXN1bHRzX2RmX3Bsb3QgPSByZXN1bHRzX2RmLmRyb3AoJ0ludGVyY2VwdCcsIGVycm9ycz0naWdub3JlJykNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICAjIFNvcnQgYnkgb2RkcyByYXRpbyBmb3IgYmV0dGVyIHZpc3VhbGl6YXRpb24NCiAgICAgICAgICAgICAgICByZXN1bHRzX2RmX3Bsb3QgPSByZXN1bHRzX2RmX3Bsb3Quc29ydF92YWx1ZXMoYnk9J09SJykNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBmZWF0dXJlcyA9IHJlc3VsdHNfZGZfcGxvdC5pbmRleA0KICAgICAgICAgICAgICAgIG9ycyA9IHJlc3VsdHNfZGZfcGxvdFsnT1InXQ0KICAgICAgICAgICAgICAgIGxvd2VyX2NpID0gcmVzdWx0c19kZl9wbG90WycyLjUlIENJJ10NCiAgICAgICAgICAgICAgICB1cHBlcl9jaSA9IHJlc3VsdHNfZGZfcGxvdFsnOTcuNSUgQ0knXQ0KICAgICAgICAgICAgICAgIA0KICAgICAgICAgICAgICAgIHBsdC5lcnJvcmJhcigNCiAgICAgICAgICAgICAgICAgICAgb3JzLCByYW5nZShsZW4oZmVhdHVyZXMpKSwNCiAgICAgICAgICAgICAgICAgICAgeGVycj1bb3JzIC0gbG93ZXJfY2ksIHVwcGVyX2NpIC0gb3JzXSwNCiAgICAgICAgICAgICAgICAgICAgZm10PSdvJywgY2Fwc2l6ZT01LCBlbGluZXdpZHRoPTEsIG1hcmtlcmVkZ2V3aWR0aD0xDQogICAgICAgICAgICAgICAgKQ0KICAgICAgICAgICAgICAgICMgbGluZSB3aWR0aA0KICAgICAgICAgICAgICAgIHBsdC5nY2EoKS5saW5lc1swXS5zZXRfbGluZXdpZHRoKDEuNSkNCiAgICAgICAgICAgICAgICANCiAgICAgICAgICAgICAgICBwbHQuYXh2bGluZSh4PTEuMCwgY29sb3I9J3InLCBsaW5lc3R5bGU9Jy0tJywgbGFiZWw9J09SID0gMS4wJykNCiAgICAgICAgICAgICAgICBwbHQueXRpY2tzKHJhbmdlKGxlbihmZWF0dXJlcykpLCBmZWF0dXJlcykNCiAgICAgICAgICAgICAgICBwbHQueHNjYWxlKCdsb2cnKQ0KICAgICAgICAgICAgICAgIHBsdC54bGFiZWwoJ09kZHMgUmF0aW8gKGxvZyBzY2FsZSknKQ0KICAgICAgICAgICAgICAgIHBsdC55bGFiZWwoJ0ZlYXR1cmVzJykNCiAgICAgICAgICAgICAgICBwbHQudGl0bGUoJ09kZHMgUmF0aW9zIHdpdGggOTUlIENvbmZpZGVuY2UgSW50ZXJ2YWxzJykNCiAgICAgICAgICAgICAgICBwbHQuZ3JpZChUcnVlLCBhbHBoYT0wLjMpDQogICAgICAgICAgICAgICAgcGx0LnRpZ2h0X2xheW91dCgpDQogICAgICAgICAgICAgICAgDQogICAgICAgICAgICAgICAgcGx0LnNhdmVmaWcob3MucGF0aC5qb2luKG91dGRpciwgZidzdGVwd2lzZV97Y3JpdGVyaW9ufV9vZGRzX3JhdGlvcy5wbmcnKSwgZHBpPTYwMCkNCiAgICAgICAgICAgICAgICBwbHQuY2xvc2UoKQ0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICB3YXJuaW5ncy53YXJuKGYiRXJyb3IgZ2VuZXJhdGluZyBmaW5hbCByZXN1bHRzOiB7c3RyKGUpfSIpDQogICAgDQogICAgcmV0dXJuIHNlbGVjdGVkX2ZlYXR1cmVzIA==').decode())
