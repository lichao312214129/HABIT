
import base64
exec(base64.b64decode(b'aW1wb3J0IHBhbmRhcyBhcyBwZA0KaW1wb3J0IG51bXB5IGFzIG5wDQppbXBvcnQgcGluZ291aW4gYXMgcGcNCmltcG9ydCBqc29uDQppbXBvcnQgb3MNCmltcG9ydCBtdWx0aXByb2Nlc3NpbmcNCmltcG9ydCBsb2dnaW5nDQppbXBvcnQgYXJncGFyc2UNCmZyb20gaXRlcnRvb2xzIGltcG9ydCBwcm9kdWN0DQpmcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgTGlzdCwgVHVwbGUsIEFueSwgT3B0aW9uYWwsIFNldA0KDQojIExvZ2dlciBjb25maWd1cmF0aW9uIHdpbGwgYmUgc2V0IGluIHRoZSBtYWluIGZ1bmN0aW9uIHRvIHVzZSB0aGUgb3V0cHV0IHBhdGgNCg0KZGVmIGNvbmZpZ3VyZV9sb2dnZXIob3V0cHV0X3BhdGg6IHN0cik6DQogICAgIiIiDQogICAgQ29uZmlndXJlIHRoZSBsb2dnZXIgYW5kIHNhdmUgbG9nIGZpbGVzIGluIHRoZSBzYW1lIGRpcmVjdG9yeSBhcyB0aGUgb3V0cHV0IGZpbGUNCiAgICANCiAgICBBcmdzOg0KICAgICAgICBvdXRwdXRfcGF0aDogUGF0aCB0byB0aGUgb3V0cHV0IGZpbGUNCiAgICAgICAgDQogICAgUmV0dXJuczoNCiAgICAgICAgQ29uZmlndXJlZCBsb2dnZXIgaW5zdGFuY2UNCiAgICAiIiINCiAgICBvdXRwdXRfZGlyID0gb3MucGF0aC5kaXJuYW1lKG9zLnBhdGguYWJzcGF0aChvdXRwdXRfcGF0aCkpDQogICAgbG9nX2ZpbGUgPSBvcy5wYXRoLmpvaW4ob3V0cHV0X2RpciwgImljY19hbmFseXNpcy5sb2ciKQ0KICAgIA0KICAgICMgRW5zdXJlIHRoZSBvdXRwdXQgZGlyZWN0b3J5IGV4aXN0cw0KICAgIG9zLm1ha2VkaXJzKG91dHB1dF9kaXIsIGV4aXN0X29rPVRydWUpDQogICAgDQogICAgbG9nZ2luZy5iYXNpY0NvbmZpZygNCiAgICAgICAgbGV2ZWw9bG9nZ2luZy5JTkZPLA0KICAgICAgICBmb3JtYXQ9JyUoYXNjdGltZSlzIC0gJShsZXZlbG5hbWUpcyAtICUobWVzc2FnZSlzJywNCiAgICAgICAgaGFuZGxlcnM9Ww0KICAgICAgICAgICAgbG9nZ2luZy5GaWxlSGFuZGxlcihsb2dfZmlsZSksDQogICAgICAgICAgICBsb2dnaW5nLlN0cmVhbUhhbmRsZXIoKQ0KICAgICAgICBdDQogICAgKQ0KICAgIA0KICAgIHJldHVybiBsb2dnaW5nLmdldExvZ2dlcihfX25hbWVfXykNCg0KZGVmIHJlYWRfZmlsZShmaWxlX3BhdGg6IHN0cikgLT4gcGQuRGF0YUZyYW1lOg0KICAgICIiIg0KICAgIFJlYWQgQ1NWIG9yIEV4Y2VsIGZpbGUgYmFzZWQgb24gZmlsZSBleHRlbnNpb24NCiAgICANCiAgICBBcmdzOg0KICAgICAgICBmaWxlX3BhdGg6IFBhdGggdG8gdGhlIGZpbGUNCiAgICAgICAgDQogICAgUmV0dXJuczoNCiAgICAgICAgRGF0YUZyYW1lIG9iamVjdCBjb250YWluaW5nIHRoZSBmaWxlIGRhdGENCiAgICAgICAgDQogICAgUmFpc2VzOg0KICAgICAgICBWYWx1ZUVycm9yOiBJZiB0aGUgZmlsZSBmb3JtYXQgaXMgbm90IHN1cHBvcnRlZA0KICAgICIiIg0KICAgIGV4dCA9IG9zLnBhdGguc3BsaXRleHQoZmlsZV9wYXRoKVsxXS5sb3dlcigpDQogICAgDQogICAgaWYgZXh0ID09ICcuY3N2JzoNCiAgICAgICAgcmV0dXJuIHBkLnJlYWRfY3N2KGZpbGVfcGF0aCwgaW5kZXhfY29sPTApDQogICAgZWxpZiBleHQgaW4gWycueGxzeCcsICcueGxzJ106DQogICAgICAgIHJldHVybiBwZC5yZWFkX2V4Y2VsKGZpbGVfcGF0aCwgaW5kZXhfY29sPTApDQogICAgZWxzZToNCiAgICAgICAgcmFpc2UgVmFsdWVFcnJvcihmIlVuc3VwcG9ydGVkIGZpbGUgZm9ybWF0OiB7ZXh0fS4gU3VwcG9ydGVkIGZvcm1hdHM6IC5jc3YsIC54bHN4LCAueGxzIikNCg0KZGVmIGNhbGN1bGF0ZV9pY2MoZmlsZXNfbGlzdDogTGlzdFtzdHJdLCBsb2dnZXIsIHNlbGVjdGVkX2ZlYXR1cmVzOiBPcHRpb25hbFtMaXN0W3N0cl1dID0gTm9uZSkgLT4gRGljdFtzdHIsIERpY3Rbc3RyLCBmbG9hdF1dOg0KICAgICIiIg0KICAgIENhbGN1bGF0ZSBJQ0MgKEludHJhY2xhc3MgQ29ycmVsYXRpb24gQ29lZmZpY2llbnQpIHZhbHVlcyBiZXR3ZWVuIG11bHRpcGxlIGZpbGVzDQogICAgDQogICAgQXJnczoNCiAgICAgICAgZmlsZXNfbGlzdDogTGlzdCBvZiBmaWxlIHBhdGhzIHRvIGFuYWx5emUNCiAgICAgICAgbG9nZ2VyOiBMb2dnZXIgaW5zdGFuY2UgZm9yIHJlY29yZGluZyBwcm9ncmVzcyBhbmQgZXJyb3JzDQogICAgICAgIHNlbGVjdGVkX2ZlYXR1cmVzOiBPcHRpb25hbCBsaXN0IG9mIGZlYXR1cmUgbmFtZXMgdG8gYW5hbHl6ZSAoaWYgTm9uZSwgYWxsIGNvbW1vbiBmZWF0dXJlcyB3aWxsIGJlIGFuYWx5emVkKQ0KICAgICAgICANCiAgICBSZXR1cm5zOg0KICAgICAgICBEaWN0aW9uYXJ5IGNvbnRhaW5pbmcgSUNDIHZhbHVlcyBpbiB0aGUgZm9ybWF0IHtmZWF0dXJlX25hbWU6IGljY192YWx1ZX0NCiAgICAiIiINCiAgICAjIEdldCBmaWxlbmFtZXMgd2l0aG91dCBwYXRoIGFuZCBleHRlbnNpb24NCiAgICBmaWxlX25hbWVzID0gW29zLnBhdGguc3BsaXRleHQob3MucGF0aC5iYXNlbmFtZShmKSlbMF0gZm9yIGYgaW4gZmlsZXNfbGlzdF0NCiAgICBncm91cF9uYW1lID0gIl92c18iLmpvaW4oZmlsZV9uYW1lcykNCiAgICANCiAgICAjIFJlYWQgYWxsIGZpbGVzDQogICAgZGF0YV9mcmFtZXMgPSBbXQ0KICAgIHRyeToNCiAgICAgICAgZm9yIGZpbGVfcGF0aCBpbiBmaWxlc19saXN0Og0KICAgICAgICAgICAgZGF0YV9mcmFtZXMuYXBwZW5kKHJlYWRfZmlsZShmaWxlX3BhdGgpKQ0KICAgIGV4Y2VwdCBFeGNlcHRpb24gYXMgZToNCiAgICAgICAgbG9nZ2VyLmVycm9yKGYiRXJyb3IgcmVhZGluZyBmaWxlczoge2V9IikNCiAgICAgICAgcmV0dXJuIHtncm91cF9uYW1lOiB7fX0NCiAgICANCiAgICAjIEZpbmQgY29tbW9uIGluZGljZXMgYWNyb3NzIGFsbCBkYXRhZnJhbWVzDQogICAgY29tbW9uX2luZGV4ID0gc2V0KGRhdGFfZnJhbWVzWzBdLmluZGV4KQ0KICAgIGZvciBkZiBpbiBkYXRhX2ZyYW1lc1sxOl06DQogICAgICAgIGNvbW1vbl9pbmRleCA9IGNvbW1vbl9pbmRleC5pbnRlcnNlY3Rpb24oZGYuaW5kZXgpDQogICAgDQogICAgY29tbW9uX2luZGV4ID0gbGlzdChjb21tb25faW5kZXgpDQogICAgDQogICAgaWYgbGVuKGNvbW1vbl9pbmRleCkgPT0gMDoNCiAgICAgICAgbG9nZ2VyLndhcm5pbmcoZiJ7Z3JvdXBfbmFtZX0gaGFzIG5vIGNvbW1vbiBwYXRpZW50IElEcyIpDQogICAgICAgIHJldHVybiB7Z3JvdXBfbmFtZToge319DQogICAgDQogICAgIyBGaWx0ZXIgZGF0YSB1c2luZyBjb21tb24gaW5kaWNlcw0KICAgIGZvciBpIGluIHJhbmdlKGxlbihkYXRhX2ZyYW1lcykpOg0KICAgICAgICBkYXRhX2ZyYW1lc1tpXSA9IGRhdGFfZnJhbWVzW2ldLmxvY1tjb21tb25faW5kZXhdDQogICAgDQogICAgIyBGaW5kIGNvbW1vbiBjb2x1bW5zIGFjcm9zcyBhbGwgZGF0YWZyYW1lcw0KICAgIGNvbW1vbl9jb2x1bW5zID0gc2V0KGRhdGFfZnJhbWVzWzBdLmNvbHVtbnMpDQogICAgZm9yIGRmIGluIGRhdGFfZnJhbWVzWzE6XToNCiAgICAgICAgY29tbW9uX2NvbHVtbnMgPSBjb21tb25fY29sdW1ucy5pbnRlcnNlY3Rpb24oZGYuY29sdW1ucykNCiAgICANCiAgICBjb21tb25fY29sdW1ucyA9IGxpc3QoY29tbW9uX2NvbHVtbnMpDQogICAgDQogICAgaWYgbGVuKGNvbW1vbl9jb2x1bW5zKSA9PSAwOg0KICAgICAgICBsb2dnZXIud2FybmluZyhmIntncm91cF9uYW1lfSBoYXMgbm8gY29tbW9uIGZlYXR1cmUgY29sdW1ucyIpDQogICAgICAgIHJldHVybiB7Z3JvdXBfbmFtZToge319DQogICAgDQogICAgIyBGaWx0ZXIgZmVhdHVyZXMgaWYgc2VsZWN0ZWRfZmVhdHVyZXMgaXMgcHJvdmlkZWQNCiAgICBpZiBzZWxlY3RlZF9mZWF0dXJlczoNCiAgICAgICAgIyBGaW5kIGludGVyc2VjdGlvbiBiZXR3ZWVuIGNvbW1vbl9jb2x1bW5zIGFuZCBzZWxlY3RlZF9mZWF0dXJlcw0KICAgICAgICB0YXJnZXRfY29sdW1ucyA9IFtjb2wgZm9yIGNvbCBpbiBjb21tb25fY29sdW1ucyBpZiBjb2wgaW4gc2VsZWN0ZWRfZmVhdHVyZXNdDQogICAgICAgIGlmIG5vdCB0YXJnZXRfY29sdW1uczoNCiAgICAgICAgICAgIGxvZ2dlci53YXJuaW5nKGYie2dyb3VwX25hbWV9IGhhcyBubyBzZWxlY3RlZCBmZWF0dXJlcyBpbiBjb21tb24iKQ0KICAgICAgICAgICAgcmV0dXJuIHtncm91cF9uYW1lOiB7fX0NCiAgICAgICAgY29tbW9uX2NvbHVtbnMgPSB0YXJnZXRfY29sdW1ucw0KICAgICAgICBsb2dnZXIuaW5mbyhmIkFuYWx5emluZyB7bGVuKGNvbW1vbl9jb2x1bW5zKX0gc2VsZWN0ZWQgZmVhdHVyZXMiKQ0KICAgIA0KICAgICMgQ2FsY3VsYXRlIElDQyBmb3IgZWFjaCBmZWF0dXJlDQogICAgaWNjX3ZhbHVlcyA9IHt9DQogICAgdG90YWwgPSBsZW4oY29tbW9uX2NvbHVtbnMpDQogICAgDQogICAgZm9yIGksIGZ0IGluIGVudW1lcmF0ZShjb21tb25fY29sdW1ucyk6DQogICAgICAgIHRyeToNCiAgICAgICAgICAgICMgUHJlcGFyZSBkYXRhIGZvciBJQ0MgY2FsY3VsYXRpb24NCiAgICAgICAgICAgIGRhdGFfbGlzdCA9IFtdDQogICAgICAgICAgICBmb3IgcmVhZGVyX2lkeCwgZGYgaW4gZW51bWVyYXRlKGRhdGFfZnJhbWVzKToNCiAgICAgICAgICAgICAgICBkZl9mZWF0dXJlID0gcGQuRGF0YUZyYW1lKGRmW2Z0XSkNCiAgICAgICAgICAgICAgICBkZl9mZWF0dXJlWyJyZWFkZXIiXSA9IG5wLm9uZXMoZGZfZmVhdHVyZS5zaGFwZVswXSkgKiAocmVhZGVyX2lkeCArIDEpDQogICAgICAgICAgICAgICAgZGZfZmVhdHVyZVsidGFyZ2V0Il0gPSByYW5nZShkZl9mZWF0dXJlLnNoYXBlWzBdKQ0KICAgICAgICAgICAgICAgIGRhdGFfbGlzdC5hcHBlbmQoZGZfZmVhdHVyZSkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgZGF0YSA9IHBkLmNvbmNhdChkYXRhX2xpc3QsIGF4aXM9MCkNCiAgICAgICAgICAgIHJlc3VsdCA9IHBnLmludHJhY2xhc3NfY29ycigNCiAgICAgICAgICAgICAgICBkYXRhPWRhdGEsIA0KICAgICAgICAgICAgICAgIHRhcmdldHM9J3RhcmdldCcsIA0KICAgICAgICAgICAgICAgIHJhdGVycz0ncmVhZGVyJywgDQogICAgICAgICAgICAgICAgcmF0aW5ncz1mdCwgDQogICAgICAgICAgICAgICAgbmFuX3BvbGljeT0nb21pdCcNCiAgICAgICAgICAgICkNCiAgICAgICAgICAgIGljYyA9IHJlc3VsdC5sb2NbMiwgIklDQyJdDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgVXNlIGZlYXR1cmUgbmFtZSBhcyBrZXkNCiAgICAgICAgICAgIGljY192YWx1ZXNbZiJ7ZnR9Il0gPSBpY2MNCiAgICAgICAgICAgIA0KICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICBsb2dnZXIuZXJyb3IoZiJFcnJvciBjYWxjdWxhdGluZyBJQ0MgZm9yIGZlYXR1cmUge2Z0fToge2V9IikNCiAgICAgICAgICAgIGljY192YWx1ZXNbZiJ7ZnR9Il0gPSBucC5uYW4NCiAgICANCiAgICAjIFJldHVybiByZXN1bHRzIHdpdGggZ3JvdXAgbmFtZQ0KICAgIHJldHVybiB7Z3JvdXBfbmFtZTogaWNjX3ZhbHVlc30NCg0KZGVmIHByb2Nlc3NfZmlsZXNfZ3JvdXAoYXJnczogVHVwbGVbTGlzdFtzdHJdLCBsb2dnaW5nLkxvZ2dlciwgT3B0aW9uYWxbTGlzdFtzdHJdXV0pIC0+IFR1cGxlW3N0ciwgRGljdFtzdHIsIGZsb2F0XV06DQogICAgIiIiDQogICAgUHJvY2VzcyBhIHNpbmdsZSBncm91cCBvZiBmaWxlcyBmb3IgbXVsdGlwcm9jZXNzaW5nDQogICAgDQogICAgQXJnczoNCiAgICAgICAgYXJnczogVHVwbGUgY29udGFpbmluZyBsaXN0IG9mIGZpbGVzLCBsb2dnZXIgaW5zdGFuY2UsIGFuZCBvcHRpb25hbCBzZWxlY3RlZCBmZWF0dXJlcw0KICAgICAgICANCiAgICBSZXR1cm5zOg0KICAgICAgICBUdXBsZSBjb250YWluaW5nIGdyb3VwIG5hbWUgYW5kIElDQyB2YWx1ZXMNCiAgICAiIiINCiAgICBmaWxlc19saXN0LCBsb2dnZXIsIHNlbGVjdGVkX2ZlYXR1cmVzID0gYXJncw0KICAgIHJlc3VsdCA9IGNhbGN1bGF0ZV9pY2MoZmlsZXNfbGlzdCwgbG9nZ2VyLCBzZWxlY3RlZF9mZWF0dXJlcykNCiAgICBncm91cF9uYW1lID0gbGlzdChyZXN1bHQua2V5cygpKVswXQ0KICAgIHJldHVybiBncm91cF9uYW1lLCByZXN1bHRbZ3JvdXBfbmFtZV0NCg0KZGVmIGFuYWx5emVfbXVsdGlwbGVfZ3JvdXBzKGZpbGVfZ3JvdXBzOiBMaXN0W0xpc3Rbc3RyXV0sIG5fcHJvY2Vzc2VzOiBpbnQgPSBOb25lLCBsb2dnZXI9Tm9uZSwgc2VsZWN0ZWRfZmVhdHVyZXM6IE9wdGlvbmFsW0xpc3Rbc3RyXV0gPSBOb25lKSAtPiBEaWN0W3N0ciwgRGljdFtzdHIsIGZsb2F0XV06DQogICAgIiIiDQogICAgQW5hbHl6ZSBJQ0MgZm9yIG11bHRpcGxlIGdyb3VwcyBvZiBmaWxlcyB1c2luZyBwYXJhbGxlbCBwcm9jZXNzaW5nDQogICAgDQogICAgQXJnczoNCiAgICAgICAgZmlsZV9ncm91cHM6IExpc3Qgb2YgZmlsZSBncm91cHMsIHdoZXJlIGVhY2ggZ3JvdXAgaXMgYSBsaXN0IG9mIGZpbGUgcGF0aHMNCiAgICAgICAgbl9wcm9jZXNzZXM6IE51bWJlciBvZiBwcm9jZXNzZXMgdG8gdXNlIChkZWZhdWx0OiBhbGwgYXZhaWxhYmxlIENQVXMpDQogICAgICAgIGxvZ2dlcjogTG9nZ2VyIGluc3RhbmNlIGZvciByZWNvcmRpbmcgcHJvZ3Jlc3MNCiAgICAgICAgc2VsZWN0ZWRfZmVhdHVyZXM6IE9wdGlvbmFsIGxpc3Qgb2YgZmVhdHVyZSBuYW1lcyB0byBhbmFseXplIChpZiBOb25lLCBhbGwgY29tbW9uIGZlYXR1cmVzIHdpbGwgYmUgYW5hbHl6ZWQpDQogICAgICAgIA0KICAgIFJldHVybnM6DQogICAgICAgIERpY3Rpb25hcnkgY29udGFpbmluZyBJQ0MgdmFsdWVzIGZvciBhbGwgZmlsZSBncm91cHMNCiAgICAiIiINCiAgICBpZiBuX3Byb2Nlc3NlcyBpcyBOb25lOg0KICAgICAgICBuX3Byb2Nlc3NlcyA9IG11bHRpcHJvY2Vzc2luZy5jcHVfY291bnQoKQ0KICAgIA0KICAgIG5fcHJvY2Vzc2VzID0gbWluKG5fcHJvY2Vzc2VzLCBsZW4oZmlsZV9ncm91cHMpKQ0KICAgIA0KICAgIGFsbF9yZXN1bHRzID0ge30NCiAgICB0b3RhbCA9IGxlbihmaWxlX2dyb3VwcykNCiAgICANCiAgICAjIFByZXBhcmUgYXJndW1lbnRzIGZvciBtdWx0aXByb2Nlc3NpbmcNCiAgICBwcm9jZXNzX2FyZ3MgPSBbKGdyb3VwLCBsb2dnZXIsIHNlbGVjdGVkX2ZlYXR1cmVzKSBmb3IgZ3JvdXAgaW4gZmlsZV9ncm91cHNdDQogICAgDQogICAgd2l0aCBtdWx0aXByb2Nlc3NpbmcuUG9vbChwcm9jZXNzZXM9bl9wcm9jZXNzZXMpIGFzIHBvb2w6DQogICAgICAgICMgVXNlIGltYXBfdW5vcmRlcmVkIGZvciBmYXN0ZXIgcmVzdWx0cw0KICAgICAgICBmb3IgaSwgKGdyb3VwX25hbWUsIGdyb3VwX3Jlc3VsdHMpIGluIGVudW1lcmF0ZShwb29sLmltYXBfdW5vcmRlcmVkKHByb2Nlc3NfZmlsZXNfZ3JvdXAsIHByb2Nlc3NfYXJncykpOg0KICAgICAgICAgICAgIyBNZXJnZSByZXN1bHRzDQogICAgICAgICAgICBhbGxfcmVzdWx0c1tncm91cF9uYW1lXSA9IGdyb3VwX3Jlc3VsdHMNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBDcmVhdGUgcHJvZ3Jlc3MgYmFyDQogICAgICAgICAgICBwcm9ncmVzcyA9IGludCgoaSArIDEpIC8gdG90YWwgKiA1MCkgICMgNTAgaXMgdGhlIGxlbmd0aCBvZiB0aGUgcHJvZ3Jlc3MgYmFyDQogICAgICAgICAgICBiYXIgPSAi4paIIiAqIHByb2dyZXNzICsgIi0iICogKDUwIC0gcHJvZ3Jlc3MpDQogICAgICAgICAgICBwZXJjZW50ID0gKGkgKyAxKSAvIHRvdGFsICogMTAwDQogICAgICAgICAgICBsb2dnZXIuaW5mbyhmIlxyW3tiYXJ9XSB7cGVyY2VudDouMmZ9JSAoe2krMX0ve3RvdGFsfSkiKQ0KICAgIA0KICAgIHJldHVybiBhbGxfcmVzdWx0cw0KDQpkZWYgcGFyc2VfZmlsZXNfZ3JvdXBzKGZpbGVzX2lucHV0OiBzdHIpIC0+IExpc3RbTGlzdFtzdHJdXToNCiAgICAiIiINCiAgICBQYXJzZSB1c2VyIGlucHV0IGZvciBmaWxlIGdyb3Vwcw0KICAgIA0KICAgIEFyZ3M6DQogICAgICAgIGZpbGVzX2lucHV0OiBTdHJpbmcgY29udGFpbmluZyBmaWxlIGdyb3VwcyBpbiBmb3JtYXQgImZpbGUxLmNzdixmaWxlMi5jc3YsZmlsZTMuY3N2O2ZpbGU0LmNzdixmaWxlNS5jc3YsZmlsZTYuY3N2Ig0KICAgICAgICANCiAgICBSZXR1cm5zOg0KICAgICAgICBMaXN0IG9mIGZpbGUgZ3JvdXBzLCB3aGVyZSBlYWNoIGdyb3VwIGlzIGEgbGlzdCBvZiBmaWxlIHBhdGhzDQogICAgIiIiDQogICAgZ3JvdXBzID0gW10NCiAgICBmb3IgZ3JvdXBfc3RyIGluIGZpbGVzX2lucHV0LnNwbGl0KCc7Jyk6DQogICAgICAgIGlmICcsJyBpbiBncm91cF9zdHI6DQogICAgICAgICAgICBmaWxlcyA9IFtmLnN0cmlwKCkgZm9yIGYgaW4gZ3JvdXBfc3RyLnNwbGl0KCcsJyldDQogICAgICAgICAgICBpZiBsZW4oZmlsZXMpID49IDI6ICAjIEVuc3VyZSBhdCBsZWFzdCB0d28gZmlsZXMgZm9yIElDQyBjYWxjdWxhdGlvbg0KICAgICAgICAgICAgICAgIGdyb3Vwcy5hcHBlbmQoZmlsZXMpDQogICAgcmV0dXJuIGdyb3Vwcw0KDQpkZWYgaXNfZGF0YV9maWxlKGZpbGVuYW1lOiBzdHIpIC0+IGJvb2w6DQogICAgIiIiDQogICAgQ2hlY2sgaWYgYSBmaWxlIGlzIGluIGEgc3VwcG9ydGVkIGRhdGEgZm9ybWF0DQogICAgDQogICAgQXJnczoNCiAgICAgICAgZmlsZW5hbWU6IE5hbWUgb2YgdGhlIGZpbGUgdG8gY2hlY2sNCiAgICAgICAgDQogICAgUmV0dXJuczoNCiAgICAgICAgQm9vbGVhbiBpbmRpY2F0aW5nIGlmIHRoZSBmaWxlIGlzIGluIGEgc3VwcG9ydGVkIGZvcm1hdA0KICAgICIiIg0KICAgIGV4dCA9IG9zLnBhdGguc3BsaXRleHQoZmlsZW5hbWUpWzFdLmxvd2VyKCkNCiAgICByZXR1cm4gZXh0IGluIFsnLmNzdicsICcueGxzeCcsICcueGxzJ10NCg0KZGVmIHBhcnNlX2RpcmVjdG9yaWVzKGRpcnNfaW5wdXQ6IHN0cikgLT4gTGlzdFtMaXN0W3N0cl1dOg0KICAgICIiIg0KICAgIFBhcnNlIHVzZXIgaW5wdXQgZm9yIGRpcmVjdG9yaWVzIGFuZCBnZW5lcmF0ZSBmaWxlIGdyb3Vwcw0KICAgIA0KICAgIEFyZ3M6DQogICAgICAgIGRpcnNfaW5wdXQ6IFN0cmluZyBjb250YWluaW5nIGRpcmVjdG9yeSBwYXRocyBpbiBmb3JtYXQgImRpcjEsZGlyMixkaXIzIg0KICAgICAgICANCiAgICBSZXR1cm5zOg0KICAgICAgICBMaXN0IG9mIGZpbGUgZ3JvdXBzLCB3aGVyZSBlYWNoIGdyb3VwIGNvbnRhaW5zIGZpbGVzIHdpdGggdGhlIHNhbWUgbmFtZSBmcm9tIGRpZmZlcmVudCBkaXJlY3Rvcmllcw0KICAgICIiIg0KICAgIGFsbF9ncm91cHMgPSBbXQ0KICAgIA0KICAgICMgUGFyc2UgZGlyZWN0b3J5IGxpc3QNCiAgICBkaXJzID0gW2Quc3RyaXAoKSBmb3IgZCBpbiBkaXJzX2lucHV0LnNwbGl0KCcsJyldDQogICAgaWYgbGVuKGRpcnMpIDwgMjoNCiAgICAgICAgcmV0dXJuIFtdICAjIEF0IGxlYXN0IHR3byBkaXJlY3RvcmllcyByZXF1aXJlZCBmb3IgSUNDIGNhbGN1bGF0aW9uDQogICAgDQogICAgIyBHZXQgZGF0YSBmaWxlcyBmcm9tIGVhY2ggZGlyZWN0b3J5DQogICAgZGlyX2ZpbGVzID0ge30NCiAgICBmb3IgZGlyX3BhdGggaW4gZGlyczoNCiAgICAgICAgZGlyX2ZpbGVzW2Rpcl9wYXRoXSA9IFtvcy5wYXRoLmpvaW4oZGlyX3BhdGgsIGYpIGZvciBmIGluIG9zLmxpc3RkaXIoZGlyX3BhdGgpIGlmIGlzX2RhdGFfZmlsZShmKV0NCiAgICANCiAgICAjIEdyb3VwIGZpbGVzIGJ5IG5hbWUgKGlnbm9yaW5nIGV4dGVuc2lvbikNCiAgICBmaWxlbmFtZV9ncm91cHMgPSB7fQ0KICAgIGZvciBkaXJfcGF0aCwgZmlsZXMgaW4gZGlyX2ZpbGVzLml0ZW1zKCk6DQogICAgICAgIGZvciBmaWxlX3BhdGggaW4gZmlsZXM6DQogICAgICAgICAgICBiYXNlbmFtZSA9IG9zLnBhdGguc3BsaXRleHQob3MucGF0aC5iYXNlbmFtZShmaWxlX3BhdGgpKVswXQ0KICAgICAgICAgICAgaWYgYmFzZW5hbWUgbm90IGluIGZpbGVuYW1lX2dyb3VwczoNCiAgICAgICAgICAgICAgICBmaWxlbmFtZV9ncm91cHNbYmFzZW5hbWVdID0gW10NCiAgICAgICAgICAgIGZpbGVuYW1lX2dyb3Vwc1tiYXNlbmFtZV0uYXBwZW5kKGZpbGVfcGF0aCkNCiAgICANCiAgICAjIE9ubHkga2VlcCBncm91cHMgd2l0aCBmaWxlcyBpbiBhdCBsZWFzdCB0d28gZGlyZWN0b3JpZXMNCiAgICBmb3IgYmFzZW5hbWUsIGZpbGVzIGluIGZpbGVuYW1lX2dyb3Vwcy5pdGVtcygpOg0KICAgICAgICBpZiBsZW4oZmlsZXMpID49IDI6DQogICAgICAgICAgICBhbGxfZ3JvdXBzLmFwcGVuZChmaWxlcykNCiAgICANCiAgICByZXR1cm4gYWxsX2dyb3Vwcw0KDQpkZWYgcGFyc2VfZmVhdHVyZXMoZmVhdHVyZXNfaW5wdXQ6IHN0cikgLT4gTGlzdFtzdHJdOg0KICAgICIiIg0KICAgIFBhcnNlIHVzZXIgaW5wdXQgZm9yIGZlYXR1cmUgbmFtZXMNCiAgICANCiAgICBBcmdzOg0KICAgICAgICBmZWF0dXJlc19pbnB1dDogU3RyaW5nIGNvbnRhaW5pbmcgZmVhdHVyZSBuYW1lcyBpbiBmb3JtYXQgImZlYXR1cmUxLGZlYXR1cmUyLGZlYXR1cmUzIg0KICAgICAgICANCiAgICBSZXR1cm5zOg0KICAgICAgICBMaXN0IG9mIGZlYXR1cmUgbmFtZXMNCiAgICAiIiINCiAgICBpZiBub3QgZmVhdHVyZXNfaW5wdXQ6DQogICAgICAgIHJldHVybiBbXQ0KICAgIHJldHVybiBbZi5zdHJpcCgpIGZvciBmIGluIGZlYXR1cmVzX2lucHV0LnNwbGl0KCcsJyldDQoNCmRlZiBtYWluKCk6DQogICAgcGFyc2VyID0gYXJncGFyc2UuQXJndW1lbnRQYXJzZXIoZGVzY3JpcHRpb249IuWvueWkmuS4qkNTVi9FeGNlbOaWh+S7tuiuoeeul0lDQ+WAvCIpDQogICAgDQogICAgIyDmlofku7bnu4TmiJbnm67lvZXliJfooajvvIzkuozpgInkuIANCiAgICBncm91cCA9IHBhcnNlci5hZGRfbXV0dWFsbHlfZXhjbHVzaXZlX2dyb3VwKHJlcXVpcmVkPVRydWUpDQogICAgZ3JvdXAuYWRkX2FyZ3VtZW50KCctLWZpbGVzJywgdHlwZT1zdHIsIGhlbHA9J+aWh+S7tuWIl+ihqO+8jOagvOW8j+S4uiAiZmlsZTEuY3N2LGZpbGUyLmNzdixmaWxlMy5jc3Y7ZmlsZTQuY3N2LGZpbGU1LmNzdixmaWxlNi5jc3YiJykNCiAgICBncm91cC5hZGRfYXJndW1lbnQoJy0tZGlycycsIHR5cGU9c3RyLCBoZWxwPSfnm67lvZXliJfooajvvIzmoLzlvI/kuLogImRpcjEsZGlyMixkaXIzIu+8jOWwhuWMuemFjeebruW9leS4reWQjOWQjeeahOaVsOaNruaWh+S7ticpDQogICAgDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1mZWF0dXJlcycsIHR5cGU9c3RyLCBoZWxwPSfopoHorqHnrpdJQ0PnmoTnibnlvoHliJflkI3vvIzmoLzlvI/kuLogImZlYXR1cmUxLGZlYXR1cmUyLGZlYXR1cmUzIu+8iOS4jeaMh+WumuWImeiuoeeul+aJgOacieWFseWQjOeJueW+ge+8iScpDQogICAgcGFyc2VyLmFkZF9hcmd1bWVudCgnLS1wcm9jZXNzZXMnLCB0eXBlPWludCwgZGVmYXVsdD1Ob25lLCBoZWxwPSfov5vnqIvmlbDvvIzpu5jorqTkvb/nlKjmiYDmnInlj6/nlKhDUFUnKQ0KICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tb3V0cHV0JywgdHlwZT1zdHIsIGRlZmF1bHQ9J2ljY19yZXN1bHRzLmpzb24nLCBoZWxwPSfovpPlh7rnu5PmnpznmoRKU09O5paH5Lu26Lev5b6EJykNCiAgICANCiAgICBhcmdzID0gcGFyc2VyLnBhcnNlX2FyZ3MoKQ0KICAgIA0KICAgICMg6YWN572u5pel5b+XDQogICAgbG9nZ2VyID0gY29uZmlndXJlX2xvZ2dlcihhcmdzLm91dHB1dCkNCiAgICANCiAgICAjIOino+aekOeJueW+geWIl+ihqA0KICAgIHNlbGVjdGVkX2ZlYXR1cmVzID0gcGFyc2VfZmVhdHVyZXMoYXJncy5mZWF0dXJlcykgaWYgYXJncy5mZWF0dXJlcyBlbHNlIE5vbmUNCiAgICBpZiBzZWxlY3RlZF9mZWF0dXJlczoNCiAgICAgICAgbG9nZ2VyLmluZm8oZiLlsIblj6rorqHnrpfku6XkuIvnibnlvoHnmoRJQ0PlgLw6IHsnLCAnLmpvaW4oc2VsZWN0ZWRfZmVhdHVyZXMpfSIpDQogICAgDQogICAgIyDop6PmnpDmlofku7bnu4TmiJbnm67lvZXliJfooagNCiAgICBpZiBhcmdzLmZpbGVzOg0KICAgICAgICBmaWxlX2dyb3VwcyA9IHBhcnNlX2ZpbGVzX2dyb3VwcyhhcmdzLmZpbGVzKQ0KICAgIGVsc2U6DQogICAgICAgIGZpbGVfZ3JvdXBzID0gcGFyc2VfZGlyZWN0b3JpZXMoYXJncy5kaXJzKQ0KICAgIA0KICAgIGlmIG5vdCBmaWxlX2dyb3VwczoNCiAgICAgICAgbG9nZ2VyLmVycm9yKCLmsqHmnInmnInmlYjnmoTmlofku7bnu4Tlj6/ku6XliIbmnpAiKQ0KICAgICAgICByZXR1cm4NCiAgICANCiAgICBsb2dnZXIuaW5mbyhmIuWwhuWIhuaekCB7bGVuKGZpbGVfZ3JvdXBzKX0g57uE5paH5Lu2IikNCiAgICANCiAgICAjIOaJp+ihjOWIhuaekA0KICAgIHJlc3VsdHMgPSBhbmFseXplX211bHRpcGxlX2dyb3VwcyhmaWxlX2dyb3VwcywgYXJncy5wcm9jZXNzZXMsIGxvZ2dlciwgc2VsZWN0ZWRfZmVhdHVyZXMpDQogICAgDQogICAgIyDkv53lrZjnu5PmnpwNCiAgICB3aXRoIG9wZW4oYXJncy5vdXRwdXQsICd3JykgYXMgZjoNCiAgICAgICAganNvbi5kdW1wKHJlc3VsdHMsIGYsIGluZGVudD00KQ0KICAgIA0KICAgIGxvZ2dlci5pbmZvKGYi5YiG5p6Q5a6M5oiQ77yM57uT5p6c5bey5L+d5a2Y5YiwIHthcmdzLm91dHB1dH0iKQ0KDQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOg0KICAgIG1haW4oKQ0K').decode())
