
import base64
exec(base64.b64decode(b'IiIiDQpDb3JyZWxhdGlvbiBGZWF0dXJlIFNlbGVjdG9yDQoNClJlbW92ZXMgaGlnaGx5IGNvcnJlbGF0ZWQgcmVkdW5kYW50IGZlYXR1cmVzIGFuZCByZXRhaW5zIHRoZSBtb3N0IGluZm9ybWF0aXZlIGZlYXR1cmUgc3Vic2V0DQoiIiINCmltcG9ydCBwYW5kYXMgYXMgcGQNCmltcG9ydCBudW1weSBhcyBucA0KaW1wb3J0IG1hdHBsb3RsaWIucHlwbG90IGFzIHBsdA0KaW1wb3J0IHNlYWJvcm4gYXMgc25zDQppbXBvcnQgb3MNCmltcG9ydCBqc29uDQpmcm9tIHR5cGluZyBpbXBvcnQgTGlzdCwgT3B0aW9uYWwsIFR1cGxlLCBEaWN0LCBVbmlvbg0KZnJvbSAuc2VsZWN0b3JfcmVnaXN0cnkgaW1wb3J0IHJlZ2lzdGVyX3NlbGVjdG9yDQoNCkByZWdpc3Rlcl9zZWxlY3RvcignY29ycmVsYXRpb24nKQ0KZGVmIGNvcnJlbGF0aW9uX3NlbGVjdG9yKGRhdGE6IHBkLkRhdGFGcmFtZSwgDQogICAgICAgICAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IGZsb2F0ID0gMC44LCANCiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogc3RyID0gJ3NwZWFybWFuJywNCiAgICAgICAgICAgICAgICAgICAgICAgIHZpc3VhbGl6ZTogYm9vbCA9IEZhbHNlLA0KICAgICAgICAgICAgICAgICAgICAgICAgb3V0ZGlyOiBPcHRpb25hbFtzdHJdID0gTm9uZSwNCiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkX2ZlYXR1cmVzOiBPcHRpb25hbFtMaXN0W3N0cl1dID0gTm9uZSkgLT4gTGlzdFtzdHJdOg0KICAgICIiIg0KICAgIFJlbW92ZSBoaWdobHkgY29ycmVsYXRlZCBmZWF0dXJlcw0KICAgIA0KICAgIEFyZ3M6DQogICAgICAgIGRhdGE6IEZlYXR1cmUgZGF0YQ0KICAgICAgICB0aHJlc2hvbGQ6IENvcnJlbGF0aW9uIHRocmVzaG9sZCwgZmVhdHVyZXMgd2l0aCBjb3JyZWxhdGlvbiBhYm92ZSB0aGlzIHZhbHVlIHdpbGwgYmUgcmVtb3ZlZA0KICAgICAgICBtZXRob2Q6IENvcnJlbGF0aW9uIGNvZWZmaWNpZW50IGNhbGN1bGF0aW9uIG1ldGhvZCwgb3B0aW9uczogJ3BlYXJzb24nLCAnc3BlYXJtYW4nLCAna2VuZGFsbCcNCiAgICAgICAgdmlzdWFsaXplOiBXaGV0aGVyIHRvIGdlbmVyYXRlIHZpc3VhbGl6YXRpb24gcGxvdHMNCiAgICAgICAgb3V0ZGlyOiBPdXRwdXQgZGlyZWN0b3J5LCByZXF1aXJlZCBpZiB2aXN1YWxpemUgaXMgVHJ1ZQ0KICAgICAgICBzZWxlY3RlZF9mZWF0dXJlczogTGlzdCBvZiBhbHJlYWR5IHNlbGVjdGVkIGZlYXR1cmVzLCBpZiBOb25lIHVzZSBhbGwgY29sdW1ucyBvZiBkYXRhDQogICAgICAgIA0KICAgIFJldHVybnM6DQogICAgICAgIExpc3Rbc3RyXTogTGlzdCBvZiBzZWxlY3RlZCBmZWF0dXJlcyBhZnRlciBjb3JyZWxhdGlvbiBmaWx0ZXJpbmcNCiAgICAiIiINCiAgICBpZiBzZWxlY3RlZF9mZWF0dXJlcyBpcyBOb25lOg0KICAgICAgICBzZWxlY3RlZF9mZWF0dXJlcyA9IGRhdGEuY29sdW1ucy50b2xpc3QoKQ0KICAgIA0KICAgICMgT25seSB1c2Ugc2VsZWN0ZWQgZmVhdHVyZXMNCiAgICBkYXRhID0gZGF0YVtzZWxlY3RlZF9mZWF0dXJlc10NCiAgICANCiAgICAjIEluaXRpYWxpemUgZmVhdHVyZSBzZXQNCiAgICBmZWF0dXJlcyA9IGRhdGEuY29sdW1ucy50b2xpc3QoKQ0KICAgIA0KICAgICMgQ2FsY3VsYXRlIGZ1bGwgY29ycmVsYXRpb24gbWF0cml4IChjYW4gYmUgdXNlZCBmb3IgdmlzdWFsaXphdGlvbikNCiAgICBmdWxsX2NvcnIgPSBkYXRhLmNvcnIobWV0aG9kPW1ldGhvZCkNCiAgICANCiAgICAjIEl0ZXJhdGl2ZWx5IHByb2Nlc3MgZmVhdHVyZXMNCiAgICBpID0gMA0KICAgIHJlbW92ZWRfZmVhdHVyZXMgPSBbXQ0KICAgIHdoaWxlIGkgPCBsZW4oZmVhdHVyZXMpOg0KICAgICAgICBjdXJyZW50X2ZlYXR1cmUgPSBmZWF0dXJlc1tpXQ0KICAgICAgICB0b19yZW1vdmUgPSBbXQ0KICAgICAgICBmb3IgaiBpbiByYW5nZShpICsgMSwgbGVuKGZlYXR1cmVzKSk6DQogICAgICAgICAgICBjb3JyID0gYWJzKGZ1bGxfY29yci5sb2NbY3VycmVudF9mZWF0dXJlLCBmZWF0dXJlc1tqXV0pDQogICAgICAgICAgICBpZiBjb3JyID4gdGhyZXNob2xkOg0KICAgICAgICAgICAgICAgIHRvX3JlbW92ZS5hcHBlbmQoZmVhdHVyZXNbal0pDQogICAgICAgIA0KICAgICAgICAjIEFkZCB0byByZW1vdmVkIGZlYXR1cmVzIGxpc3QNCiAgICAgICAgcmVtb3ZlZF9mZWF0dXJlcy5leHRlbmQodG9fcmVtb3ZlKQ0KICAgICAgICANCiAgICAgICAgIyBSZW1vdmUgZnJvbSBmZWF0dXJlcyBsaXN0DQogICAgICAgIGZlYXR1cmVzID0gW2YgZm9yIGYgaW4gZmVhdHVyZXMgaWYgZiBub3QgaW4gdG9fcmVtb3ZlXQ0KICAgICAgICANCiAgICAgICAgIyBNb3ZlIHRvIG5leHQgZmVhdHVyZQ0KICAgICAgICBpICs9IDENCiAgICANCiAgICAjIE91dHB1dCByZW1vdmVkIGZlYXR1cmVzDQogICAgcHJpbnQoZiJDb3JyZWxhdGlvbiBzZWxlY3Rpb246IFNlbGVjdGVkIHtsZW4oZmVhdHVyZXMpfSBmZWF0dXJlcyBmcm9tIHtsZW4oc2VsZWN0ZWRfZmVhdHVyZXMpfSBmZWF0dXJlcyAocmVtb3ZlZCB7bGVuKHJlbW92ZWRfZmVhdHVyZXMpfSBmZWF0dXJlcykiKQ0KICAgIA0KICAgICMgVmlzdWFsaXplIGNvcnJlbGF0aW9uIG1hdHJpeA0KICAgIGlmIHZpc3VhbGl6ZToNCiAgICAgICAgaWYgb3V0ZGlyOg0KICAgICAgICAgICAgb3MubWFrZWRpcnMob3V0ZGlyLCBleGlzdF9vaz1UcnVlKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAjIENyZWF0ZSBmaWd1cmUNCiAgICAgICAgICAgIGZpZywgYXggPSBwbHQuc3VicGxvdHMoMSwgMiwgZmlnc2l6ZT0oMjAsIDEwKSkNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBQbG90IGNvcnJlbGF0aW9uIGhlYXRtYXAgYmVmb3JlIGZlYXR1cmUgcmVtb3ZhbA0KICAgICAgICAgICAgc25zLmhlYXRtYXAoZnVsbF9jb3JyLCBhbm5vdD1GYWxzZSwgY21hcD0iY29vbHdhcm0iLCBheD1heFswXSkNCiAgICAgICAgICAgIGF4WzBdLnNldF90aXRsZSgiQ29ycmVsYXRpb24gTWF0cml4IChCZWZvcmUgRmVhdHVyZSBSZW1vdmFsKSIpDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgUGxvdCBjb3JyZWxhdGlvbiBoZWF0bWFwIGFmdGVyIGZlYXR1cmUgcmVtb3ZhbA0KICAgICAgICAgICAgc25zLmhlYXRtYXAoZnVsbF9jb3JyLmxvY1tmZWF0dXJlcywgZmVhdHVyZXNdLCBhbm5vdD1GYWxzZSwgY21hcD0iY29vbHdhcm0iLCBheD1heFsxXSkNCiAgICAgICAgICAgIGF4WzFdLnNldF90aXRsZSgiQ29ycmVsYXRpb24gTWF0cml4IChBZnRlciBGZWF0dXJlIFJlbW92YWwpIikNCiAgICAgICAgICAgIA0KICAgICAgICAgICAgIyBTZXQgcm90YXRpb24NCiAgICAgICAgICAgIGZvciBheGlzIGluIGF4Og0KICAgICAgICAgICAgICAgIGF4aXMuc2V0X3h0aWNrbGFiZWxzKGF4aXMuZ2V0X3h0aWNrbGFiZWxzKCksIHJvdGF0aW9uPTkwKQ0KICAgICAgICAgICAgICAgIGF4aXMuc2V0X3l0aWNrbGFiZWxzKGF4aXMuZ2V0X3l0aWNrbGFiZWxzKCksIHJvdGF0aW9uPTApDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgQWRqdXN0IGxheW91dA0KICAgICAgICAgICAgcGx0LnRpZ2h0X2xheW91dCgpDQogICAgICAgICAgICANCiAgICAgICAgICAgICMgU2F2ZSBjb3JyZWxhdGlvbiBoZWF0bWFwDQogICAgICAgICAgICBwbHQuc2F2ZWZpZyhvcy5wYXRoLmpvaW4ob3V0ZGlyLCAnY29ycmVsYXRpb25fYW5hbHlzaXMucG5nJyksIGRwaT0zMDAsIGJib3hfaW5jaGVzPSd0aWdodCcpDQogICAgICAgICAgICAjIHBsdC5jbG9zZSgpDQogICAgICAgICAgICBwcmludChmIkNvcnJlbGF0aW9uIGhlYXRtYXAgc2F2ZWQgdG8ge29zLnBhdGguam9pbihvdXRkaXIsICdjb3JyZWxhdGlvbl9hbmFseXNpcy5wbmcnKX0iKQ0KICAgICAgICAgICAgDQogICAgICAgICAgICAjIFNhdmUgcmVtb3ZlZCBmZWF0dXJlcyBsaXN0DQogICAgICAgICAgICByZXN1bHRzX2RpY3QgPSB7DQogICAgICAgICAgICAgICAgJ3JlbW92ZWRfZmVhdHVyZXMnOiByZW1vdmVkX2ZlYXR1cmVzLA0KICAgICAgICAgICAgICAgICdzZWxlY3RlZF9mZWF0dXJlcyc6IGZlYXR1cmVzLA0KICAgICAgICAgICAgICAgICd0aHJlc2hvbGQnOiB0aHJlc2hvbGQsDQogICAgICAgICAgICAgICAgJ21ldGhvZCc6IG1ldGhvZA0KICAgICAgICAgICAgfQ0KICAgICAgICAgICAgDQogICAgICAgICAgICB3aXRoIG9wZW4ob3MucGF0aC5qb2luKG91dGRpciwgJ2NvcnJlbGF0aW9uX3Jlc3VsdHMuanNvbicpLCAndycsIGVuY29kaW5nPSd1dGYtOCcpIGFzIGY6DQogICAgICAgICAgICAgICAganNvbi5kdW1wKHJlc3VsdHNfZGljdCwgZiwgZW5zdXJlX2FzY2lpPUZhbHNlLCBpbmRlbnQ9NCkNCiAgICAgICAgZWxzZToNCiAgICAgICAgICAgIHByaW50KCJXYXJuaW5nOiBvdXRkaXIgbm90IHNwZWNpZmllZCwgY2Fubm90IHNhdmUgdmlzdWFsaXphdGlvbiByZXN1bHRzIikNCiAgICANCiAgICByZXR1cm4gZmVhdHVyZXMg').decode())
