
import base64
exec(base64.b64decode(b'"""
Habitat Clustering Analysis Module
"""

import os
import json
import numpy as np
import pandas as pd
import SimpleITK as sitk
import warnings
import multiprocessing
import matplotlib.pyplot as plt
from glob import glob
from typing import Dict, List, Any, Tuple, Optional, Union, Callable

from habit.utils.io_utils import (get_image_and_mask_paths,
                            detect_image_names,
                            check_data_structure,
                            save_habitat_image)

from habit.utils.visualization import plot_cluster_scores
from habit.utils.log_utils import get_logger

from habit.core.habitat_analysis.clustering.base_clustering import get_clustering_algorithm
from habit.core.habitat_analysis.clustering.cluster_validation_methods import (
    get_validation_methods,
    is_valid_method_for_algorithm,
    get_default_methods
)
from habit.core.habitat_analysis.features.feature_preprocessing import preprocess_features
from .features.feature_extractor_factory import create_feature_extractor
# Ignore warnings
warnings.simplefilter('ignore')

# Import progress utilities
from habit.utils.progress_utils import CustomTqdm


class HabitatAnalysis:
    """
    Habitat Analysis class for performing two-step clustering analysis:
    1. Individual-level clustering: Divide each tumor into supervoxels
    2. Population-level clustering: Cluster the average values of all sample supervoxels to obtain habitats
    """

    def __init__(self,
                 root_folder: str,
                 out_folder: Optional[str] = None,
                 feature_config: Optional[Dict[str, Any]] = None,
                 supervoxel_clustering_method: str = "kmeans",
                 habitat_clustering_method: str = "kmeans",
                 n_clusters_supervoxel: int = 50,
                 n_clusters_habitats_max: int = 10,
                 n_clusters_habitats_min: int = 2,
                 habitat_cluster_selection_method: Optional[Union[str, List[str]]] = None,
                 best_n_clusters: Optional[int] = None,
                 n_processes: int = 1,
                 random_state: int = 42,
                 verbose: bool = True,
                 images_dir: str = "images",
                 masks_dir: str = "masks",
                 plot_curves: bool = True,
                 progress_callback: Optional[Callable] = None,
                 save_intermediate_results: bool = False,
                 config_file: Optional[str] = None):
        """
        Initialize HabitatAnalysis class

        Args:
            root_folder (str): Root directory of data
            out_folder (str, optional): Output directory
            feature_config (dict, optional): Complete feature configuration dictionary that includes:
                - image_names (list): List of image names, e.g. ['pre_contrast', 'LAP', 'PVP']
                - extractor (str or dict): Feature extractor name or configuration
                - params (dict): Feature extractor parameters, used when extractor is a string
                - preprocessing (dict): Feature preprocessing parameters
            supervoxel_clustering_method (str, optional): Supervoxel clustering method, default is kmeans
            habitat_clustering_method (str, optional): Habitat clustering method, default is kmeans
            n_clusters_supervoxel (int, optional): Number of supervoxel clusters, default is 50
            n_clusters_habitats_max (int, optional): Maximum number of habitat clusters, default is 10
            n_clusters_habitats_min (int, optional): Minimum number of habitat clusters, default is 2
            habitat_cluster_selection_method (str, optional): Method for selecting number of habitat clusters
            best_n_clusters (int, optional): Directly specify the best number of clusters
            n_processes (int, optional): Number of parallel processes, default is 1
            random_state (int, optional): Random seed, default is 42
            verbose (bool, optional): Whether to output detailed information, default is True
            images_dir (str, optional): Image directory name, default is images
            masks_dir (str, optional): Mask directory name, default is masks
            plot_curves (bool, optional): Whether to plot evaluation curves, default is True
            progress_callback (callable, optional): Progress callback function
            save_intermediate_results (bool, optional): Whether to save intermediate results, default is False
            config_file (str, optional): Path to the original configuration file
        """
        # Basic parameters
        self.data_dir = os.path.abspath(root_folder)
        self.out_dir = os.path.abspath(out_folder or os.path.join(self.data_dir, "habitats_output"))
        self.config_file = config_file  # 保存原始配置文件路径

        # Initialize logger
        self.logger = get_logger(self.out_dir, "HabitatAnalysis")

        # Clustering parameters
        self.supervoxel_method = supervoxel_clustering_method
        self.habitat_method = habitat_clustering_method
        self.n_clusters_supervoxel = n_clusters_supervoxel
        self.n_clusters_habitats_max = n_clusters_habitats_max
        self.n_clusters_habitats_min = n_clusters_habitats_min

        self.verbose = verbose

        # Get validation methods supported by the clustering method using cluster_validation_methods module
        validation_info = get_validation_methods(habitat_clustering_method)
        valid_selection_methods = list(validation_info['methods'].keys())
        default_methods = get_default_methods(habitat_clustering_method)

        if self.verbose:
            self.logger.info(f"Validation methods supported by clustering method '{habitat_clustering_method}': {', '.join(valid_selection_methods)}")
            self.logger.info(f"Default validation methods: {', '.join(default_methods)}")

        # Check validity of habitat_cluster_selection_method parameter
        if habitat_cluster_selection_method is None:
            # Use default methods
            self.habitat_cluster_selection_method = default_methods
            if self.verbose:
                self.logger.info(f"No clustering evaluation method specified, using default methods: {', '.join(default_methods)}")
        elif isinstance(habitat_cluster_selection_method, str):
            # Check if single method is valid
            if is_valid_method_for_algorithm(habitat_clustering_method, habitat_cluster_selection_method.lower()):
                self.habitat_cluster_selection_method = habitat_cluster_selection_method.lower()
            else:
                # If specified method is invalid for current clustering algorithm, use default methods
                original_method = habitat_cluster_selection_method
                self.habitat_cluster_selection_method = default_methods
                if self.verbose:
                    self.logger.warning(f"Validation method '{original_method}' is invalid for clustering method '{habitat_clustering_method}'")
                    self.logger.info(f"Available validation methods: {', '.join(valid_selection_methods)}")
                    self.logger.info(f"Using default methods: {', '.join(default_methods)}")
        elif isinstance(habitat_cluster_selection_method, list):
            # Check if multiple methods are valid
            valid_methods = []
            invalid_methods = []

            for method in habitat_cluster_selection_method:
                if is_valid_method_for_algorithm(habitat_clustering_method, method.lower()):
                    valid_methods.append(method.lower())
                else:
                    invalid_methods.append(method)

            if valid_methods:
                self.habitat_cluster_selection_method = valid_methods
                if invalid_methods and self.verbose:
                    self.logger.warning(f"The following validation methods are invalid for clustering method '{habitat_clustering_method}': {', '.join(invalid_methods)}")
                    self.logger.info(f"Only using valid methods: {', '.join(valid_methods)}")
            else:
                # If no valid methods, use default methods
                self.habitat_cluster_selection_method = default_methods
                if self.verbose:
                    self.logger.warning(f"All specified validation methods are invalid for clustering method '{habitat_clustering_method}'")
                    self.logger.info(f"Available validation methods: {', '.join(valid_selection_methods)}")
                    self.logger.info(f"Using default methods: {', '.join(default_methods)}")
        else:
            # Parameter type error, use default methods
            self.habitat_cluster_selection_method = default_methods
            if self.verbose:
                self.logger.warning("Clustering evaluation method parameter type error, should be string or list")
                self.logger.info(f"Using default methods: {', '.join(default_methods)}")


        # Parameters
        self.best_n_clusters = best_n_clusters
        self.random_state = random_state
        self.verbose = verbose
        self.images_dir = images_dir
        self.masks_dir = masks_dir
        self.plot_curves = plot_curves
        self.n_processes = n_processes
        self.progress_callback = progress_callback
        self.save_intermediate_results = save_intermediate_results

        # Initialize feature configuration dictionary
        self.feature_config = feature_config or {}

        # 检查feature_config格式
        if 'voxel_level' not in self.feature_config:
            raise ValueError("voxel_level configuration is required")

        # 检查supervoxel_level配置（可选）
        if 'supervoxel_level' in self.feature_config and self.verbose:
            self.logger.info("Note: supervoxel_level feature configuration is detected but not used in the current implementation.")

        # Create output directory
        os.makedirs(self.out_dir, exist_ok=True)

        # Image paths
        self.images_paths, self.mask_paths = get_image_and_mask_paths(
            self.data_dir, keyword_of_raw_folder=self.images_dir,
            keyword_of_mask_folder=self.masks_dir
        )

        # 检查voxel_level中是否有image_names
        voxel_config = self.feature_config['voxel_level']
        if isinstance(voxel_config, dict) and 'image_names' not in voxel_config:
            if self.verbose:
                self.logger.info("Image names not provided in voxel_level config, automatically detecting from data directory...")
            image_names = detect_image_names(self.images_paths)
            self.feature_config['voxel_level']['image_names'] = image_names
            if self.verbose:
                self.logger.info(f"Detected image names: {image_names}")

        # Initialize feature extractor
        self._init_feature_extractor()

        # Initialize clustering algorithms
        self.supervoxel_clustering = get_clustering_algorithm(
            self.supervoxel_method,
            n_clusters=self.n_clusters_supervoxel,
            random_state=self.random_state
        )

        self.habitat_clustering = get_clustering_algorithm(
            self.habitat_method,
            n_clusters=self.n_clusters_habitats_max,
            random_state=self.random_state
        )

        # Results storage
        self.X = None  # Feature matrix
        self.supervoxel_labels = {}  # Supervoxel labels
        self.habitat_labels = None  # Habitat labels
        self.results_df = None  # Results DataFrame

        # Validate data structure
        voxel_config = self.feature_config['voxel_level']
        if isinstance(voxel_config, dict) and 'image_names' in voxel_config:
            check_data_structure(self.images_paths, self.mask_paths,
                               voxel_config['image_names'], None)
        else:
            raise ValueError("voxel_level configuration must contain 'image_names' field")

    def _init_feature_extractor(self):
        """Initialize feature extractor based on configuration"""
        # 使用表达式解析器
        from .features.feature_expression_parser import FeatureExpressionParser

        # 创建表达式解析器实例
        self.expression_parser = FeatureExpressionParser()

        # 提取voxel_level配置
        voxel_config = self.feature_config['voxel_level']

        # 确保voxel_config是字典且包含method字段
        if not isinstance(voxel_config, dict) or 'method' not in voxel_config:
            raise ValueError("voxel_level must be a dictionary with 'method' field")

        # 解析voxel_level表达式
        self.voxel_method, self.voxel_params, self.voxel_processing_steps = self.expression_parser.parse(voxel_config)

        # 检查是否提供了supervoxel_level配置
        self.has_supervoxel_config = 'supervoxel_level' in self.feature_config
        if self.has_supervoxel_config:
            # 提取supervoxel_level配置
            supervoxel_config = self.feature_config['supervoxel_level']

            # 确保supervoxel_config是字典且包含method字段
            if not isinstance(supervoxel_config, dict) or 'method' not in supervoxel_config:
                raise ValueError("supervoxel_level must be a dictionary with 'method' field")

            # 解析supervoxel_level表达式
            self.supervoxel_method_name, self.supervoxel_params, self.supervoxel_processing_steps = self.expression_parser.parse(supervoxel_config)

            if self.verbose:
                self.logger.info("supervoxel_level feature configuration detected but not used in current implementation")

        # 创建跨图像特征提取器参数
        # 准备跨图像参数
        cross_image_kwargs = {}

        # 检查voxel_params是否为空
        if self.voxel_params:
            # 处理跨图像参数
            for param_name, param_value in self.voxel_params.items():
                # 从voxel_level.params中获取参数值
                voxel_params = self.feature_config['voxel_level'].get('params', {})
                if param_value == param_name and param_name in voxel_params:
                    cross_image_kwargs[param_name] = voxel_params[param_name]
                elif isinstance(param_value, str) and param_value in voxel_params:
                    cross_image_kwargs[param_name] = voxel_params[param_value]
                else:
                    # 否则直接使用参数值
                    cross_image_kwargs[param_name] = param_value
                    
        self.cross_image_kwargs = cross_image_kwargs

    def _process_subject(self, subject: str) -> Tuple[str, pd.DataFrame]:
        """
        Process a single subject

        Args:
            subject (str): Subject ID to process

        Returns:
            Tuple[str, pd.DataFrame]: Tuple containing subject ID and processed data
        """
        # Extract features
        _, feature_df, raw_df, mask_info = self.extract_voxel_features(subject)

        # Apply preprocessing if enabled
        if self.feature_config.get('preprocessing', False):
            # 检查是否使用新的多方法串联机制
            if 'methods' in self.feature_config['preprocessing']:
                # 使用多方法串联
                X_subj_ = preprocess_features(
                    feature_df.values,
                    methods=self.feature_config['preprocessing']['methods']
                )
                feature_df = pd.DataFrame(X_subj_, columns=feature_df.columns)
            else:
                # 使用单一方法（向后兼容）
                X_subj_ = preprocess_features(feature_df.values, **self.feature_config['preprocessing'])
                feature_df = pd.DataFrame(X_subj_, columns=feature_df.columns)

        # Perform supervoxel clustering for each subject individually
        try:
            self.supervoxel_clustering.fit(feature_df.values)
            supervoxel_labels = self.supervoxel_clustering.predict(feature_df.values)
            supervoxel_labels += 1  # Start numbering from 1
        except Exception as e:
            print(f"Error: {str(e)}")
            raise ValueError(f"Error performing supervoxel clustering for subject {subject}")

        # Get feature names
        feature_names = feature_df.columns.tolist()

        # Get original feature names (image names)
        original_feature_names = raw_df.columns.tolist()

        # Calculate average features for each supervoxel
        unique_labels = np.arange(1, self.n_clusters_supervoxel + 1)
        data_rows = []
        for i in unique_labels:
            indices = supervoxel_labels == i
            if np.any(indices):
                # Calculate average features for current supervoxel
                mean_features = np.mean(feature_df[indices], axis=0)
                mean_original_features = np.mean(raw_df.values[indices], axis=0)
                count = np.sum(indices)
                # Create data row
                data_row = {
                    "Subject": subject,
                    "Supervoxel": i,
                    "Count": count,
                }
                # Add feature means
                for j, name in enumerate(feature_names):
                    data_row[name] = mean_features[j]

                # Add original feature means
                for j, name in enumerate(original_feature_names):
                    data_row[f"{name}-original"] = mean_original_features[j]

                data_rows.append(data_row)
        mean_features_df = pd.DataFrame(data_rows)

        # Save supervoxel image
        if isinstance(mask_info, dict) and 'mask_array' in mask_info and 'mask' in mask_info:
            # Create supervoxel map
            supervoxel_map = np.zeros_like(mask_info['mask_array'])
            mask_indices = mask_info['mask_array'] > 0
            supervoxel_map[mask_indices] = supervoxel_labels

            # Convert to SimpleITK image and save
            supervoxel_img = sitk.GetImageFromArray(supervoxel_map)
            supervoxel_img.CopyInformation(mask_info['mask'])

            # Save as nrrd file
            sitk.WriteImage(supervoxel_img, os.path.join(self.out_dir, f"{subject}_supervoxel.nrrd"))

            # Clean up memory
            del supervoxel_map, mask_indices

        # Clean up memory
        del feature_df, raw_df, supervoxel_labels

        return subject, mean_features_df

    def run(self, subjects: Optional[List[str]] = None, save_results_csv: bool = True) -> pd.DataFrame:
        """
        Run the habitat clustering pipeline

        Args:
            subjects (Optional[List[str]], optional): List of subjects to process. If None, all subjects will be processed.
            save_results_csv (bool, optional): Whether to save results as CSV files. Defaults to True.

        Returns:
            pd.DataFrame: Habitat clustering results
        """
        if subjects is None:
            subjects = list(self.images_paths.keys())

        # Extract features and perform supervoxel clustering for each subject
        if self.verbose:
            self.logger.info("Extracting features and performing supervoxel clustering...")

        # Results storage
        mean_features_all = pd.DataFrame()

        # Use multiprocessing to process subjects
        if self.n_processes > 1 and len(subjects) > 1:
            if self.verbose:
                self.logger.info(f"Using {self.n_processes} processes for parallel processing...")

            with multiprocessing.Pool(processes=self.n_processes) as pool:
                if self.verbose:
                    self.logger.info("Starting parallel processing of all subjects...")
                results_iter = pool.imap_unordered(self._process_subject, subjects)

                # 使用自定义进度条显示进度
                progress_bar = CustomTqdm(total=len(subjects), desc="Processing subjects")
                for subject, mean_features_df in results_iter:
                    mean_features_all = pd.concat([mean_features_all, mean_features_df], ignore_index=True)
                    progress_bar.update(1)

                if self.verbose:
                    self.logger.info(f"\nAll {len(subjects)} subjects have been processed. Proceeding to clustering...")
        else:
            # Single process processing, use custom progress bar
            progress_bar = CustomTqdm(total=len(subjects), desc="Processing subjects")
            for subject in subjects:
                _, mean_features_df = self._process_subject(subject)
                mean_features_all = pd.concat([mean_features_all, mean_features_df], ignore_index=True)
                progress_bar.update(1)

        # Check if there is enough data for clustering
        if len(mean_features_all) == 0:
            raise ValueError("No valid features for analysis")

        # ===============================================
        # Prepare features for population-level clustering
        # feature_names = mean_features_all中不以-original结尾的列
        feature_names = [col for col in mean_features_all.columns if not col.endswith('-original')]
        feature_names = feature_names[3:]
        features_for_clustering = mean_features_all[feature_names]
        supervoxel_file_keyword = self.feature_config['supervoxel_level'].get('supervoxel_file_keyword', '*_supervoxel.nrrd')
        supervoxel_files = glob(os.path.join(self.out_dir, supervoxel_file_keyword))
        # if subject in subjects, then add to supervoxel_file_keyword_dict
        self.supervoxel_file_dict = {}
        for subject in subjects:
            for supervoxel_file in supervoxel_files:
                if subject in supervoxel_file:
                    self.supervoxel_file_dict[subject] = supervoxel_file
                    break
            else:
                raise ValueError(f"No supervoxel file found for subject {subject}")

        if not self.supervoxel_file_dict:
            raise ValueError(f"No supervoxel files found in {self.out_dir}")

        # 检查是否使用mean_voxel_features
        is_mean_voxel_features = 'mean_voxel_features' in self.feature_config['supervoxel_level']['method']
        if not is_mean_voxel_features:
            # Use multiprocessing to extract supervoxel features for all subjects
            if self.n_processes > 1 and len(subjects) > 1:
                if self.verbose:
                    self.logger.info(f"Using {self.n_processes} processes for supervoxel feature extraction...")

                with multiprocessing.Pool(processes=self.n_processes) as pool:
                    if self.verbose:
                        self.logger.info("Starting parallel supervoxel feature extraction...")

                    # Use imap_unordered to process subjects in parallel
                    results_iter = pool.imap_unordered(self.extract_supervoxel_features, subjects)

                    # Collect features from all subjects
                    features_for_clustering = []
                    progress_bar = CustomTqdm(total=len(subjects), desc="Extracting supervoxel features")
                    for features in results_iter:
                        features_for_clustering.append(features)
                        progress_bar.update(1)

                    # concat
                    features_for_clustering = pd.concat(features_for_clustering, ignore_index=True)
            else:
                # Single process processing
                features_for_clustering = []
                progress_bar = CustomTqdm(total=len(subjects), desc="Extracting supervoxel features")
                for subject in subjects:
                    features = self.extract_supervoxel_features(subject)
                    features_for_clustering.append(features)
                    progress_bar.update(1)

                # Convert to numpy array
                features_for_clustering = pd.concat(features_for_clustering, ignore_index=True)


        # ===============================================
        #  TODO: perform group level feature preprocessing, perform here
        # Current only support mean filling
        features_for_clustering = features_for_clustering.apply(lambda x: pd.to_numeric(x, errors='coerce'))
        features_for_clustering = features_for_clustering.applymap(lambda x: x.item() if hasattr(x, 'item') else x)
        features_for_clustering = features_for_clustering.replace([np.inf, -np.inf], np.nan)
        features_for_clustering = features_for_clustering.fillna(features_for_clustering.mean())
        # ===============================================

        # Determine optimal number of clusters
        if self.best_n_clusters is not None:
            # If best number of clusters is already specified, use it directly
            optimal_n_clusters = self.best_n_clusters
            scores = None
            if self.verbose:
                self.logger.info(f"Using specified best number of clusters: {optimal_n_clusters}")
        else:
            # Otherwise find optimal number of clusters
            if self.verbose:
                self.logger.info("Finding optimal number of clusters...")

            try:
                # Ensure cluster number range is reasonable
                min_clusters = max(2, self.n_clusters_habitats_min)
                max_clusters = min(self.n_clusters_habitats_max, len(features_for_clustering) - 1)

                if max_clusters <= min_clusters:
                    # If range is invalid, use default minimum value
                    if self.verbose:
                        self.logger.warning(f"Invalid cluster number range [{min_clusters}, {max_clusters}], using default value")
                    optimal_n_clusters = min_clusters
                    scores = None
                else:
                    # Try to find optimal number of clusters
                    try:
                        cluster_for_best_n = get_clustering_algorithm(self.habitat_method)
                        optimal_n_clusters, scores = cluster_for_best_n.find_optimal_clusters(
                            features_for_clustering,
                            min_clusters=min_clusters,
                            max_clusters=max_clusters,
                            methods=self.habitat_cluster_selection_method,
                            show_progress=True
                        )

                        # If plotting is needed, plot score graphs
                        if self.plot_curves and scores is not None:
                            try:
                                # 确保输出目录存在
                                os.makedirs(self.out_dir, exist_ok=True)

                                # 构造保存路径
                                save_path = os.path.join(self.out_dir, 'habitat_clustering_scores.png')

                                # 使用新的可视化函数绘图
                                plot_cluster_scores(
                                    scores_dict=scores,
                                    cluster_range=cluster_for_best_n.cluster_range,
                                    methods=self.habitat_cluster_selection_method,
                                    clustering_algorithm=self.habitat_method,
                                    figsize=(12, 8),
                                    save_path=save_path,
                                    show=False
                                )

                                if self.verbose:
                                    self.logger.info(f"聚类评分图已保存至 {save_path}")
                            except Exception as e:
                                # 捕获绘图过程中的错误
                                if self.verbose:
                                    self.logger.error(f"绘制聚类评分图时出错: {str(e)}")
                                    self.logger.info("继续执行其他流程...")
                    except Exception as e:
                        # If optimal number of clusters cannot be found, use default value and warn user
                        if self.verbose:
                            self.logger.warning(f"Failed to find optimal number of clusters: {str(e)}")
                            self.logger.info("Using default number of clusters")
                        optimal_n_clusters = min(3, max_clusters)  # Use a reasonable default value
                        scores = None
            except Exception as e:
                # Catch all exceptions, use default value
                if self.verbose:
                    self.logger.error(f"Exception occurred when determining optimal number of clusters: {str(e)}")
                    self.logger.info("Using default number of clusters")
                optimal_n_clusters = 3  # Default to 3 clusters
                scores = None

            if self.verbose:
                self.logger.info(f"Optimal number of clusters: {optimal_n_clusters}")

        # Perform population-level clustering using optimal number of clusters
        if self.verbose:
            self.logger.info("Performing population-level clustering...")


        # Reinitialize clustering algorithm with optimal number of clusters
        self.habitat_clustering.n_clusters = optimal_n_clusters
        self.habitat_clustering.fit(features_for_clustering)
        habitat_labels = self.habitat_clustering.predict(features_for_clustering) + 1  # Start numbering from 1

        # Add habitat labels to results
        mean_features_all['Habitats'] = habitat_labels

        # Create results DataFrame
        self.results_df = mean_features_all.copy()

        # Save results
        if save_results_csv:
            if self.verbose:
                self.logger.info("Saving results...")

            # 确保目录存在
            os.makedirs(self.out_dir, exist_ok=True)

            # 如果有原始配置文件，则直接复制到输出目录
            if self.config_file and os.path.exists(self.config_file):
                import shutil
                config_out_path = os.path.join(self.out_dir, 'config.yaml')
                shutil.copy2(self.config_file, config_out_path)
                if self.verbose:
                    self.logger.info(f"原始配置文件已复制到: {config_out_path}")
            else:
                # 没有原始配置文件时，仍然保存当前配置为JSON
                if self.verbose:
                    self.logger.info("未提供原始配置文件路径，将以JSON格式保存当前配置")
                
                # 创建包含当前分析参数的配置字典
                config = {
                    'data_dir': self.data_dir,
                    'out_folder': self.out_dir,
                    'feature_config': self.feature_config,
                    'supervoxel_clustering_method': self.supervoxel_method,
                    'habitat_clustering_method': self.habitat_method,
                    'n_clusters_supervoxel': self.n_clusters_supervoxel,
                    'n_clusters_habitats_max': self.n_clusters_habitats_max,
                    'n_clusters_habitats_min': self.n_clusters_habitats_min,
                    'habitat_cluster_selection_method': self.habitat_cluster_selection_method,
                    'best_n_clusters': self.best_n_clusters,
                    'n_processes': self.n_processes,
                    'random_state': self.random_state,
                    'verbose': self.verbose,
                    'images_dir': self.images_dir,
                    'masks_dir': self.masks_dir,
                    'plot_curves': self.plot_curves,
                    'save_intermediate_results': self.save_intermediate_results,
                    'optimal_n_clusters_habitat': int(optimal_n_clusters)
                }

                # 保存配置
                with open(os.path.join(self.out_dir, 'config.json'), 'w') as f:
                    json.dump(config, f, indent=4)

            # Save CSV
            self.results_df.to_csv(os.path.join(self.out_dir, 'habitats.csv'), index=False)

            # Save habitat images for each subject
            # Set Subject as index
            self.results_df.set_index('Subject', inplace=True)

            # 使用多进程保存所有主体的栖息地图像
            with multiprocessing.Pool(processes=self.n_processes) as pool:
                # 创建参数列表
                args_list = [(i, subject) for i, subject in enumerate(subjects)]

                # 使用imap_unordered并配合自定义进度条
                progress_bar = CustomTqdm(total=len(subjects), desc="Save habitat images")
                for _ in pool.imap_unordered(self._save_habitat_for_subject, args_list):
                    progress_bar.update(1)

        return self.results_df

    def _save_habitat_for_subject(self, args):
        """
        保存单个主体的栖息地图像

        Args:
            args (tuple): 包含主体索引和名称的元组 (i, subject)

        Returns:
            int: 主体索引
        """
        i, subject = args
        supervoxel_path = os.path.join(self.out_dir, f"{subject}_supervoxel.nrrd")
        save_habitat_image(subject, self.results_df, supervoxel_path, self.out_dir)
        return i

    def extract_voxel_features(self, subject: str) -> Tuple[str, pd.DataFrame, pd.DataFrame, np.ndarray, dict]:
        """
        Extract features for a single subject

        Args:
            subject (str): Subject ID

        Returns:
            Tuple[str, pd.DataFrame, pd.DataFrame, np.ndarray, dict]: Tuple containing:
                - subject ID
                - feature dataframe
                - original image dataframe
                - mask array
                - dictionary with image information
        """
        from .features.feature_extractor_factory import create_feature_extractor
        
        # Get image and mask paths
        img_paths = self.images_paths[subject]
        mask_paths = self.mask_paths[subject]

        # 先处理单图像
        processed_images = []
        # 遍历处理步骤，处理每个单图像
        for step in self.voxel_processing_steps:
            method = step['method']
            img_name = step['image']
            step_params = step['params'].copy()  # 复制参数，避免修改原始参数

            # 检查step_params是否为空
            if step_params:
                # 处理参数，将参数名替换为实际值
                for param_name, param_value in list(step_params.items()):
                    # 检查voxel_level.params中的参数
                    voxel_params = self.feature_config['voxel_level'].get('params', {})
                    if param_value == param_name and param_name in voxel_params:
                        step_params[param_name] = voxel_params[param_name]
                    elif isinstance(param_value, str) and param_value in voxel_params:
                        step_params[param_name] = voxel_params[param_value]

            # 按需创建单图像特征提取器并处理图像
            step_params.update({'subject': subject, 'image': img_name})
            extractor = create_feature_extractor(method, **step_params)
            processed_df = extractor.extract_features(img_paths.get(img_name), mask_paths.get(img_name), **step_params)
            processed_images.append(processed_df)

            # # 查看mask有多少不为0的值
            # mask_img = sitk.ReadImage(mask_paths.get(img_name))
            # mask_array = sitk.GetArrayFromImage(mask_img)
            # mask_nonzero = np.sum(mask_array != 0)
            # unique_values = np.unique(mask_array)
            # print(f"{img_name} mask has {mask_nonzero} non-zero values, unique values: {unique_values}")

        # 按需创建跨图像特征提取器
        cross_image_kwargs = self.cross_image_kwargs.copy()
        cross_image_kwargs.update({'subject': subject})
        cross_image_extractor = create_feature_extractor(self.voxel_method, **cross_image_kwargs)
        features = cross_image_extractor.extract_features(processed_images, **cross_image_kwargs)

        # get raw data - 在连接前重命名列
        raw_df = pd.concat(processed_images, axis=1)

        # Save mask information for later image reconstruction
        mask = self.mask_paths[subject]
        mask = list(mask.values())[0]
        mask_img = sitk.ReadImage(mask)
        mask_array = sitk.GetArrayFromImage(mask_img)
        mask_info = {
            'mask': mask_img,
            'mask_array': mask_array
        }

        # Clean up memory
        del processed_images, mask_img, mask_array

        return subject, features, raw_df, mask_info

    def extract_supervoxel_features(self, subject: str) -> np.ndarray:
        """
        Extract supervoxel-level features from supervoxel maps and original images

        Returns:
            np.ndarray: Supervoxel features for clustering
        """
        from .features.feature_extractor_factory import create_feature_extractor

        # Get image and mask paths
        img_paths = self.images_paths[subject]
        mask_path = self.supervoxel_file_dict[subject]

        # 获取outdir中的所有supervoxel文件
        if self.verbose:
            self.logger.info("Extracting supervoxel-level features...")

        # 先处理单图像
        processed_images = []
        # 遍历处理步骤，处理每个单图像
        for step in self.supervoxel_processing_steps:
            method = step['method']
            img_name = step['image']
            step_params = step['params'].copy()  # 复制参数，避免修改原始参数

            # 使用单图像特征提取器处理图像
            step_params.update({'subject': subject, 'image': img_name})
            # 按需创建单图像特征提取器
            single_image_extractor = create_feature_extractor(method, **step_params)
            processed_df = single_image_extractor.extract_features(img_paths.get(img_name), mask_path, **step_params)
            processed_images.append(processed_df)

        # 按需创建跨图像特征提取器
        supervoxel_params = self.supervoxel_params.copy()
        cross_image_extractor = create_feature_extractor(self.supervoxel_method_name, **supervoxel_params)
        features = cross_image_extractor.extract_features(processed_images, **supervoxel_params)

        return features




').decode())
