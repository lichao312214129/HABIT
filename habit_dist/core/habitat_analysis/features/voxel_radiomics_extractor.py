
import base64
exec(base64.b64decode(b'IiIiClZveGVsLWxldmVsIHJhZGlvbWljcyBmZWF0dXJlIGV4dHJhY3RvcgoiIiIKCmltcG9ydCBvcwppbXBvcnQgbG9nZ2luZwppbXBvcnQgbnVtcHkgYXMgbnAKaW1wb3J0IHBhbmRhcyBhcyBwZAppbXBvcnQgU2ltcGxlSVRLIGFzIHNpdGsKaW1wb3J0IHNpeApmcm9tIHR5cGluZyBpbXBvcnQgVW5pb24sIExpc3QsIERpY3QsIE9wdGlvbmFsLCBUdXBsZQpmcm9tIHJhZGlvbWljcyBpbXBvcnQgZmVhdHVyZWV4dHJhY3Rvcgpmcm9tIC5iYXNlX2ZlYXR1cmVfZXh0cmFjdG9yIGltcG9ydCBCYXNlRmVhdHVyZUV4dHJhY3RvciwgcmVnaXN0ZXJfZmVhdHVyZV9leHRyYWN0b3IKCkByZWdpc3Rlcl9mZWF0dXJlX2V4dHJhY3Rvcigndm94ZWxfcmFkaW9taWNzJykKY2xhc3MgVm94ZWxSYWRpb21pY3NFeHRyYWN0b3IoQmFzZUZlYXR1cmVFeHRyYWN0b3IpOgogICAgIiIiCiAgICBFeHRyYWN0IHZveGVsLWxldmVsIHJhZGlvbWljcyBmZWF0dXJlcyBmcm9tIGltYWdlIHdpdGhpbiBtYXNrIHJlZ2lvbgogICAgdXNpbmcgUHlSYWRpb21pY3MnIHZveGVsLWJhc2VkIGV4dHJhY3Rpb24KICAgICIiIgogICAgCiAgICBkZWYgX19pbml0X18oc2VsZiwgKiprd2FyZ3MpOgogICAgICAgICIiIgogICAgICAgIEluaXRpYWxpemUgdm94ZWwtbGV2ZWwgcmFkaW9taWNzIGZlYXR1cmUgZXh0cmFjdG9yCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgKiprd2FyZ3M6IEFkZGl0aW9uYWwgcGFyYW1ldGVycwogICAgICAgICIiIgogICAgICAgIHN1cGVyKCkuX19pbml0X18oKiprd2FyZ3MpCiAgICAgICAgIyBzZWxmLnBhcmFtc19maWxl5piva3dhcmdz5Lit55qEcGF0aAogICAgICAgICMg55Sob3PliKTmlq0s5aaC5p6c5rKh5pyJZmlsZeWImeaKpemUmQogICAgICAgIGZvciBrZXksIHZhbHVlIGluIGt3YXJncy5pdGVtcygpOgogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyh2YWx1ZSk6CiAgICAgICAgICAgICAgICBzZWxmLnBhcmFtc19maWxlID0gdmFsdWUKICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgaWYgc2VsZi5wYXJhbXNfZmlsZSBpcyBOb25lOgogICAgICAgICAgICByYWlzZSBWYWx1ZUVycm9yKCJwYXJhbXNfZmlsZSBub3QgZm91bmQgaW4ga3dhcmdzIikKICAgICAgICAKICAgIGRlZiBleHRyYWN0X2ZlYXR1cmVzKHNlbGYsIGltYWdlX2RhdGE6IFVuaW9uW3N0ciwgc2l0ay5JbWFnZV0sCiAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrX2RhdGE6IFVuaW9uW3N0ciwgc2l0ay5JbWFnZV0sCiAgICAgICAgICAgICAgICAgICAgICAgICAqKmt3YXJncykgLT4gcGQuRGF0YUZyYW1lOgogICAgICAgICIiIgogICAgICAgIEV4dHJhY3Qgdm94ZWwtbGV2ZWwgcmFkaW9taWNzIGZlYXR1cmVzIGZyb20gaW1hZ2Ugd2l0aGluIG1hc2sgcmVnaW9uCiAgICAgICAgCiAgICAgICAgQXJnczoKICAgICAgICAgICAgaW1hZ2VfZGF0YTogUGF0aCB0byBpbWFnZSBmaWxlIG9yIFNpbXBsZUlUSyBpbWFnZSBvYmplY3QKICAgICAgICAgICAgbWFza19kYXRhOiBQYXRoIHRvIG1hc2sgZmlsZSBvciBTaW1wbGVJVEsgbWFzayBvYmplY3QKICAgICAgICAgICAgKiprd2FyZ3M6IEFkZGl0aW9uYWwgcGFyYW1ldGVycwogICAgICAgICAgICAgICAgc3Viajogc3ViamVjdCBuYW1lCiAgICAgICAgICAgICAgICBpbWdfbmFtZTogTmFtZSBvZiB0aGUgaW1hZ2UgdG8gYXBwZW5kIHRvIGZlYXR1cmUgbmFtZXMKICAgICAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgcGQuRGF0YUZyYW1lOiBFeHRyYWN0ZWQgdm94ZWwtbGV2ZWwgcmFkaW9taWNzIGZlYXR1cmVzCiAgICAgICAgIiIiCiAgICAgICAgIyBMb2FkIGltYWdlCiAgICAgICAgaWYgaXNpbnN0YW5jZShpbWFnZV9kYXRhLCBzdHIpOgogICAgICAgICAgICBpZiBvcy5wYXRoLmV4aXN0cyhpbWFnZV9kYXRhKToKICAgICAgICAgICAgICAgIGltYWdlID0gc2l0ay5SZWFkSW1hZ2UoaW1hZ2VfZGF0YSkKICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgIHJhaXNlIEZpbGVOb3RGb3VuZEVycm9yKGYiSW1hZ2UgZmlsZSBub3QgZm91bmQ6IHtpbWFnZV9kYXRhfSIpCiAgICAgICAgZWxzZToKICAgICAgICAgICAgaW1hZ2UgPSBpbWFnZV9kYXRhCgogICAgICAgICMgR2V0IGltYWdlIG5hbWUKICAgICAgICBpbWFnZV9uYW1lID0ga3dhcmdzLmdldCgnaW1nX25hbWUnLCBOb25lKQogICAgICAgIGlmIGltYWdlX25hbWUgaXMgTm9uZToKICAgICAgICAgICAgaW1hZ2VfbmFtZSA9IG9zLnBhdGguYmFzZW5hbWUoaW1hZ2VfZGF0YSkKICAgICAgICAgICAgCiAgICAgICAgIyBMb2FkIG1hc2sKICAgICAgICBpZiBpc2luc3RhbmNlKG1hc2tfZGF0YSwgc3RyKToKICAgICAgICAgICAgaWYgb3MucGF0aC5leGlzdHMobWFza19kYXRhKToKICAgICAgICAgICAgICAgIG1hc2sgPSBzaXRrLlJlYWRJbWFnZShtYXNrX2RhdGEpCiAgICAgICAgICAgIGVsc2U6CiAgICAgICAgICAgICAgICByYWlzZSBGaWxlTm90Rm91bmRFcnJvcihmIk1hc2sgZmlsZSBub3QgZm91bmQ6IHttYXNrX2RhdGF9IikKICAgICAgICBlbHNlOgogICAgICAgICAgICBtYXNrID0gbWFza19kYXRhCiAgICAgICAgICAgIAogICAgICAgICMgQ2hlY2sgaWYgbWFzayBoYXMgbm9uLXplcm8gdmFsdWVzCiAgICAgICAgbWFza19hcnJheSA9IHNpdGsuR2V0QXJyYXlGcm9tSW1hZ2UobWFzaykKICAgICAgICBpZiBucC5zdW0obWFza19hcnJheSA+IDApID09IDA6CiAgICAgICAgICAgIHJhaXNlIFZhbHVlRXJyb3IoIk1hc2sgaGFzIG5vIG5vbi16ZXJvIHZhbHVlcywgY2Fubm90IGV4dHJhY3QgZmVhdHVyZXMiKQogICAgICAgIAogICAgICAgIHRyeToKICAgICAgICAgICAgIyBJbml0aWFsaXplIFB5UmFkaW9taWNzIGZlYXR1cmUgZXh0cmFjdG9yCiAgICAgICAgICAgIGV4dHJhY3RvciA9IGZlYXR1cmVleHRyYWN0b3IuUmFkaW9taWNzRmVhdHVyZUV4dHJhY3RvcihzZWxmLnBhcmFtc19maWxlKQogICAgICAgICAgICBrZXJuZWxSYWRpdXMgPSBrd2FyZ3MuZ2V0KCdrZXJuZWxSYWRpdXMnLCAxKQogICAgICAgICAgICBleHRyYWN0b3Iuc2V0dGluZ3MudXBkYXRlKHsna2VybmVsUmFkaXVzJzoga2VybmVsUmFkaXVzfSkKICAgICAgICAgICAgCiAgICAgICAgICAgICMgRXh0cmFjdCB2b3hlbC1iYXNlZCBmZWF0dXJlcwogICAgICAgICAgICByZXN1bHQgPSBleHRyYWN0b3IuZXhlY3V0ZShpbWFnZSwgbWFzaywgdm94ZWxCYXNlZD1UcnVlKQoKICAgICAgICAgICAgIyBGaWx0ZXIgb3V0IGRpYWdub3N0aWMgZmVhdHVyZXMKICAgICAgICAgICAgcmVzdWx0ID0ge2s6IHYgZm9yIGssIHYgaW4gcmVzdWx0Lml0ZW1zKCkgaWYgbm90IGsuc3RhcnRzd2l0aCgnZGlhZ25vc3RpYycpfQogICAgICAgICAgICAKICAgICAgICAgICAgIyBHZXQgbWFzayBjb29yZGluYXRlcyBhbmQgcHJlcGFyZSBkYXRhIHN0cnVjdHVyZQogICAgICAgICAgICAjIEdldCAzRCBjb29yZGluYXRlcyAoeix5LHgpIG9mIG5vbi16ZXJvIHZveGVscyBpbiB0aGUgbWFzawogICAgICAgICAgICBjb29yZHMgPSBsaXN0KHppcCgqbnAud2hlcmUobWFza19hcnJheSA+IDApKSkKICAgICAgICAgICAgbnVtX3ZveGVscyA9IGxlbihjb29yZHMpCgogICAgICAgICAgICAjIFByb2Nlc3MgZWFjaCBmZWF0dXJlIG1hcCBhbmQgb3JnYW5pemUgaW50byBEYXRhRnJhbWUKICAgICAgICAgICAgZmVhdHVyZV9uYW1lcyA9IFtdCiAgICAgICAgICAgIGZlYXR1cmVfbWF0cml4ID0gW10KICAgICAgICAgICAgCiAgICAgICAgICAgIGZvciBrZXksIHZhbCBpbiBzaXguaXRlcml0ZW1zKHJlc3VsdCk6CiAgICAgICAgICAgICAgICBpZiBpc2luc3RhbmNlKHZhbCwgc2l0ay5JbWFnZSk6ICAjIEZlYXR1cmUgbWFwCiAgICAgICAgICAgICAgICAgICAgIyBBcHBlbmQgaW1hZ2UgbmFtZSB0byBmZWF0dXJlIG5hbWUKICAgICAgICAgICAgICAgICAgICBmZWF0dXJlX25hbWUgPSBmIntrZXl9LXtpbWFnZV9uYW1lfSIgaWYgaW1hZ2VfbmFtZSBlbHNlIGtleQogICAgICAgICAgICAgICAgICAgIGZlYXR1cmVfbmFtZXMuYXBwZW5kKGZlYXR1cmVfbmFtZSkKICAgICAgICAgICAgICAgICAgICBmZWF0dXJlX2FycmF5ID0gc2l0ay5HZXRBcnJheUZyb21JbWFnZSh2YWwpCiAgICAgICAgICAgICAgICAgICAgIyBFeHRyYWN0IHZhbHVlcyBub25lIHplcm8gdm94ZWxzCiAgICAgICAgICAgICAgICAgICAgdmFsdWVzID0gZmVhdHVyZV9hcnJheVtmZWF0dXJlX2FycmF5ID4gMF0KICAgICAgICAgICAgICAgICAgICBmZWF0dXJlX21hdHJpeC5hcHBlbmQodmFsdWVzKQogICAgICAgIAogICAgICAgICAgICAjIFN0b3JlIGZlYXR1cmUgbmFtZXMKICAgICAgICAgICAgc2VsZi5mZWF0dXJlX25hbWVzID0gZmVhdHVyZV9uYW1lcwogICAgICAgICAgICAKICAgICAgICAgICAgIyBDcmVhdGUgRGF0YUZyYW1lIHdpdGggdm94ZWxzIGFzIHJvd3MgYW5kIGZlYXR1cmVzIGFzIGNvbHVtbnMKICAgICAgICAgICAgZmVhdHVyZV9kZiA9IHBkLkRhdGFGcmFtZShmZWF0dXJlX21hdHJpeCkKICAgICAgICAgICAgZmVhdHVyZV9kZiA9IGZlYXR1cmVfZGYuVAogICAgICAgICAgICBmZWF0dXJlX2RmLmNvbHVtbnMgPSBmZWF0dXJlX25hbWVzCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4gZmVhdHVyZV9kZgogICAgICAgICAgICAKICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgICAgIGxvZ2dpbmcuZXJyb3IoZiJGYWlsZWQgdG8gZXh0cmFjdCB2b3hlbC1iYXNlZCBmZWF0dXJlczoge3N0cihlKX0iKQogICAgICAgICAgICByYWlzZQogICAgCiAgICBkZWYgZ2V0X2ZlYXR1cmVfbmFtZXMoc2VsZikgLT4gTGlzdFtzdHJdOgogICAgICAgICIiIgogICAgICAgIEdldCBmZWF0dXJlIG5hbWVzCiAgICAgICAgCiAgICAgICAgUmV0dXJuczoKICAgICAgICAgICAgTGlzdFtzdHJdOiBMaXN0IG9mIGZlYXR1cmUgbmFtZXMKICAgICAgICAiIiIKICAgICAgICByZXR1cm4gc2VsZi5mZWF0dXJlX25hbWVzCgo=').decode())
