
import base64
exec(base64.b64decode(b'IiIiDQpLaW5ldGljIGZlYXR1cmUgZXh0cmFjdG9yIGZvciBoYWJpdGF0IGFuYWx5c2lzLg0KRXh0cmFjdHMga2luZXRpYyBmZWF0dXJlcyBmcm9tIHRpbWUgc2VyaWVzIGRhdGEuDQoiIiINCg0KaW1wb3J0IG51bXB5IGFzIG5wDQppbXBvcnQgcGFuZGFzIGFzIHBkDQpmcm9tIHNjaXB5IGltcG9ydCBzdGF0cw0KZnJvbSAuYmFzZV9mZWF0dXJlX2V4dHJhY3RvciBpbXBvcnQgQmFzZUZlYXR1cmVFeHRyYWN0b3IsIHJlZ2lzdGVyX2ZlYXR1cmVfZXh0cmFjdG9yDQpmcm9tIHR5cGluZyBpbXBvcnQgRGljdCwgTGlzdCwgT3B0aW9uYWwsIFVuaW9uLCBBbnksIFR1cGxlDQoNCmZyb20gaGFiaXQudXRpbHMuaW9fdXRpbHMgaW1wb3J0IGxvYWRfdGltZXN0YW1wDQoNCkByZWdpc3Rlcl9mZWF0dXJlX2V4dHJhY3Rvcigna2luZXRpYycpICAjIFJlZ2lzdGVyIGZlYXR1cmUgZXh0cmFjdG9yDQpjbGFzcyBLaW5ldGljRmVhdHVyZUV4dHJhY3RvcihCYXNlRmVhdHVyZUV4dHJhY3Rvcik6DQogICAgIiIiDQogICAgS2luZXRpYyBGZWF0dXJlIEV4dHJhY3Rvcg0KICAgIA0KICAgIEV4dHJhY3RzIGR5bmFtaWMgZmVhdHVyZXMgYmFzZWQgb24gdGltZS1zZXJpZXMgaW1hZ2VzLCBzdWNoIGFzIGVuaGFuY2VtZW50IHJhdGUsIHBlYWsgZW5oYW5jZW1lbnQsIGV0Yy4NCiAgICAiIiINCiAgICANCiAgICBkZWYgX19pbml0X18oc2VsZiwgdGltZXN0YW1wczogT3B0aW9uYWxbc3RyXSA9IE5vbmUsICoqa3dhcmdzOiBBbnkpIC0+IE5vbmU6DQogICAgICAgICIiIg0KICAgICAgICBJbml0aWFsaXplIHRoZSBraW5ldGljIGZlYXR1cmUgZXh0cmFjdG9yDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgdGltZXN0YW1wcyAoc3RyLCBvcHRpb25hbCk6IFBhdGggdG8gdGltZXN0YW1wIGZpbGUgY29udGFpbmluZyBhY3F1aXNpdGlvbiB0aW1lIGZvciBlYWNoIGltYWdlDQogICAgICAgICAgICAqKmt3YXJnczogT3RoZXIgcGFyYW1ldGVycyB0byBiZSBwYXNzZWQgdG8gdGhlIHBhcmVudCBjbGFzcw0KICAgICAgICAiIiINCiAgICAgICAgc3VwZXIoKS5fX2luaXRfXyh0aW1lc3RhbXBzPXRpbWVzdGFtcHMsICoqa3dhcmdzKQ0KICAgICAgICBzZWxmLmZlYXR1cmVfbmFtZXMgPSBbDQogICAgICAgICAgICAnd2FzaF9pbl9zbG9wZScsICAgICAgICAgICAgICAgICAgICAjIFdhc2gtaW4gcmF0ZQ0KICAgICAgICAgICAgJ3dhc2hfb3V0X3Nsb3BlX2xhcF9wdnAnLCAgICAgICAgICAjIFdhc2gtb3V0IHJhdGUgZnJvbSBhcnRlcmlhbCBwaGFzZSB0byBwb3J0YWwgdmVub3VzIHBoYXNlDQogICAgICAgICAgICAnd2FzaF9vdXRfc2xvcGVfcHZwX2RwJyAgICAgICAgICAgICMgV2FzaC1vdXQgcmF0ZSBmcm9tIHBvcnRhbCB2ZW5vdXMgcGhhc2UgdG8gZGVsYXllZCBwaGFzZQ0KICAgICAgICBdDQogICAgICAgIA0KICAgICAgICAjIExvYWQgdGltZXN0YW1wIGZpbGUNCiAgICAgICAgaWYgdGltZXN0YW1wczoNCiAgICAgICAgICAgIHRyeToNCiAgICAgICAgICAgICAgICBzZWxmLnRpbWVfZGljdCA9IGxvYWRfdGltZXN0YW1wKHRpbWVzdGFtcHMpDQogICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6DQogICAgICAgICAgICAgICAgcHJpbnQoZiJXYXJuaW5nOiBGYWlsZWQgdG8gbG9hZCB0aW1lc3RhbXAgZmlsZToge3N0cihlKX0iKQ0KICAgICAgICAgICAgICAgIHNlbGYudGltZV9kaWN0ID0gTm9uZQ0KICAgICAgICBlbHNlOg0KICAgICAgICAgICAgc2VsZi50aW1lX2RpY3QgPSBOb25lDQogICAgDQogICAgZGVmIGV4dHJhY3RfZmVhdHVyZXMoc2VsZiwgaW1hZ2VfZGF0YTogbnAubmRhcnJheSwgKiprd2FyZ3M6IEFueSkgLT4gbnAubmRhcnJheToNCiAgICAgICAgIiIiDQogICAgICAgIEV4dHJhY3Qga2luZXRpYyBmZWF0dXJlcw0KICAgICAgICANCiAgICAgICAgQXJnczoNCiAgICAgICAgICAgIGltYWdlX2RhdGEgKGRpY3QpOiBEaWN0aW9uYXJ5IG9mIGltYWdlIGRhdGEgd2l0aCBrZXlzIGFzIGltYWdlIG5hbWVzIGFuZCB2YWx1ZXMgYXMgMkQgYXJyYXlzIFtuX3ZveGVscywgbl9mZWF0dXJlc10NCiAgICAgICAgICAgICoqa3dhcmdzOiBPdGhlciBwYXJhbWV0ZXJzIHN1Y2ggYXMgdGltZXN0YW1wcywgc3ViamVjdCwgZXRjLg0KICAgICAgICAgICAgDQogICAgICAgIFJldHVybnM6DQogICAgICAgICAgICBucC5uZGFycmF5OiBGZWF0dXJlIG1hdHJpeCB3aXRoIHNoYXBlIFtuX3ZveGVscywgbl9mZWF0dXJlc10NCiAgICAgICAgIiIiDQogICAgICAgICMgR2V0IHBhcmFtZXRlcnMgZnJvbSBrd2FyZ3MNCiAgICAgICAgc3ViamVjdCA9IGt3YXJncy5nZXQoJ3N1YmplY3QnLCBOb25lKQ0KICAgICAgICANCiAgICAgICAgIyB0byBkZg0KICAgICAgICAjIENvbnZlcnQgaW1hZ2VfZGF0YSBkaWN0aW9uYXJ5IHRvIERhdGFGcmFtZSANCiAgICAgICAgIyBoZWFkZXIgPSAga2V5X25hbWUNCiAgICAgICAgaW1hZ2VfZGYgPSBwZC5jb25jYXQoaW1hZ2VfZGF0YSwgYXhpcz0xKSAgICAgICAgDQogICAgICAgICMgQ2FsY3VsYXRlIGZlYXR1cmVzDQogICAgICAgIGZlYXR1cmVzID0gc2VsZi5fY29tcHV0ZV9raW5ldGljX2ZlYXR1cmVzKGltYWdlX2RmLCBzZWxmLnRpbWVfZGljdC5sb2Nbc3ViamVjdF0pDQogICAgICAgIHJldHVybiBmZWF0dXJlcw0KICAgIA0KICAgIGRlZiBfY29tcHV0ZV9raW5ldGljX2ZlYXR1cmVzKHNlbGYsIGltYWdlX2FycmF5OiBwZC5EYXRhRnJhbWUsIGltYWdlX3RpbWVzdGFtcDogTGlzdFtzdHJdKSAtPiBucC5uZGFycmF5Og0KICAgICAgICAiIiINCiAgICAgICAgQ29tcHV0ZSBraW5ldGljIGZlYXR1cmVzDQogICAgICAgIA0KICAgICAgICBBcmdzOg0KICAgICAgICAgICAgaW1hZ2VfYXJyYXkgKHBkLkRhdGFGcmFtZSk6IERhdGFGcmFtZSBvZiB2b3hlbCBpbnRlbnNpdGllcyBvdmVyIHRpbWUgW25fdm94ZWxzLCBuX3RpbWVwb2ludHNdDQogICAgICAgICAgICBpbWFnZV90aW1lc3RhbXAgKGxpc3QpOiBMaXN0IG9mIHNjYW4gdGltZXN0YW1wcw0KICAgICAgICAgICAgDQogICAgICAgIFJldHVybnM6DQogICAgICAgICAgICBucC5uZGFycmF5OiBDb21wdXRlZCBraW5ldGljIGZlYXR1cmVzDQogICAgICAgICIiIg0KICAgICAgICAjIFZhbGlkYXRlIGlucHV0IGRpbWVuc2lvbnMNCiAgICAgICAgYXNzZXJ0IG5wLnNoYXBlKGltYWdlX2FycmF5KVsxXSA9PSBsZW4oaW1hZ2VfdGltZXN0YW1wKSwgIk51bWJlciBvZiBjb2x1bW5zIGluIGltYWdlIGFycmF5IHNob3VsZCBlcXVhbCBsZW5ndGggb2YgdGltZXN0YW1wIGxpc3QiDQogICAgICAgIA0KICAgICAgICAjIFNtYWxsIGNvbnN0YW50IHRvIGF2b2lkIGRpdmlzaW9uIGJ5IHplcm8NCiAgICAgICAgZXBzaWxvbiA9IDFlLTYNCiAgICAgICAgDQogICAgICAgICMgUGFyc2UgdGltZXN0YW1wcw0KICAgICAgICB0aW1lX2Zvcm1hdCA9ICIlSC0lTS0lUyINCiAgICAgICAgIyBwZC50b19kYXRldGltZQ0KICAgICAgICBpbWFnZV90aW1lc3RhbXAgPSBwZC50b19kYXRldGltZShpbWFnZV90aW1lc3RhbXAsIGZvcm1hdD10aW1lX2Zvcm1hdCkNCiAgICAgICAgIyBTZXQgdGhlIGZpcnN0IHRpbWVzdGFtcCB0byAyNSBzZWNvbmRzIGJlZm9yZSB0aGUgc2Vjb25kIHNjYW4NCiAgICAgICAgaW1hZ2VfdGltZXN0YW1wWydwcmVfY29udHJhc3QnXSA9IGltYWdlX3RpbWVzdGFtcFsnTEFQJ10gLSBwZC5UaW1lZGVsdGEoc2Vjb25kcz0yNSkNCiAgICAgICAgDQogICAgICAgICMgQ2FsY3VsYXRlIHRpbWUgZGlmZmVyZW5jZXMNCiAgICAgICAgZGVsdGFfdDEgPSAoaW1hZ2VfdGltZXN0YW1wWydMQVAnXSAtIGltYWdlX3RpbWVzdGFtcFsncHJlX2NvbnRyYXN0J10pLnRvdGFsX3NlY29uZHMoKQ0KICAgICAgICBkZWx0YV90MiA9IChpbWFnZV90aW1lc3RhbXBbJ1BWUCddIC0gaW1hZ2VfdGltZXN0YW1wWydMQVAnXSkudG90YWxfc2Vjb25kcygpDQogICAgICAgIGRlbHRhX3QzID0gKGltYWdlX3RpbWVzdGFtcFsnZGVsYXlfM21pbiddIC0gaW1hZ2VfdGltZXN0YW1wWydQVlAnXSkudG90YWxfc2Vjb25kcygpDQogICAgICAgIA0KICAgICAgICAjIENhbGN1bGF0ZSByZWxhdGl2ZSBpbnRlbnNpdHkgZGlmZmVyZW5jZXMgd2l0aCBlcHNpbG9uIHRvIGF2b2lkIGRpdmlzaW9uIGJ5IHplcm8NCiAgICAgICAgbGFwX3ByZWNvbnRyYXN0ID0gaW1hZ2VfYXJyYXkubG9jWzosICdyYXctTEFQJ10gLSBpbWFnZV9hcnJheS5sb2NbOiwgJ3Jhdy1wcmVfY29udHJhc3QnXQ0KICAgICAgICBwdnBfbGFwID0gaW1hZ2VfYXJyYXkubG9jWzosICdyYXctUFZQJ10gLSBpbWFnZV9hcnJheS5sb2NbOiwgJ3Jhdy1MQVAnXQ0KICAgICAgICBkZWxheV9wdnAgPSBpbWFnZV9hcnJheS5sb2NbOiwgJ3Jhdy1kZWxheV8zbWluJ10gLSBpbWFnZV9hcnJheS5sb2NbOiwgJ3Jhdy1QVlAnXQ0KICAgICAgICANCiAgICAgICAgIyBTZXQgbmVnYXRpdmUgZW5oYW5jZW1lbnQgdmFsdWVzIHRvIDANCiAgICAgICAgbGFwX3ByZWNvbnRyYXN0W2xhcF9wcmVjb250cmFzdCA8IDBdID0gMA0KICAgICAgICANCiAgICAgICAgIyBDYWxjdWxhdGUga2luZXRpYyBmZWF0dXJlcw0KICAgICAgICB3YXNoX2luX3Nsb3BlID0gbGFwX3ByZWNvbnRyYXN0IC8gKGRlbHRhX3QxICsgZXBzaWxvbikNCiAgICAgICAgd2FzaF9vdXRfc2xvcGVfb2ZfbGFwX2FuZF9wdnAgPSBwdnBfbGFwIC8gKGRlbHRhX3QyICsgZXBzaWxvbikNCiAgICAgICAgd2FzaF9vdXRfc2xvcGVfb2ZfcHZwX2FuZF9kcCA9IGRlbGF5X3B2cCAvIChkZWx0YV90MyArIGVwc2lsb24pDQogICAgICAgIA0KICAgICAgICAjIENvbWJpbmUgZmVhdHVyZXMNCiAgICAgICAgbWV0cmljcyA9IG5wLmFycmF5KFsNCiAgICAgICAgICAgIHdhc2hfaW5fc2xvcGUsDQogICAgICAgICAgICB3YXNoX291dF9zbG9wZV9vZl9sYXBfYW5kX3B2cCwNCiAgICAgICAgICAgIHdhc2hfb3V0X3Nsb3BlX29mX3B2cF9hbmRfZHANCiAgICAgICAgXSkuVA0KDQogICAgICAgICMgdG8gZGYNCiAgICAgICAgbWV0cmljc19kZiA9IHBkLkRhdGFGcmFtZShtZXRyaWNzLCBjb2x1bW5zPXNlbGYuZmVhdHVyZV9uYW1lcykNCiAgICAgICAgDQogICAgICAgIHJldHVybiBtZXRyaWNzX2RmIA0KICAgIA0KICAgIGRlZiBnZXRfZmVhdHVyZV9uYW1lcyhzZWxmKSAtPiBMaXN0W3N0cl06DQogICAgICAgICIiIg0KICAgICAgICBHZXQgZmVhdHVyZSBuYW1lcw0KICAgICAgICANCiAgICAgICAgUmV0dXJuczoNCiAgICAgICAgICAgIExpc3Rbc3RyXTogTGlzdCBvZiBmZWF0dXJlIG5hbWVzDQogICAgICAgICIiIg0KICAgICAgICByZXR1cm4gc2VsZi5mZWF0dXJlX25hbWVzDQo=').decode())
